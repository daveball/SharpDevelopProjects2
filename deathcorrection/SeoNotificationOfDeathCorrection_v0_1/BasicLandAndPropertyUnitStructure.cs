//
// BasicLandAndPropertyUnitStructure.cs
//
// This file was generated by XMLSpy 2012r2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoNotificationOfDeathCorrection_v0_1.bs76662
{
	public class BasicLandAndPropertyUnitStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public BasicLandAndPropertyUnitStructure() : base() { SetCollectionParents(); }

		public BasicLandAndPropertyUnitStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public BasicLandAndPropertyUnitStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public BasicLandAndPropertyUnitStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public BasicLandAndPropertyUnitStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "GridReference" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "GridReference", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new CoordinateStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new LandAndPropertyIdentifierStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Provenance" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Provenance", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ProvenanceStructure(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "bs7666:BasicLandAndPropertyUnitStructure");
		}


		#region UniquePropertyReferenceNumber accessor methods
		public static int GetUniquePropertyReferenceNumberMinCount()
		{
			return 1;
		}

		public static int UniquePropertyReferenceNumberMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUniquePropertyReferenceNumberMaxCount()
		{
			return 1;
		}

		public static int UniquePropertyReferenceNumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUniquePropertyReferenceNumberCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber");
		}

		public int UniquePropertyReferenceNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber");
			}
		}

		public bool HasUniquePropertyReferenceNumber()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber");
		}

		public UPRNtype NewUniquePropertyReferenceNumber()
		{
			return new UPRNtype();
		}

		public UPRNtype GetUniquePropertyReferenceNumberAt(int index)
		{
			return new UPRNtype(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", index)));
		}

		public XmlNode GetStartingUniquePropertyReferenceNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber" );
		}

		public XmlNode GetAdvancedUniquePropertyReferenceNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", curNode );
		}

		public UPRNtype GetUniquePropertyReferenceNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new UPRNtype( curNode.InnerText );
		}


		public UPRNtype GetUniquePropertyReferenceNumber()
		{
			return GetUniquePropertyReferenceNumberAt(0);
		}

		public UPRNtype UniquePropertyReferenceNumber
		{
			get
			{
				return GetUniquePropertyReferenceNumberAt(0);
			}
		}

		public void RemoveUniquePropertyReferenceNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", index);
		}

		public void RemoveUniquePropertyReferenceNumber()
		{
			RemoveUniquePropertyReferenceNumberAt(0);
		}

		public XmlNode AddUniquePropertyReferenceNumber(UPRNtype newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", newValue.ToString());
			return null;
		}

		public void InsertUniquePropertyReferenceNumberAt(UPRNtype newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", index, newValue.ToString());
		}

		public void ReplaceUniquePropertyReferenceNumberAt(UPRNtype newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", index, newValue.ToString());
		}
		#endregion // UniquePropertyReferenceNumber accessor methods

		#region UniquePropertyReferenceNumber collection
        public UniquePropertyReferenceNumberCollection	MyUniquePropertyReferenceNumbers = new UniquePropertyReferenceNumberCollection( );

        public class UniquePropertyReferenceNumberCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public UniquePropertyReferenceNumberEnumerator GetEnumerator() 
			{
				return new UniquePropertyReferenceNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UniquePropertyReferenceNumberEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public UniquePropertyReferenceNumberEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UniquePropertyReferenceNumberCount );
			}
			public UPRNtype  Current 
			{
				get 
				{
					return(parent.GetUniquePropertyReferenceNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UniquePropertyReferenceNumber collection

		#region CustodianCode accessor methods
		public static int GetCustodianCodeMinCount()
		{
			return 1;
		}

		public static int CustodianCodeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCustodianCodeMaxCount()
		{
			return 1;
		}

		public static int CustodianCodeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCustodianCodeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode");
		}

		public int CustodianCodeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode");
			}
		}

		public bool HasCustodianCode()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode");
		}

		public CustodianCodeType NewCustodianCode()
		{
			return new CustodianCodeType();
		}

		public CustodianCodeType GetCustodianCodeAt(int index)
		{
			return new CustodianCodeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode", index)));
		}

		public XmlNode GetStartingCustodianCodeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode" );
		}

		public XmlNode GetAdvancedCustodianCodeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode", curNode );
		}

		public CustodianCodeType GetCustodianCodeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CustodianCodeType( curNode.InnerText );
		}


		public CustodianCodeType GetCustodianCode()
		{
			return GetCustodianCodeAt(0);
		}

		public CustodianCodeType CustodianCode
		{
			get
			{
				return GetCustodianCodeAt(0);
			}
		}

		public void RemoveCustodianCodeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode", index);
		}

		public void RemoveCustodianCode()
		{
			RemoveCustodianCodeAt(0);
		}

		public XmlNode AddCustodianCode(CustodianCodeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode", newValue.ToString());
			return null;
		}

		public void InsertCustodianCodeAt(CustodianCodeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode", index, newValue.ToString());
		}

		public void ReplaceCustodianCodeAt(CustodianCodeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "CustodianCode", index, newValue.ToString());
		}
		#endregion // CustodianCode accessor methods

		#region CustodianCode collection
        public CustodianCodeCollection	MyCustodianCodes = new CustodianCodeCollection( );

        public class CustodianCodeCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public CustodianCodeEnumerator GetEnumerator() 
			{
				return new CustodianCodeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CustodianCodeEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public CustodianCodeEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CustodianCodeCount );
			}
			public CustodianCodeType  Current 
			{
				get 
				{
					return(parent.GetCustodianCodeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CustodianCode collection

		#region RepresentativePointCode accessor methods
		public static int GetRepresentativePointCodeMinCount()
		{
			return 1;
		}

		public static int RepresentativePointCodeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetRepresentativePointCodeMaxCount()
		{
			return 1;
		}

		public static int RepresentativePointCodeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRepresentativePointCodeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode");
		}

		public int RepresentativePointCodeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode");
			}
		}

		public bool HasRepresentativePointCode()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode");
		}

		public RepresentativePointCodeType NewRepresentativePointCode()
		{
			return new RepresentativePointCodeType();
		}

		public RepresentativePointCodeType GetRepresentativePointCodeAt(int index)
		{
			return new RepresentativePointCodeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode", index)));
		}

		public XmlNode GetStartingRepresentativePointCodeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode" );
		}

		public XmlNode GetAdvancedRepresentativePointCodeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode", curNode );
		}

		public RepresentativePointCodeType GetRepresentativePointCodeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new RepresentativePointCodeType( curNode.InnerText );
		}


		public RepresentativePointCodeType GetRepresentativePointCode()
		{
			return GetRepresentativePointCodeAt(0);
		}

		public RepresentativePointCodeType RepresentativePointCode
		{
			get
			{
				return GetRepresentativePointCodeAt(0);
			}
		}

		public void RemoveRepresentativePointCodeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode", index);
		}

		public void RemoveRepresentativePointCode()
		{
			RemoveRepresentativePointCodeAt(0);
		}

		public XmlNode AddRepresentativePointCode(RepresentativePointCodeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode", newValue.ToString());
			return null;
		}

		public void InsertRepresentativePointCodeAt(RepresentativePointCodeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode", index, newValue.ToString());
		}

		public void ReplaceRepresentativePointCodeAt(RepresentativePointCodeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "RepresentativePointCode", index, newValue.ToString());
		}
		#endregion // RepresentativePointCode accessor methods

		#region RepresentativePointCode collection
        public RepresentativePointCodeCollection	MyRepresentativePointCodes = new RepresentativePointCodeCollection( );

        public class RepresentativePointCodeCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public RepresentativePointCodeEnumerator GetEnumerator() 
			{
				return new RepresentativePointCodeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RepresentativePointCodeEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public RepresentativePointCodeEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RepresentativePointCodeCount );
			}
			public RepresentativePointCodeType  Current 
			{
				get 
				{
					return(parent.GetRepresentativePointCodeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // RepresentativePointCode collection

		#region LogicalStatus accessor methods
		public static int GetLogicalStatusMinCount()
		{
			return 1;
		}

		public static int LogicalStatusMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLogicalStatusMaxCount()
		{
			return 1;
		}

		public static int LogicalStatusMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLogicalStatusCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus");
		}

		public int LogicalStatusCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus");
			}
		}

		public bool HasLogicalStatus()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus");
		}

		public LogicalStatusType NewLogicalStatus()
		{
			return new LogicalStatusType();
		}

		public LogicalStatusType GetLogicalStatusAt(int index)
		{
			return new LogicalStatusType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", index)));
		}

		public XmlNode GetStartingLogicalStatusCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus" );
		}

		public XmlNode GetAdvancedLogicalStatusCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", curNode );
		}

		public LogicalStatusType GetLogicalStatusValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new LogicalStatusType( curNode.InnerText );
		}


		public LogicalStatusType GetLogicalStatus()
		{
			return GetLogicalStatusAt(0);
		}

		public LogicalStatusType LogicalStatus
		{
			get
			{
				return GetLogicalStatusAt(0);
			}
		}

		public void RemoveLogicalStatusAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", index);
		}

		public void RemoveLogicalStatus()
		{
			RemoveLogicalStatusAt(0);
		}

		public XmlNode AddLogicalStatus(LogicalStatusType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", newValue.ToString());
			return null;
		}

		public void InsertLogicalStatusAt(LogicalStatusType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", index, newValue.ToString());
		}

		public void ReplaceLogicalStatusAt(LogicalStatusType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", index, newValue.ToString());
		}
		#endregion // LogicalStatus accessor methods

		#region LogicalStatus collection
        public LogicalStatusCollection	MyLogicalStatuss = new LogicalStatusCollection( );

        public class LogicalStatusCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LogicalStatusEnumerator GetEnumerator() 
			{
				return new LogicalStatusEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LogicalStatusEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public LogicalStatusEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LogicalStatusCount );
			}
			public LogicalStatusType  Current 
			{
				get 
				{
					return(parent.GetLogicalStatusAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LogicalStatus collection

		#region GridReference accessor methods
		public static int GetGridReferenceMinCount()
		{
			return 1;
		}

		public static int GridReferenceMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetGridReferenceMaxCount()
		{
			return 1;
		}

		public static int GridReferenceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGridReferenceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "GridReference");
		}

		public int GridReferenceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "GridReference");
			}
		}

		public bool HasGridReference()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "GridReference");
		}

		public CoordinateStructure NewGridReference()
		{
			return new CoordinateStructure(domNode.OwnerDocument.CreateElement("GridReference", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public CoordinateStructure GetGridReferenceAt(int index)
		{
			return new CoordinateStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "GridReference", index));
		}

		public XmlNode GetStartingGridReferenceCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "GridReference" );
		}

		public XmlNode GetAdvancedGridReferenceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "GridReference", curNode );
		}

		public CoordinateStructure GetGridReferenceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CoordinateStructure( curNode );
		}


		public CoordinateStructure GetGridReference()
		{
			return GetGridReferenceAt(0);
		}

		public CoordinateStructure GridReference
		{
			get
			{
				return GetGridReferenceAt(0);
			}
		}

		public void RemoveGridReferenceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "GridReference", index);
		}

		public void RemoveGridReference()
		{
			RemoveGridReferenceAt(0);
		}

		public XmlNode AddGridReference(CoordinateStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "GridReference", newValue);
		}

		public void InsertGridReferenceAt(CoordinateStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "GridReference", index, newValue);
		}

		public void ReplaceGridReferenceAt(CoordinateStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "GridReference", index, newValue);
		}
		#endregion // GridReference accessor methods

		#region GridReference collection
        public GridReferenceCollection	MyGridReferences = new GridReferenceCollection( );

        public class GridReferenceCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public GridReferenceEnumerator GetEnumerator() 
			{
				return new GridReferenceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GridReferenceEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public GridReferenceEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GridReferenceCount );
			}
			public CoordinateStructure  Current 
			{
				get 
				{
					return(parent.GetGridReferenceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GridReference collection

		#region BLPUentryDate accessor methods
		public static int GetBLPUentryDateMinCount()
		{
			return 1;
		}

		public static int BLPUentryDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetBLPUentryDateMaxCount()
		{
			return 1;
		}

		public static int BLPUentryDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBLPUentryDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate");
		}

		public int BLPUentryDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate");
			}
		}

		public bool HasBLPUentryDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate");
		}

		public SchemaDate NewBLPUentryDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetBLPUentryDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate", index)));
		}

		public XmlNode GetStartingBLPUentryDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate" );
		}

		public XmlNode GetAdvancedBLPUentryDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate", curNode );
		}

		public SchemaDate GetBLPUentryDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetBLPUentryDate()
		{
			return GetBLPUentryDateAt(0);
		}

		public SchemaDate BLPUentryDate
		{
			get
			{
				return GetBLPUentryDateAt(0);
			}
		}

		public void RemoveBLPUentryDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate", index);
		}

		public void RemoveBLPUentryDate()
		{
			RemoveBLPUentryDateAt(0);
		}

		public XmlNode AddBLPUentryDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate", newValue.ToString());
			return null;
		}

		public void InsertBLPUentryDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate", index, newValue.ToString());
		}

		public void ReplaceBLPUentryDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUentryDate", index, newValue.ToString());
		}
		#endregion // BLPUentryDate accessor methods

		#region BLPUentryDate collection
        public BLPUentryDateCollection	MyBLPUentryDates = new BLPUentryDateCollection( );

        public class BLPUentryDateCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public BLPUentryDateEnumerator GetEnumerator() 
			{
				return new BLPUentryDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class BLPUentryDateEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public BLPUentryDateEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.BLPUentryDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetBLPUentryDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // BLPUentryDate collection

		#region BLPUstartDate accessor methods
		public static int GetBLPUstartDateMinCount()
		{
			return 1;
		}

		public static int BLPUstartDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetBLPUstartDateMaxCount()
		{
			return 1;
		}

		public static int BLPUstartDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBLPUstartDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate");
		}

		public int BLPUstartDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate");
			}
		}

		public bool HasBLPUstartDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate");
		}

		public SchemaDate NewBLPUstartDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetBLPUstartDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate", index)));
		}

		public XmlNode GetStartingBLPUstartDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate" );
		}

		public XmlNode GetAdvancedBLPUstartDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate", curNode );
		}

		public SchemaDate GetBLPUstartDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetBLPUstartDate()
		{
			return GetBLPUstartDateAt(0);
		}

		public SchemaDate BLPUstartDate
		{
			get
			{
				return GetBLPUstartDateAt(0);
			}
		}

		public void RemoveBLPUstartDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate", index);
		}

		public void RemoveBLPUstartDate()
		{
			RemoveBLPUstartDateAt(0);
		}

		public XmlNode AddBLPUstartDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate", newValue.ToString());
			return null;
		}

		public void InsertBLPUstartDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate", index, newValue.ToString());
		}

		public void ReplaceBLPUstartDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUstartDate", index, newValue.ToString());
		}
		#endregion // BLPUstartDate accessor methods

		#region BLPUstartDate collection
        public BLPUstartDateCollection	MyBLPUstartDates = new BLPUstartDateCollection( );

        public class BLPUstartDateCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public BLPUstartDateEnumerator GetEnumerator() 
			{
				return new BLPUstartDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class BLPUstartDateEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public BLPUstartDateEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.BLPUstartDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetBLPUstartDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // BLPUstartDate collection

		#region BLPUendDate accessor methods
		public static int GetBLPUendDateMinCount()
		{
			return 0;
		}

		public static int BLPUendDateMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetBLPUendDateMaxCount()
		{
			return 1;
		}

		public static int BLPUendDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBLPUendDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate");
		}

		public int BLPUendDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate");
			}
		}

		public bool HasBLPUendDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate");
		}

		public SchemaDate NewBLPUendDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetBLPUendDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate", index)));
		}

		public XmlNode GetStartingBLPUendDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate" );
		}

		public XmlNode GetAdvancedBLPUendDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate", curNode );
		}

		public SchemaDate GetBLPUendDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetBLPUendDate()
		{
			return GetBLPUendDateAt(0);
		}

		public SchemaDate BLPUendDate
		{
			get
			{
				return GetBLPUendDateAt(0);
			}
		}

		public void RemoveBLPUendDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate", index);
		}

		public void RemoveBLPUendDate()
		{
			RemoveBLPUendDateAt(0);
		}

		public XmlNode AddBLPUendDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate", newValue.ToString());
			return null;
		}

		public void InsertBLPUendDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate", index, newValue.ToString());
		}

		public void ReplaceBLPUendDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUendDate", index, newValue.ToString());
		}
		#endregion // BLPUendDate accessor methods

		#region BLPUendDate collection
        public BLPUendDateCollection	MyBLPUendDates = new BLPUendDateCollection( );

        public class BLPUendDateCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public BLPUendDateEnumerator GetEnumerator() 
			{
				return new BLPUendDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class BLPUendDateEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public BLPUendDateEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.BLPUendDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetBLPUendDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // BLPUendDate collection

		#region BLPUlastUpdateDate accessor methods
		public static int GetBLPUlastUpdateDateMinCount()
		{
			return 1;
		}

		public static int BLPUlastUpdateDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetBLPUlastUpdateDateMaxCount()
		{
			return 1;
		}

		public static int BLPUlastUpdateDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBLPUlastUpdateDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate");
		}

		public int BLPUlastUpdateDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate");
			}
		}

		public bool HasBLPUlastUpdateDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate");
		}

		public SchemaDate NewBLPUlastUpdateDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetBLPUlastUpdateDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate", index)));
		}

		public XmlNode GetStartingBLPUlastUpdateDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate" );
		}

		public XmlNode GetAdvancedBLPUlastUpdateDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate", curNode );
		}

		public SchemaDate GetBLPUlastUpdateDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetBLPUlastUpdateDate()
		{
			return GetBLPUlastUpdateDateAt(0);
		}

		public SchemaDate BLPUlastUpdateDate
		{
			get
			{
				return GetBLPUlastUpdateDateAt(0);
			}
		}

		public void RemoveBLPUlastUpdateDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate", index);
		}

		public void RemoveBLPUlastUpdateDate()
		{
			RemoveBLPUlastUpdateDateAt(0);
		}

		public XmlNode AddBLPUlastUpdateDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate", newValue.ToString());
			return null;
		}

		public void InsertBLPUlastUpdateDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate", index, newValue.ToString());
		}

		public void ReplaceBLPUlastUpdateDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "BLPUlastUpdateDate", index, newValue.ToString());
		}
		#endregion // BLPUlastUpdateDate accessor methods

		#region BLPUlastUpdateDate collection
        public BLPUlastUpdateDateCollection	MyBLPUlastUpdateDates = new BLPUlastUpdateDateCollection( );

        public class BLPUlastUpdateDateCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public BLPUlastUpdateDateEnumerator GetEnumerator() 
			{
				return new BLPUlastUpdateDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class BLPUlastUpdateDateEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public BLPUlastUpdateDateEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.BLPUlastUpdateDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetBLPUlastUpdateDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // BLPUlastUpdateDate collection

		#region LandAndPropertyIdentifier accessor methods
		public static int GetLandAndPropertyIdentifierMinCount()
		{
			return 1;
		}

		public static int LandAndPropertyIdentifierMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLandAndPropertyIdentifierMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int LandAndPropertyIdentifierMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetLandAndPropertyIdentifierCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier");
		}

		public int LandAndPropertyIdentifierCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier");
			}
		}

		public bool HasLandAndPropertyIdentifier()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier");
		}

		public LandAndPropertyIdentifierStructure NewLandAndPropertyIdentifier()
		{
			return new LandAndPropertyIdentifierStructure(domNode.OwnerDocument.CreateElement("LandAndPropertyIdentifier", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public LandAndPropertyIdentifierStructure GetLandAndPropertyIdentifierAt(int index)
		{
			return new LandAndPropertyIdentifierStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier", index));
		}

		public XmlNode GetStartingLandAndPropertyIdentifierCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier" );
		}

		public XmlNode GetAdvancedLandAndPropertyIdentifierCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier", curNode );
		}

		public LandAndPropertyIdentifierStructure GetLandAndPropertyIdentifierValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new LandAndPropertyIdentifierStructure( curNode );
		}


		public LandAndPropertyIdentifierStructure GetLandAndPropertyIdentifier()
		{
			return GetLandAndPropertyIdentifierAt(0);
		}

		public LandAndPropertyIdentifierStructure LandAndPropertyIdentifier
		{
			get
			{
				return GetLandAndPropertyIdentifierAt(0);
			}
		}

		public void RemoveLandAndPropertyIdentifierAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier", index);
		}

		public void RemoveLandAndPropertyIdentifier()
		{
			while (HasLandAndPropertyIdentifier())
				RemoveLandAndPropertyIdentifierAt(0);
		}

		public XmlNode AddLandAndPropertyIdentifier(LandAndPropertyIdentifierStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier", newValue);
		}

		public void InsertLandAndPropertyIdentifierAt(LandAndPropertyIdentifierStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier", index, newValue);
		}

		public void ReplaceLandAndPropertyIdentifierAt(LandAndPropertyIdentifierStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "LandAndPropertyIdentifier", index, newValue);
		}
		#endregion // LandAndPropertyIdentifier accessor methods

		#region LandAndPropertyIdentifier collection
        public LandAndPropertyIdentifierCollection	MyLandAndPropertyIdentifiers = new LandAndPropertyIdentifierCollection( );

        public class LandAndPropertyIdentifierCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LandAndPropertyIdentifierEnumerator GetEnumerator() 
			{
				return new LandAndPropertyIdentifierEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LandAndPropertyIdentifierEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public LandAndPropertyIdentifierEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LandAndPropertyIdentifierCount );
			}
			public LandAndPropertyIdentifierStructure  Current 
			{
				get 
				{
					return(parent.GetLandAndPropertyIdentifierAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LandAndPropertyIdentifier collection

		#region Provenance accessor methods
		public static int GetProvenanceMinCount()
		{
			return 1;
		}

		public static int ProvenanceMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetProvenanceMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int ProvenanceMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetProvenanceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Provenance");
		}

		public int ProvenanceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Provenance");
			}
		}

		public bool HasProvenance()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Provenance");
		}

		public ProvenanceStructure NewProvenance()
		{
			return new ProvenanceStructure(domNode.OwnerDocument.CreateElement("Provenance", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public ProvenanceStructure GetProvenanceAt(int index)
		{
			return new ProvenanceStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Provenance", index));
		}

		public XmlNode GetStartingProvenanceCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Provenance" );
		}

		public XmlNode GetAdvancedProvenanceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Provenance", curNode );
		}

		public ProvenanceStructure GetProvenanceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ProvenanceStructure( curNode );
		}


		public ProvenanceStructure GetProvenance()
		{
			return GetProvenanceAt(0);
		}

		public ProvenanceStructure Provenance
		{
			get
			{
				return GetProvenanceAt(0);
			}
		}

		public void RemoveProvenanceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Provenance", index);
		}

		public void RemoveProvenance()
		{
			while (HasProvenance())
				RemoveProvenanceAt(0);
		}

		public XmlNode AddProvenance(ProvenanceStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "Provenance", newValue);
		}

		public void InsertProvenanceAt(ProvenanceStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "Provenance", index, newValue);
		}

		public void ReplaceProvenanceAt(ProvenanceStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "Provenance", index, newValue);
		}
		#endregion // Provenance accessor methods

		#region Provenance collection
        public ProvenanceCollection	MyProvenances = new ProvenanceCollection( );

        public class ProvenanceCollection: IEnumerable
        {
            BasicLandAndPropertyUnitStructure parent;
            public BasicLandAndPropertyUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public ProvenanceEnumerator GetEnumerator() 
			{
				return new ProvenanceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ProvenanceEnumerator: IEnumerator 
        {
			int nIndex;
			BasicLandAndPropertyUnitStructure parent;
			public ProvenanceEnumerator(BasicLandAndPropertyUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ProvenanceCount );
			}
			public ProvenanceStructure  Current 
			{
				get 
				{
					return(parent.GetProvenanceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Provenance collection

        private void SetCollectionParents()
        {
            MyUniquePropertyReferenceNumbers.Parent = this; 
            MyCustodianCodes.Parent = this; 
            MyRepresentativePointCodes.Parent = this; 
            MyLogicalStatuss.Parent = this; 
            MyGridReferences.Parent = this; 
            MyBLPUentryDates.Parent = this; 
            MyBLPUstartDates.Parent = this; 
            MyBLPUendDates.Parent = this; 
            MyBLPUlastUpdateDates.Parent = this; 
            MyLandAndPropertyIdentifiers.Parent = this; 
            MyProvenances.Parent = this; 
	}
}
}
