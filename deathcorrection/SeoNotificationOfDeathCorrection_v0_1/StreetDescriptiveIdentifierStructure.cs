//
// StreetDescriptiveIdentifierStructure.cs
//
// This file was generated by XMLSpy 2012r2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoNotificationOfDeathCorrection_v0_1.bs76662
{
	public class StreetDescriptiveIdentifierStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public StreetDescriptiveIdentifierStructure() : base() { SetCollectionParents(); }

		public StreetDescriptiveIdentifierStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public StreetDescriptiveIdentifierStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public StreetDescriptiveIdentifierStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public StreetDescriptiveIdentifierStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "bs7666:StreetDescriptiveIdentifierStructure");
		}


		#region StreetDescription accessor methods
		public static int GetStreetDescriptionMinCount()
		{
			return 1;
		}

		public static int StreetDescriptionMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStreetDescriptionMaxCount()
		{
			return 1;
		}

		public static int StreetDescriptionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStreetDescriptionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription");
		}

		public int StreetDescriptionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription");
			}
		}

		public bool HasStreetDescription()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription");
		}

		public StreetDescriptorType NewStreetDescription()
		{
			return new StreetDescriptorType();
		}

		public StreetDescriptorType GetStreetDescriptionAt(int index)
		{
			return new StreetDescriptorType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", index)));
		}

		public XmlNode GetStartingStreetDescriptionCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription" );
		}

		public XmlNode GetAdvancedStreetDescriptionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", curNode );
		}

		public StreetDescriptorType GetStreetDescriptionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StreetDescriptorType( curNode.InnerText );
		}


		public StreetDescriptorType GetStreetDescription()
		{
			return GetStreetDescriptionAt(0);
		}

		public StreetDescriptorType StreetDescription
		{
			get
			{
				return GetStreetDescriptionAt(0);
			}
		}

		public void RemoveStreetDescriptionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", index);
		}

		public void RemoveStreetDescription()
		{
			RemoveStreetDescriptionAt(0);
		}

		public XmlNode AddStreetDescription(StreetDescriptorType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", newValue.ToString());
			return null;
		}

		public void InsertStreetDescriptionAt(StreetDescriptorType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", index, newValue.ToString());
		}

		public void ReplaceStreetDescriptionAt(StreetDescriptorType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", index, newValue.ToString());
		}
		#endregion // StreetDescription accessor methods

		#region StreetDescription collection
        public StreetDescriptionCollection	MyStreetDescriptions = new StreetDescriptionCollection( );

        public class StreetDescriptionCollection: IEnumerable
        {
            StreetDescriptiveIdentifierStructure parent;
            public StreetDescriptiveIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StreetDescriptionEnumerator GetEnumerator() 
			{
				return new StreetDescriptionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StreetDescriptionEnumerator: IEnumerator 
        {
			int nIndex;
			StreetDescriptiveIdentifierStructure parent;
			public StreetDescriptionEnumerator(StreetDescriptiveIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StreetDescriptionCount );
			}
			public StreetDescriptorType  Current 
			{
				get 
				{
					return(parent.GetStreetDescriptionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StreetDescription collection

		#region Locality accessor methods
		public static int GetLocalityMinCount()
		{
			return 1;
		}

		public static int LocalityMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLocalityMaxCount()
		{
			return 1;
		}

		public static int LocalityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLocalityCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality");
		}

		public int LocalityCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality");
			}
		}

		public bool HasLocality()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality");
		}

		public LocalityType NewLocality()
		{
			return new LocalityType();
		}

		public LocalityType GetLocalityAt(int index)
		{
			return new LocalityType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", index)));
		}

		public XmlNode GetStartingLocalityCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality" );
		}

		public XmlNode GetAdvancedLocalityCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", curNode );
		}

		public LocalityType GetLocalityValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new LocalityType( curNode.InnerText );
		}


		public LocalityType GetLocality()
		{
			return GetLocalityAt(0);
		}

		public LocalityType Locality
		{
			get
			{
				return GetLocalityAt(0);
			}
		}

		public void RemoveLocalityAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", index);
		}

		public void RemoveLocality()
		{
			RemoveLocalityAt(0);
		}

		public XmlNode AddLocality(LocalityType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", newValue.ToString());
			return null;
		}

		public void InsertLocalityAt(LocalityType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", index, newValue.ToString());
		}

		public void ReplaceLocalityAt(LocalityType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", index, newValue.ToString());
		}
		#endregion // Locality accessor methods

		#region Locality collection
        public LocalityCollection	MyLocalitys = new LocalityCollection( );

        public class LocalityCollection: IEnumerable
        {
            StreetDescriptiveIdentifierStructure parent;
            public StreetDescriptiveIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LocalityEnumerator GetEnumerator() 
			{
				return new LocalityEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LocalityEnumerator: IEnumerator 
        {
			int nIndex;
			StreetDescriptiveIdentifierStructure parent;
			public LocalityEnumerator(StreetDescriptiveIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LocalityCount );
			}
			public LocalityType  Current 
			{
				get 
				{
					return(parent.GetLocalityAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Locality collection

		#region Town accessor methods
		public static int GetTownMinCount()
		{
			return 1;
		}

		public static int TownMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetTownMaxCount()
		{
			return 1;
		}

		public static int TownMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTownCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town");
		}

		public int TownCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town");
			}
		}

		public bool HasTown()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town");
		}

		public TownType NewTown()
		{
			return new TownType();
		}

		public TownType GetTownAt(int index)
		{
			return new TownType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", index)));
		}

		public XmlNode GetStartingTownCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town" );
		}

		public XmlNode GetAdvancedTownCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", curNode );
		}

		public TownType GetTownValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new TownType( curNode.InnerText );
		}


		public TownType GetTown()
		{
			return GetTownAt(0);
		}

		public TownType Town
		{
			get
			{
				return GetTownAt(0);
			}
		}

		public void RemoveTownAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", index);
		}

		public void RemoveTown()
		{
			RemoveTownAt(0);
		}

		public XmlNode AddTown(TownType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", newValue.ToString());
			return null;
		}

		public void InsertTownAt(TownType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", index, newValue.ToString());
		}

		public void ReplaceTownAt(TownType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", index, newValue.ToString());
		}
		#endregion // Town accessor methods

		#region Town collection
        public TownCollection	MyTowns = new TownCollection( );

        public class TownCollection: IEnumerable
        {
            StreetDescriptiveIdentifierStructure parent;
            public StreetDescriptiveIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public TownEnumerator GetEnumerator() 
			{
				return new TownEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TownEnumerator: IEnumerator 
        {
			int nIndex;
			StreetDescriptiveIdentifierStructure parent;
			public TownEnumerator(StreetDescriptiveIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TownCount );
			}
			public TownType  Current 
			{
				get 
				{
					return(parent.GetTownAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Town collection

		#region AdministrativeArea accessor methods
		public static int GetAdministrativeAreaMinCount()
		{
			return 0;
		}

		public static int AdministrativeAreaMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetAdministrativeAreaMaxCount()
		{
			return 1;
		}

		public static int AdministrativeAreaMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAdministrativeAreaCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea");
		}

		public int AdministrativeAreaCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea");
			}
		}

		public bool HasAdministrativeArea()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea");
		}

		public AdministrativeAreaType NewAdministrativeArea()
		{
			return new AdministrativeAreaType();
		}

		public AdministrativeAreaType GetAdministrativeAreaAt(int index)
		{
			return new AdministrativeAreaType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", index)));
		}

		public XmlNode GetStartingAdministrativeAreaCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea" );
		}

		public XmlNode GetAdvancedAdministrativeAreaCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", curNode );
		}

		public AdministrativeAreaType GetAdministrativeAreaValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AdministrativeAreaType( curNode.InnerText );
		}


		public AdministrativeAreaType GetAdministrativeArea()
		{
			return GetAdministrativeAreaAt(0);
		}

		public AdministrativeAreaType AdministrativeArea
		{
			get
			{
				return GetAdministrativeAreaAt(0);
			}
		}

		public void RemoveAdministrativeAreaAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", index);
		}

		public void RemoveAdministrativeArea()
		{
			RemoveAdministrativeAreaAt(0);
		}

		public XmlNode AddAdministrativeArea(AdministrativeAreaType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", newValue.ToString());
			return null;
		}

		public void InsertAdministrativeAreaAt(AdministrativeAreaType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", index, newValue.ToString());
		}

		public void ReplaceAdministrativeAreaAt(AdministrativeAreaType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", index, newValue.ToString());
		}
		#endregion // AdministrativeArea accessor methods

		#region AdministrativeArea collection
        public AdministrativeAreaCollection	MyAdministrativeAreas = new AdministrativeAreaCollection( );

        public class AdministrativeAreaCollection: IEnumerable
        {
            StreetDescriptiveIdentifierStructure parent;
            public StreetDescriptiveIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public AdministrativeAreaEnumerator GetEnumerator() 
			{
				return new AdministrativeAreaEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AdministrativeAreaEnumerator: IEnumerator 
        {
			int nIndex;
			StreetDescriptiveIdentifierStructure parent;
			public AdministrativeAreaEnumerator(StreetDescriptiveIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AdministrativeAreaCount );
			}
			public AdministrativeAreaType  Current 
			{
				get 
				{
					return(parent.GetAdministrativeAreaAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // AdministrativeArea collection

        private void SetCollectionParents()
        {
            MyStreetDescriptions.Parent = this; 
            MyLocalitys.Parent = this; 
            MyTowns.Parent = this; 
            MyAdministrativeAreas.Parent = this; 
	}
}
}
