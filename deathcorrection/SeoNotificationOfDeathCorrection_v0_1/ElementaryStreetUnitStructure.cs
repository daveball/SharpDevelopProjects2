//
// ElementaryStreetUnitStructure.cs
//
// This file was generated by XMLSpy 2012r2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoNotificationOfDeathCorrection_v0_1.bs76662
{
	public class ElementaryStreetUnitStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public ElementaryStreetUnitStructure() : base() { SetCollectionParents(); }

		public ElementaryStreetUnitStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ElementaryStreetUnitStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public ElementaryStreetUnitStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ElementaryStreetUnitStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new CoordinateStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new CoordinateStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new CoordinateStructure(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "bs7666:ElementaryStreetUnitStructure");
		}


		#region ESUidentity accessor methods
		public static int GetESUidentityMinCount()
		{
			return 1;
		}

		public static int ESUidentityMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetESUidentityMaxCount()
		{
			return 1;
		}

		public static int ESUidentityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetESUidentityCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity");
		}

		public int ESUidentityCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity");
			}
		}

		public bool HasESUidentity()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity");
		}

		public RefPointGridCoordinateType NewESUidentity()
		{
			return new RefPointGridCoordinateType();
		}

		public RefPointGridCoordinateType GetESUidentityAt(int index)
		{
			return new RefPointGridCoordinateType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity", index)));
		}

		public XmlNode GetStartingESUidentityCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity" );
		}

		public XmlNode GetAdvancedESUidentityCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity", curNode );
		}

		public RefPointGridCoordinateType GetESUidentityValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new RefPointGridCoordinateType( curNode.InnerText );
		}


		public RefPointGridCoordinateType GetESUidentity()
		{
			return GetESUidentityAt(0);
		}

		public RefPointGridCoordinateType ESUidentity
		{
			get
			{
				return GetESUidentityAt(0);
			}
		}

		public void RemoveESUidentityAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity", index);
		}

		public void RemoveESUidentity()
		{
			RemoveESUidentityAt(0);
		}

		public XmlNode AddESUidentity(RefPointGridCoordinateType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity", newValue.ToString());
			return null;
		}

		public void InsertESUidentityAt(RefPointGridCoordinateType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity", index, newValue.ToString());
		}

		public void ReplaceESUidentityAt(RefPointGridCoordinateType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUidentity", index, newValue.ToString());
		}
		#endregion // ESUidentity accessor methods

		#region ESUidentity collection
        public ESUidentityCollection	MyESUidentitys = new ESUidentityCollection( );

        public class ESUidentityCollection: IEnumerable
        {
            ElementaryStreetUnitStructure parent;
            public ElementaryStreetUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public ESUidentityEnumerator GetEnumerator() 
			{
				return new ESUidentityEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ESUidentityEnumerator: IEnumerator 
        {
			int nIndex;
			ElementaryStreetUnitStructure parent;
			public ESUidentityEnumerator(ElementaryStreetUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ESUidentityCount );
			}
			public RefPointGridCoordinateType  Current 
			{
				get 
				{
					return(parent.GetESUidentityAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ESUidentity collection

		#region ESUversion accessor methods
		public static int GetESUversionMinCount()
		{
			return 1;
		}

		public static int ESUversionMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetESUversionMaxCount()
		{
			return 1;
		}

		public static int ESUversionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetESUversionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion");
		}

		public int ESUversionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion");
			}
		}

		public bool HasESUversion()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion");
		}

		public VersionNumberType NewESUversion()
		{
			return new VersionNumberType();
		}

		public VersionNumberType GetESUversionAt(int index)
		{
			return new VersionNumberType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion", index)));
		}

		public XmlNode GetStartingESUversionCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion" );
		}

		public XmlNode GetAdvancedESUversionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion", curNode );
		}

		public VersionNumberType GetESUversionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new VersionNumberType( curNode.InnerText );
		}


		public VersionNumberType GetESUversion()
		{
			return GetESUversionAt(0);
		}

		public VersionNumberType ESUversion
		{
			get
			{
				return GetESUversionAt(0);
			}
		}

		public void RemoveESUversionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion", index);
		}

		public void RemoveESUversion()
		{
			RemoveESUversionAt(0);
		}

		public XmlNode AddESUversion(VersionNumberType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion", newValue.ToString());
			return null;
		}

		public void InsertESUversionAt(VersionNumberType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion", index, newValue.ToString());
		}

		public void ReplaceESUversionAt(VersionNumberType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUversion", index, newValue.ToString());
		}
		#endregion // ESUversion accessor methods

		#region ESUversion collection
        public ESUversionCollection	MyESUversions = new ESUversionCollection( );

        public class ESUversionCollection: IEnumerable
        {
            ElementaryStreetUnitStructure parent;
            public ElementaryStreetUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public ESUversionEnumerator GetEnumerator() 
			{
				return new ESUversionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ESUversionEnumerator: IEnumerator 
        {
			int nIndex;
			ElementaryStreetUnitStructure parent;
			public ESUversionEnumerator(ElementaryStreetUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ESUversionCount );
			}
			public VersionNumberType  Current 
			{
				get 
				{
					return(parent.GetESUversionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ESUversion collection

		#region ESUentryDate accessor methods
		public static int GetESUentryDateMinCount()
		{
			return 1;
		}

		public static int ESUentryDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetESUentryDateMaxCount()
		{
			return 1;
		}

		public static int ESUentryDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetESUentryDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate");
		}

		public int ESUentryDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate");
			}
		}

		public bool HasESUentryDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate");
		}

		public SchemaDate NewESUentryDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetESUentryDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate", index)));
		}

		public XmlNode GetStartingESUentryDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate" );
		}

		public XmlNode GetAdvancedESUentryDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate", curNode );
		}

		public SchemaDate GetESUentryDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetESUentryDate()
		{
			return GetESUentryDateAt(0);
		}

		public SchemaDate ESUentryDate
		{
			get
			{
				return GetESUentryDateAt(0);
			}
		}

		public void RemoveESUentryDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate", index);
		}

		public void RemoveESUentryDate()
		{
			RemoveESUentryDateAt(0);
		}

		public XmlNode AddESUentryDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate", newValue.ToString());
			return null;
		}

		public void InsertESUentryDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate", index, newValue.ToString());
		}

		public void ReplaceESUentryDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUentryDate", index, newValue.ToString());
		}
		#endregion // ESUentryDate accessor methods

		#region ESUentryDate collection
        public ESUentryDateCollection	MyESUentryDates = new ESUentryDateCollection( );

        public class ESUentryDateCollection: IEnumerable
        {
            ElementaryStreetUnitStructure parent;
            public ElementaryStreetUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public ESUentryDateEnumerator GetEnumerator() 
			{
				return new ESUentryDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ESUentryDateEnumerator: IEnumerator 
        {
			int nIndex;
			ElementaryStreetUnitStructure parent;
			public ESUentryDateEnumerator(ElementaryStreetUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ESUentryDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetESUentryDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ESUentryDate collection

		#region ESUclosureDate accessor methods
		public static int GetESUclosureDateMinCount()
		{
			return 0;
		}

		public static int ESUclosureDateMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetESUclosureDateMaxCount()
		{
			return 1;
		}

		public static int ESUclosureDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetESUclosureDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate");
		}

		public int ESUclosureDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate");
			}
		}

		public bool HasESUclosureDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate");
		}

		public SchemaDate NewESUclosureDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetESUclosureDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate", index)));
		}

		public XmlNode GetStartingESUclosureDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate" );
		}

		public XmlNode GetAdvancedESUclosureDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate", curNode );
		}

		public SchemaDate GetESUclosureDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetESUclosureDate()
		{
			return GetESUclosureDateAt(0);
		}

		public SchemaDate ESUclosureDate
		{
			get
			{
				return GetESUclosureDateAt(0);
			}
		}

		public void RemoveESUclosureDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate", index);
		}

		public void RemoveESUclosureDate()
		{
			RemoveESUclosureDateAt(0);
		}

		public XmlNode AddESUclosureDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate", newValue.ToString());
			return null;
		}

		public void InsertESUclosureDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate", index, newValue.ToString());
		}

		public void ReplaceESUclosureDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ESUclosureDate", index, newValue.ToString());
		}
		#endregion // ESUclosureDate accessor methods

		#region ESUclosureDate collection
        public ESUclosureDateCollection	MyESUclosureDates = new ESUclosureDateCollection( );

        public class ESUclosureDateCollection: IEnumerable
        {
            ElementaryStreetUnitStructure parent;
            public ElementaryStreetUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public ESUclosureDateEnumerator GetEnumerator() 
			{
				return new ESUclosureDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ESUclosureDateEnumerator: IEnumerator 
        {
			int nIndex;
			ElementaryStreetUnitStructure parent;
			public ESUclosureDateEnumerator(ElementaryStreetUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ESUclosureDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetESUclosureDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ESUclosureDate collection

		#region StartCoordinate accessor methods
		public static int GetStartCoordinateMinCount()
		{
			return 1;
		}

		public static int StartCoordinateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStartCoordinateMaxCount()
		{
			return 1;
		}

		public static int StartCoordinateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStartCoordinateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate");
		}

		public int StartCoordinateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate");
			}
		}

		public bool HasStartCoordinate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate");
		}

		public CoordinateStructure NewStartCoordinate()
		{
			return new CoordinateStructure(domNode.OwnerDocument.CreateElement("StartCoordinate", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public CoordinateStructure GetStartCoordinateAt(int index)
		{
			return new CoordinateStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", index));
		}

		public XmlNode GetStartingStartCoordinateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate" );
		}

		public XmlNode GetAdvancedStartCoordinateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", curNode );
		}

		public CoordinateStructure GetStartCoordinateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CoordinateStructure( curNode );
		}


		public CoordinateStructure GetStartCoordinate()
		{
			return GetStartCoordinateAt(0);
		}

		public CoordinateStructure StartCoordinate
		{
			get
			{
				return GetStartCoordinateAt(0);
			}
		}

		public void RemoveStartCoordinateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", index);
		}

		public void RemoveStartCoordinate()
		{
			RemoveStartCoordinateAt(0);
		}

		public XmlNode AddStartCoordinate(CoordinateStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", newValue);
		}

		public void InsertStartCoordinateAt(CoordinateStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", index, newValue);
		}

		public void ReplaceStartCoordinateAt(CoordinateStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", index, newValue);
		}
		#endregion // StartCoordinate accessor methods

		#region StartCoordinate collection
        public StartCoordinateCollection	MyStartCoordinates = new StartCoordinateCollection( );

        public class StartCoordinateCollection: IEnumerable
        {
            ElementaryStreetUnitStructure parent;
            public ElementaryStreetUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StartCoordinateEnumerator GetEnumerator() 
			{
				return new StartCoordinateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StartCoordinateEnumerator: IEnumerator 
        {
			int nIndex;
			ElementaryStreetUnitStructure parent;
			public StartCoordinateEnumerator(ElementaryStreetUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StartCoordinateCount );
			}
			public CoordinateStructure  Current 
			{
				get 
				{
					return(parent.GetStartCoordinateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StartCoordinate collection

		#region EndCoordinate accessor methods
		public static int GetEndCoordinateMinCount()
		{
			return 1;
		}

		public static int EndCoordinateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEndCoordinateMaxCount()
		{
			return 1;
		}

		public static int EndCoordinateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEndCoordinateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate");
		}

		public int EndCoordinateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate");
			}
		}

		public bool HasEndCoordinate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate");
		}

		public CoordinateStructure NewEndCoordinate()
		{
			return new CoordinateStructure(domNode.OwnerDocument.CreateElement("EndCoordinate", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public CoordinateStructure GetEndCoordinateAt(int index)
		{
			return new CoordinateStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", index));
		}

		public XmlNode GetStartingEndCoordinateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate" );
		}

		public XmlNode GetAdvancedEndCoordinateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", curNode );
		}

		public CoordinateStructure GetEndCoordinateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CoordinateStructure( curNode );
		}


		public CoordinateStructure GetEndCoordinate()
		{
			return GetEndCoordinateAt(0);
		}

		public CoordinateStructure EndCoordinate
		{
			get
			{
				return GetEndCoordinateAt(0);
			}
		}

		public void RemoveEndCoordinateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", index);
		}

		public void RemoveEndCoordinate()
		{
			RemoveEndCoordinateAt(0);
		}

		public XmlNode AddEndCoordinate(CoordinateStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", newValue);
		}

		public void InsertEndCoordinateAt(CoordinateStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", index, newValue);
		}

		public void ReplaceEndCoordinateAt(CoordinateStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", index, newValue);
		}
		#endregion // EndCoordinate accessor methods

		#region EndCoordinate collection
        public EndCoordinateCollection	MyEndCoordinates = new EndCoordinateCollection( );

        public class EndCoordinateCollection: IEnumerable
        {
            ElementaryStreetUnitStructure parent;
            public ElementaryStreetUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public EndCoordinateEnumerator GetEnumerator() 
			{
				return new EndCoordinateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EndCoordinateEnumerator: IEnumerator 
        {
			int nIndex;
			ElementaryStreetUnitStructure parent;
			public EndCoordinateEnumerator(ElementaryStreetUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EndCoordinateCount );
			}
			public CoordinateStructure  Current 
			{
				get 
				{
					return(parent.GetEndCoordinateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EndCoordinate collection

		#region Tolerance accessor methods
		public static int GetToleranceMinCount()
		{
			return 1;
		}

		public static int ToleranceMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetToleranceMaxCount()
		{
			return 1;
		}

		public static int ToleranceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetToleranceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance");
		}

		public int ToleranceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance");
			}
		}

		public bool HasTolerance()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance");
		}

		public ToleranceType NewTolerance()
		{
			return new ToleranceType();
		}

		public ToleranceType GetToleranceAt(int index)
		{
			return new ToleranceType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", index)));
		}

		public XmlNode GetStartingToleranceCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance" );
		}

		public XmlNode GetAdvancedToleranceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", curNode );
		}

		public ToleranceType GetToleranceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ToleranceType( curNode.InnerText );
		}


		public ToleranceType GetTolerance()
		{
			return GetToleranceAt(0);
		}

		public ToleranceType Tolerance
		{
			get
			{
				return GetToleranceAt(0);
			}
		}

		public void RemoveToleranceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", index);
		}

		public void RemoveTolerance()
		{
			RemoveToleranceAt(0);
		}

		public XmlNode AddTolerance(ToleranceType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", newValue.ToString());
			return null;
		}

		public void InsertToleranceAt(ToleranceType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", index, newValue.ToString());
		}

		public void ReplaceToleranceAt(ToleranceType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", index, newValue.ToString());
		}
		#endregion // Tolerance accessor methods

		#region Tolerance collection
        public ToleranceCollection	MyTolerances = new ToleranceCollection( );

        public class ToleranceCollection: IEnumerable
        {
            ElementaryStreetUnitStructure parent;
            public ElementaryStreetUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public ToleranceEnumerator GetEnumerator() 
			{
				return new ToleranceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ToleranceEnumerator: IEnumerator 
        {
			int nIndex;
			ElementaryStreetUnitStructure parent;
			public ToleranceEnumerator(ElementaryStreetUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ToleranceCount );
			}
			public ToleranceType  Current 
			{
				get 
				{
					return(parent.GetToleranceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Tolerance collection

		#region IntermediateCoord accessor methods
		public static int GetIntermediateCoordMinCount()
		{
			return 0;
		}

		public static int IntermediateCoordMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetIntermediateCoordMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int IntermediateCoordMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetIntermediateCoordCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord");
		}

		public int IntermediateCoordCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord");
			}
		}

		public bool HasIntermediateCoord()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord");
		}

		public CoordinateStructure NewIntermediateCoord()
		{
			return new CoordinateStructure(domNode.OwnerDocument.CreateElement("IntermediateCoord", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public CoordinateStructure GetIntermediateCoordAt(int index)
		{
			return new CoordinateStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord", index));
		}

		public XmlNode GetStartingIntermediateCoordCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord" );
		}

		public XmlNode GetAdvancedIntermediateCoordCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord", curNode );
		}

		public CoordinateStructure GetIntermediateCoordValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CoordinateStructure( curNode );
		}


		public CoordinateStructure GetIntermediateCoord()
		{
			return GetIntermediateCoordAt(0);
		}

		public CoordinateStructure IntermediateCoord
		{
			get
			{
				return GetIntermediateCoordAt(0);
			}
		}

		public void RemoveIntermediateCoordAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord", index);
		}

		public void RemoveIntermediateCoord()
		{
			while (HasIntermediateCoord())
				RemoveIntermediateCoordAt(0);
		}

		public XmlNode AddIntermediateCoord(CoordinateStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord", newValue);
		}

		public void InsertIntermediateCoordAt(CoordinateStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord", index, newValue);
		}

		public void ReplaceIntermediateCoordAt(CoordinateStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "IntermediateCoord", index, newValue);
		}
		#endregion // IntermediateCoord accessor methods

		#region IntermediateCoord collection
        public IntermediateCoordCollection	MyIntermediateCoords = new IntermediateCoordCollection( );

        public class IntermediateCoordCollection: IEnumerable
        {
            ElementaryStreetUnitStructure parent;
            public ElementaryStreetUnitStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public IntermediateCoordEnumerator GetEnumerator() 
			{
				return new IntermediateCoordEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IntermediateCoordEnumerator: IEnumerator 
        {
			int nIndex;
			ElementaryStreetUnitStructure parent;
			public IntermediateCoordEnumerator(ElementaryStreetUnitStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IntermediateCoordCount );
			}
			public CoordinateStructure  Current 
			{
				get 
				{
					return(parent.GetIntermediateCoordAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // IntermediateCoord collection

        private void SetCollectionParents()
        {
            MyESUidentitys.Parent = this; 
            MyESUversions.Parent = this; 
            MyESUentryDates.Parent = this; 
            MyESUclosureDates.Parent = this; 
            MyStartCoordinates.Parent = this; 
            MyEndCoordinates.Parent = this; 
            MyTolerances.Parent = this; 
            MyIntermediateCoords.Parent = this; 
	}
}
}
