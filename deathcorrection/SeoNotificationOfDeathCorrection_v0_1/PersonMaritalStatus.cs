//
// PersonMaritalStatus.cs
//
// This file was generated by XMLSpy 2012r2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoNotificationOfDeathCorrection_v0_1.PersonDescriptives2
{
	public class PersonMaritalStatus : Altova.Xml.Node
	{
		#region Forward constructors

		public PersonMaritalStatus() : base() { SetCollectionParents(); }

		public PersonMaritalStatus(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public PersonMaritalStatus(XmlNode node) : base(node) { SetCollectionParents(); }
		public PersonMaritalStatus(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public PersonMaritalStatus(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		#region Value accessor methods
		public core2.MaritalStatusType GetValue()
		{
			return new core2.MaritalStatusType(GetDomNodeValue(domNode));
		}

		public void SetValue(ISchemaType newValue)
		{
			SetDomNodeValue(domNode, newValue.ToString());
		}

		public void Assign(ISchemaType newValue)
		{
			SetValue(newValue);
		}

		public core2.MaritalStatusType Value
		{
			get
			{
				return new core2.MaritalStatusType(GetDomNodeValue(domNode));
			}
			set
			{
				SetDomNodeValue(domNode, value.ToString());
			}
		}
		#endregion // Value accessor methods

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "VerificationLevel" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "VerificationLevel", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "PersonDescriptives:PersonMaritalStatus");
		}


		#region VerificationLevel accessor methods
		public static int GetVerificationLevelMinCount()
		{
			return 0;
		}

		public static int VerificationLevelMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetVerificationLevelMaxCount()
		{
			return 1;
		}

		public static int VerificationLevelMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVerificationLevelCount()
		{
			return DomChildCount(NodeType.Attribute, "", "VerificationLevel");
		}

		public int VerificationLevelCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "VerificationLevel");
			}
		}

		public bool HasVerificationLevel()
		{
			return HasDomChild(NodeType.Attribute, "", "VerificationLevel");
		}

		public VerificationLevelType NewVerificationLevel()
		{
			return new VerificationLevelType();
		}

		public VerificationLevelType GetVerificationLevelAt(int index)
		{
			return new VerificationLevelType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "VerificationLevel", index)));
		}

		public XmlNode GetStartingVerificationLevelCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "VerificationLevel" );
		}

		public XmlNode GetAdvancedVerificationLevelCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "VerificationLevel", curNode );
		}

		public VerificationLevelType GetVerificationLevelValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new VerificationLevelType( curNode.Value );
		}


		public VerificationLevelType GetVerificationLevel()
		{
			return GetVerificationLevelAt(0);
		}

		public VerificationLevelType VerificationLevel
		{
			get
			{
				return GetVerificationLevelAt(0);
			}
		}

		public void RemoveVerificationLevelAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "VerificationLevel", index);
		}

		public void RemoveVerificationLevel()
		{
			RemoveVerificationLevelAt(0);
		}

		public XmlNode AddVerificationLevel(VerificationLevelType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "VerificationLevel", newValue.ToString());
			return null;
		}

		public void InsertVerificationLevelAt(VerificationLevelType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "VerificationLevel", index, newValue.ToString());
		}

		public void ReplaceVerificationLevelAt(VerificationLevelType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "VerificationLevel", index, newValue.ToString());
		}
		#endregion // VerificationLevel accessor methods

		#region VerificationLevel collection
        public VerificationLevelCollection	MyVerificationLevels = new VerificationLevelCollection( );

        public class VerificationLevelCollection: IEnumerable
        {
            PersonMaritalStatus parent;
            public PersonMaritalStatus Parent
			{
				set
				{
					parent = value;
				}
			}
			public VerificationLevelEnumerator GetEnumerator() 
			{
				return new VerificationLevelEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class VerificationLevelEnumerator: IEnumerator 
        {
			int nIndex;
			PersonMaritalStatus parent;
			public VerificationLevelEnumerator(PersonMaritalStatus par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.VerificationLevelCount );
			}
			public VerificationLevelType  Current 
			{
				get 
				{
					return(parent.GetVerificationLevelAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // VerificationLevel collection

        private void SetCollectionParents()
        {
            MyVerificationLevels.Parent = this; 
	}
}
}
