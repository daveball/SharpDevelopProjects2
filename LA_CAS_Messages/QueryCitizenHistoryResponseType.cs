//
// QueryCitizenHistoryResponseType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoCitizenHistory_v0_1
{
	public class QueryCitizenHistoryResponseType : Altova.Xml.Node
	{
		#region Forward constructors

		public QueryCitizenHistoryResponseType() : base() { SetCollectionParents(); }

		public QueryCitizenHistoryResponseType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public QueryCitizenHistoryResponseType(XmlNode node) : base(node) { SetCollectionParents(); }
		public QueryCitizenHistoryResponseType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public QueryCitizenHistoryResponseType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CurrentCitizenDetails" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CurrentCitizenDetails", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.CitizenAccountDetailsGUIDType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CurrentProperty" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CurrentProperty", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.CitizenPropertyDetailsType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ChangeHistory" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ChangeHistory", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new CitizenDetailsChange(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "QueryCitizenHistoryResponse");
		}


		#region CurrentCitizenDetails accessor methods
		public static int GetCurrentCitizenDetailsMinCount()
		{
			return 1;
		}

		public static int CurrentCitizenDetailsMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCurrentCitizenDetailsMaxCount()
		{
			return 1;
		}

		public static int CurrentCitizenDetailsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCurrentCitizenDetailsCount()
		{
			return DomChildCount(NodeType.Element, "", "CurrentCitizenDetails");
		}

		public int CurrentCitizenDetailsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CurrentCitizenDetails");
			}
		}

		public bool HasCurrentCitizenDetails()
		{
			return HasDomChild(NodeType.Element, "", "CurrentCitizenDetails");
		}

		public core3.CitizenAccountDetailsGUIDType NewCurrentCitizenDetails()
		{
			return new core3.CitizenAccountDetailsGUIDType(domNode.OwnerDocument.CreateElement("CurrentCitizenDetails", ""));
		}

		public core3.CitizenAccountDetailsGUIDType GetCurrentCitizenDetailsAt(int index)
		{
			return new core3.CitizenAccountDetailsGUIDType(GetDomChildAt(NodeType.Element, "", "CurrentCitizenDetails", index));
		}

		public XmlNode GetStartingCurrentCitizenDetailsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CurrentCitizenDetails" );
		}

		public XmlNode GetAdvancedCurrentCitizenDetailsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CurrentCitizenDetails", curNode );
		}

		public core3.CitizenAccountDetailsGUIDType GetCurrentCitizenDetailsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.CitizenAccountDetailsGUIDType( curNode );
		}


		public core3.CitizenAccountDetailsGUIDType GetCurrentCitizenDetails()
		{
			return GetCurrentCitizenDetailsAt(0);
		}

		public core3.CitizenAccountDetailsGUIDType CurrentCitizenDetails
		{
			get
			{
				return GetCurrentCitizenDetailsAt(0);
			}
		}

		public void RemoveCurrentCitizenDetailsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CurrentCitizenDetails", index);
		}

		public void RemoveCurrentCitizenDetails()
		{
			RemoveCurrentCitizenDetailsAt(0);
		}

		public XmlNode AddCurrentCitizenDetails(core3.CitizenAccountDetailsGUIDType newValue)
		{
			return AppendDomElement("", "CurrentCitizenDetails", newValue);
		}

		public void InsertCurrentCitizenDetailsAt(core3.CitizenAccountDetailsGUIDType newValue, int index)
		{
			InsertDomElementAt("", "CurrentCitizenDetails", index, newValue);
		}

		public void ReplaceCurrentCitizenDetailsAt(core3.CitizenAccountDetailsGUIDType newValue, int index)
		{
			ReplaceDomElementAt("", "CurrentCitizenDetails", index, newValue);
		}
		#endregion // CurrentCitizenDetails accessor methods

		#region CurrentCitizenDetails collection
        public CurrentCitizenDetailsCollection	MyCurrentCitizenDetailss = new CurrentCitizenDetailsCollection( );

        public class CurrentCitizenDetailsCollection: IEnumerable
        {
            QueryCitizenHistoryResponseType parent;
            public QueryCitizenHistoryResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CurrentCitizenDetailsEnumerator GetEnumerator() 
			{
				return new CurrentCitizenDetailsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CurrentCitizenDetailsEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizenHistoryResponseType parent;
			public CurrentCitizenDetailsEnumerator(QueryCitizenHistoryResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CurrentCitizenDetailsCount );
			}
			public core3.CitizenAccountDetailsGUIDType  Current 
			{
				get 
				{
					return(parent.GetCurrentCitizenDetailsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CurrentCitizenDetails collection

		#region CurrentProperty accessor methods
		public static int GetCurrentPropertyMinCount()
		{
			return 1;
		}

		public static int CurrentPropertyMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCurrentPropertyMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int CurrentPropertyMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetCurrentPropertyCount()
		{
			return DomChildCount(NodeType.Element, "", "CurrentProperty");
		}

		public int CurrentPropertyCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CurrentProperty");
			}
		}

		public bool HasCurrentProperty()
		{
			return HasDomChild(NodeType.Element, "", "CurrentProperty");
		}

		public core3.CitizenPropertyDetailsType NewCurrentProperty()
		{
			return new core3.CitizenPropertyDetailsType(domNode.OwnerDocument.CreateElement("CurrentProperty", ""));
		}

		public core3.CitizenPropertyDetailsType GetCurrentPropertyAt(int index)
		{
			return new core3.CitizenPropertyDetailsType(GetDomChildAt(NodeType.Element, "", "CurrentProperty", index));
		}

		public XmlNode GetStartingCurrentPropertyCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CurrentProperty" );
		}

		public XmlNode GetAdvancedCurrentPropertyCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CurrentProperty", curNode );
		}

		public core3.CitizenPropertyDetailsType GetCurrentPropertyValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.CitizenPropertyDetailsType( curNode );
		}


		public core3.CitizenPropertyDetailsType GetCurrentProperty()
		{
			return GetCurrentPropertyAt(0);
		}

		public core3.CitizenPropertyDetailsType CurrentProperty
		{
			get
			{
				return GetCurrentPropertyAt(0);
			}
		}

		public void RemoveCurrentPropertyAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CurrentProperty", index);
		}

		public void RemoveCurrentProperty()
		{
			while (HasCurrentProperty())
				RemoveCurrentPropertyAt(0);
		}

		public XmlNode AddCurrentProperty(core3.CitizenPropertyDetailsType newValue)
		{
			return AppendDomElement("", "CurrentProperty", newValue);
		}

		public void InsertCurrentPropertyAt(core3.CitizenPropertyDetailsType newValue, int index)
		{
			InsertDomElementAt("", "CurrentProperty", index, newValue);
		}

		public void ReplaceCurrentPropertyAt(core3.CitizenPropertyDetailsType newValue, int index)
		{
			ReplaceDomElementAt("", "CurrentProperty", index, newValue);
		}
		#endregion // CurrentProperty accessor methods

		#region CurrentProperty collection
        public CurrentPropertyCollection	MyCurrentPropertys = new CurrentPropertyCollection( );

        public class CurrentPropertyCollection: IEnumerable
        {
            QueryCitizenHistoryResponseType parent;
            public QueryCitizenHistoryResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CurrentPropertyEnumerator GetEnumerator() 
			{
				return new CurrentPropertyEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CurrentPropertyEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizenHistoryResponseType parent;
			public CurrentPropertyEnumerator(QueryCitizenHistoryResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CurrentPropertyCount );
			}
			public core3.CitizenPropertyDetailsType  Current 
			{
				get 
				{
					return(parent.GetCurrentPropertyAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CurrentProperty collection

		#region ChangeHistory accessor methods
		public static int GetChangeHistoryMinCount()
		{
			return 0;
		}

		public static int ChangeHistoryMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetChangeHistoryMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int ChangeHistoryMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetChangeHistoryCount()
		{
			return DomChildCount(NodeType.Element, "", "ChangeHistory");
		}

		public int ChangeHistoryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ChangeHistory");
			}
		}

		public bool HasChangeHistory()
		{
			return HasDomChild(NodeType.Element, "", "ChangeHistory");
		}

		public CitizenDetailsChange NewChangeHistory()
		{
			return new CitizenDetailsChange(domNode.OwnerDocument.CreateElement("ChangeHistory", ""));
		}

		public CitizenDetailsChange GetChangeHistoryAt(int index)
		{
			return new CitizenDetailsChange(GetDomChildAt(NodeType.Element, "", "ChangeHistory", index));
		}

		public XmlNode GetStartingChangeHistoryCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ChangeHistory" );
		}

		public XmlNode GetAdvancedChangeHistoryCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ChangeHistory", curNode );
		}

		public CitizenDetailsChange GetChangeHistoryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CitizenDetailsChange( curNode );
		}


		public CitizenDetailsChange GetChangeHistory()
		{
			return GetChangeHistoryAt(0);
		}

		public CitizenDetailsChange ChangeHistory
		{
			get
			{
				return GetChangeHistoryAt(0);
			}
		}

		public void RemoveChangeHistoryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ChangeHistory", index);
		}

		public void RemoveChangeHistory()
		{
			while (HasChangeHistory())
				RemoveChangeHistoryAt(0);
		}

		public XmlNode AddChangeHistory(CitizenDetailsChange newValue)
		{
			return AppendDomElement("", "ChangeHistory", newValue);
		}

		public void InsertChangeHistoryAt(CitizenDetailsChange newValue, int index)
		{
			InsertDomElementAt("", "ChangeHistory", index, newValue);
		}

		public void ReplaceChangeHistoryAt(CitizenDetailsChange newValue, int index)
		{
			ReplaceDomElementAt("", "ChangeHistory", index, newValue);
		}
		#endregion // ChangeHistory accessor methods

		#region ChangeHistory collection
        public ChangeHistoryCollection	MyChangeHistorys = new ChangeHistoryCollection( );

        public class ChangeHistoryCollection: IEnumerable
        {
            QueryCitizenHistoryResponseType parent;
            public QueryCitizenHistoryResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ChangeHistoryEnumerator GetEnumerator() 
			{
				return new ChangeHistoryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ChangeHistoryEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizenHistoryResponseType parent;
			public ChangeHistoryEnumerator(QueryCitizenHistoryResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ChangeHistoryCount );
			}
			public CitizenDetailsChange  Current 
			{
				get 
				{
					return(parent.GetChangeHistoryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ChangeHistory collection

        private void SetCollectionParents()
        {
            MyCurrentCitizenDetailss.Parent = this; 
            MyCurrentPropertys.Parent = this; 
            MyChangeHistorys.Parent = this; 
	}
}
}
