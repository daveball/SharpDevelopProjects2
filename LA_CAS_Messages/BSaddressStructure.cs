//
// BSaddressStructure.cs
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages.bs76662
{
	public class BSaddressStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public BSaddressStructure() : base() { SetCollectionParents(); }

		public BSaddressStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public BSaddressStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public BSaddressStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public BSaddressStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new AONstructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new AONstructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "bs7666:BSaddressStructure");
		}


		#region SAON accessor methods
		public static int GetSAONMinCount()
		{
			return 0;
		}

		public static int SAONMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetSAONMaxCount()
		{
			return 1;
		}

		public static int SAONMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSAONCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON");
		}

		public int SAONCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON");
			}
		}

		public bool HasSAON()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON");
		}

		public AONstructure NewSAON()
		{
			return new AONstructure(domNode.OwnerDocument.CreateElement("SAON", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public AONstructure GetSAONAt(int index)
		{
			return new AONstructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON", index));
		}

		public XmlNode GetStartingSAONCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON" );
		}

		public XmlNode GetAdvancedSAONCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON", curNode );
		}

		public AONstructure GetSAONValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AONstructure( curNode );
		}


		public AONstructure GetSAON()
		{
			return GetSAONAt(0);
		}

		public AONstructure SAON
		{
			get
			{
				return GetSAONAt(0);
			}
		}

		public void RemoveSAONAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON", index);
		}

		public void RemoveSAON()
		{
			RemoveSAONAt(0);
		}

		public XmlNode AddSAON(AONstructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "SAON", newValue);
		}

		public void InsertSAONAt(AONstructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "SAON", index, newValue);
		}

		public void ReplaceSAONAt(AONstructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "SAON", index, newValue);
		}
		#endregion // SAON accessor methods

		#region SAON collection
        public SAONCollection	MySAONs = new SAONCollection( );

        public class SAONCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public SAONEnumerator GetEnumerator() 
			{
				return new SAONEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class SAONEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public SAONEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.SAONCount );
			}
			public AONstructure  Current 
			{
				get 
				{
					return(parent.GetSAONAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // SAON collection

		#region PAON accessor methods
		public static int GetPAONMinCount()
		{
			return 1;
		}

		public static int PAONMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPAONMaxCount()
		{
			return 1;
		}

		public static int PAONMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPAONCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON");
		}

		public int PAONCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON");
			}
		}

		public bool HasPAON()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON");
		}

		public AONstructure NewPAON()
		{
			return new AONstructure(domNode.OwnerDocument.CreateElement("PAON", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public AONstructure GetPAONAt(int index)
		{
			return new AONstructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON", index));
		}

		public XmlNode GetStartingPAONCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON" );
		}

		public XmlNode GetAdvancedPAONCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON", curNode );
		}

		public AONstructure GetPAONValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AONstructure( curNode );
		}


		public AONstructure GetPAON()
		{
			return GetPAONAt(0);
		}

		public AONstructure PAON
		{
			get
			{
				return GetPAONAt(0);
			}
		}

		public void RemovePAONAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON", index);
		}

		public void RemovePAON()
		{
			RemovePAONAt(0);
		}

		public XmlNode AddPAON(AONstructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "PAON", newValue);
		}

		public void InsertPAONAt(AONstructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "PAON", index, newValue);
		}

		public void ReplacePAONAt(AONstructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "PAON", index, newValue);
		}
		#endregion // PAON accessor methods

		#region PAON collection
        public PAONCollection	MyPAONs = new PAONCollection( );

        public class PAONCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PAONEnumerator GetEnumerator() 
			{
				return new PAONEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PAONEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public PAONEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PAONCount );
			}
			public AONstructure  Current 
			{
				get 
				{
					return(parent.GetPAONAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PAON collection

		#region StreetDescription accessor methods
		public static int GetStreetDescriptionMinCount()
		{
			return 1;
		}

		public static int StreetDescriptionMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStreetDescriptionMaxCount()
		{
			return 1;
		}

		public static int StreetDescriptionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStreetDescriptionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription");
		}

		public int StreetDescriptionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription");
			}
		}

		public bool HasStreetDescription()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription");
		}

		public StreetDescriptorType NewStreetDescription()
		{
			return new StreetDescriptorType();
		}

		public StreetDescriptorType GetStreetDescriptionAt(int index)
		{
			return new StreetDescriptorType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", index)));
		}

		public XmlNode GetStartingStreetDescriptionCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription" );
		}

		public XmlNode GetAdvancedStreetDescriptionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", curNode );
		}

		public StreetDescriptorType GetStreetDescriptionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StreetDescriptorType( curNode.InnerText );
		}


		public StreetDescriptorType GetStreetDescription()
		{
			return GetStreetDescriptionAt(0);
		}

		public StreetDescriptorType StreetDescription
		{
			get
			{
				return GetStreetDescriptionAt(0);
			}
		}

		public void RemoveStreetDescriptionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", index);
		}

		public void RemoveStreetDescription()
		{
			RemoveStreetDescriptionAt(0);
		}

		public XmlNode AddStreetDescription(StreetDescriptorType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", newValue.ToString());
			return null;
		}

		public void InsertStreetDescriptionAt(StreetDescriptorType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", index, newValue.ToString());
		}

		public void ReplaceStreetDescriptionAt(StreetDescriptorType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetDescription", index, newValue.ToString());
		}
		#endregion // StreetDescription accessor methods

		#region StreetDescription collection
        public StreetDescriptionCollection	MyStreetDescriptions = new StreetDescriptionCollection( );

        public class StreetDescriptionCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StreetDescriptionEnumerator GetEnumerator() 
			{
				return new StreetDescriptionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StreetDescriptionEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public StreetDescriptionEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StreetDescriptionCount );
			}
			public StreetDescriptorType  Current 
			{
				get 
				{
					return(parent.GetStreetDescriptionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StreetDescription collection

		#region UniqueStreetReferenceNumber accessor methods
		public static int GetUniqueStreetReferenceNumberMinCount()
		{
			return 0;
		}

		public static int UniqueStreetReferenceNumberMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetUniqueStreetReferenceNumberMaxCount()
		{
			return 1;
		}

		public static int UniqueStreetReferenceNumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUniqueStreetReferenceNumberCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber");
		}

		public int UniqueStreetReferenceNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber");
			}
		}

		public bool HasUniqueStreetReferenceNumber()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber");
		}

		public USRNtype NewUniqueStreetReferenceNumber()
		{
			return new USRNtype();
		}

		public USRNtype GetUniqueStreetReferenceNumberAt(int index)
		{
			return new USRNtype(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber", index)));
		}

		public XmlNode GetStartingUniqueStreetReferenceNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber" );
		}

		public XmlNode GetAdvancedUniqueStreetReferenceNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber", curNode );
		}

		public USRNtype GetUniqueStreetReferenceNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new USRNtype( curNode.InnerText );
		}


		public USRNtype GetUniqueStreetReferenceNumber()
		{
			return GetUniqueStreetReferenceNumberAt(0);
		}

		public USRNtype UniqueStreetReferenceNumber
		{
			get
			{
				return GetUniqueStreetReferenceNumberAt(0);
			}
		}

		public void RemoveUniqueStreetReferenceNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber", index);
		}

		public void RemoveUniqueStreetReferenceNumber()
		{
			RemoveUniqueStreetReferenceNumberAt(0);
		}

		public XmlNode AddUniqueStreetReferenceNumber(USRNtype newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber", newValue.ToString());
			return null;
		}

		public void InsertUniqueStreetReferenceNumberAt(USRNtype newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber", index, newValue.ToString());
		}

		public void ReplaceUniqueStreetReferenceNumberAt(USRNtype newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniqueStreetReferenceNumber", index, newValue.ToString());
		}
		#endregion // UniqueStreetReferenceNumber accessor methods

		#region UniqueStreetReferenceNumber collection
        public UniqueStreetReferenceNumberCollection	MyUniqueStreetReferenceNumbers = new UniqueStreetReferenceNumberCollection( );

        public class UniqueStreetReferenceNumberCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public UniqueStreetReferenceNumberEnumerator GetEnumerator() 
			{
				return new UniqueStreetReferenceNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UniqueStreetReferenceNumberEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public UniqueStreetReferenceNumberEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UniqueStreetReferenceNumberCount );
			}
			public USRNtype  Current 
			{
				get 
				{
					return(parent.GetUniqueStreetReferenceNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UniqueStreetReferenceNumber collection

		#region Locality accessor methods
		public static int GetLocalityMinCount()
		{
			return 1;
		}

		public static int LocalityMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLocalityMaxCount()
		{
			return 1;
		}

		public static int LocalityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLocalityCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality");
		}

		public int LocalityCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality");
			}
		}

		public bool HasLocality()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality");
		}

		public LocalityType NewLocality()
		{
			return new LocalityType();
		}

		public LocalityType GetLocalityAt(int index)
		{
			return new LocalityType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", index)));
		}

		public XmlNode GetStartingLocalityCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality" );
		}

		public XmlNode GetAdvancedLocalityCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", curNode );
		}

		public LocalityType GetLocalityValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new LocalityType( curNode.InnerText );
		}


		public LocalityType GetLocality()
		{
			return GetLocalityAt(0);
		}

		public LocalityType Locality
		{
			get
			{
				return GetLocalityAt(0);
			}
		}

		public void RemoveLocalityAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", index);
		}

		public void RemoveLocality()
		{
			RemoveLocalityAt(0);
		}

		public XmlNode AddLocality(LocalityType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", newValue.ToString());
			return null;
		}

		public void InsertLocalityAt(LocalityType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", index, newValue.ToString());
		}

		public void ReplaceLocalityAt(LocalityType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Locality", index, newValue.ToString());
		}
		#endregion // Locality accessor methods

		#region Locality collection
        public LocalityCollection	MyLocalitys = new LocalityCollection( );

        public class LocalityCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LocalityEnumerator GetEnumerator() 
			{
				return new LocalityEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LocalityEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public LocalityEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LocalityCount );
			}
			public LocalityType  Current 
			{
				get 
				{
					return(parent.GetLocalityAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Locality collection

		#region Town accessor methods
		public static int GetTownMinCount()
		{
			return 1;
		}

		public static int TownMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetTownMaxCount()
		{
			return 1;
		}

		public static int TownMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTownCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town");
		}

		public int TownCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town");
			}
		}

		public bool HasTown()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town");
		}

		public TownType NewTown()
		{
			return new TownType();
		}

		public TownType GetTownAt(int index)
		{
			return new TownType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", index)));
		}

		public XmlNode GetStartingTownCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town" );
		}

		public XmlNode GetAdvancedTownCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", curNode );
		}

		public TownType GetTownValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new TownType( curNode.InnerText );
		}


		public TownType GetTown()
		{
			return GetTownAt(0);
		}

		public TownType Town
		{
			get
			{
				return GetTownAt(0);
			}
		}

		public void RemoveTownAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", index);
		}

		public void RemoveTown()
		{
			RemoveTownAt(0);
		}

		public XmlNode AddTown(TownType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", newValue.ToString());
			return null;
		}

		public void InsertTownAt(TownType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", index, newValue.ToString());
		}

		public void ReplaceTownAt(TownType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Town", index, newValue.ToString());
		}
		#endregion // Town accessor methods

		#region Town collection
        public TownCollection	MyTowns = new TownCollection( );

        public class TownCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public TownEnumerator GetEnumerator() 
			{
				return new TownEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TownEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public TownEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TownCount );
			}
			public TownType  Current 
			{
				get 
				{
					return(parent.GetTownAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Town collection

		#region AdministrativeArea accessor methods
		public static int GetAdministrativeAreaMinCount()
		{
			return 0;
		}

		public static int AdministrativeAreaMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetAdministrativeAreaMaxCount()
		{
			return 1;
		}

		public static int AdministrativeAreaMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAdministrativeAreaCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea");
		}

		public int AdministrativeAreaCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea");
			}
		}

		public bool HasAdministrativeArea()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea");
		}

		public AdministrativeAreaType NewAdministrativeArea()
		{
			return new AdministrativeAreaType();
		}

		public AdministrativeAreaType GetAdministrativeAreaAt(int index)
		{
			return new AdministrativeAreaType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", index)));
		}

		public XmlNode GetStartingAdministrativeAreaCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea" );
		}

		public XmlNode GetAdvancedAdministrativeAreaCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", curNode );
		}

		public AdministrativeAreaType GetAdministrativeAreaValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AdministrativeAreaType( curNode.InnerText );
		}


		public AdministrativeAreaType GetAdministrativeArea()
		{
			return GetAdministrativeAreaAt(0);
		}

		public AdministrativeAreaType AdministrativeArea
		{
			get
			{
				return GetAdministrativeAreaAt(0);
			}
		}

		public void RemoveAdministrativeAreaAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", index);
		}

		public void RemoveAdministrativeArea()
		{
			RemoveAdministrativeAreaAt(0);
		}

		public XmlNode AddAdministrativeArea(AdministrativeAreaType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", newValue.ToString());
			return null;
		}

		public void InsertAdministrativeAreaAt(AdministrativeAreaType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", index, newValue.ToString());
		}

		public void ReplaceAdministrativeAreaAt(AdministrativeAreaType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "AdministrativeArea", index, newValue.ToString());
		}
		#endregion // AdministrativeArea accessor methods

		#region AdministrativeArea collection
        public AdministrativeAreaCollection	MyAdministrativeAreas = new AdministrativeAreaCollection( );

        public class AdministrativeAreaCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public AdministrativeAreaEnumerator GetEnumerator() 
			{
				return new AdministrativeAreaEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AdministrativeAreaEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public AdministrativeAreaEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AdministrativeAreaCount );
			}
			public AdministrativeAreaType  Current 
			{
				get 
				{
					return(parent.GetAdministrativeAreaAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // AdministrativeArea collection

		#region PostTown accessor methods
		public static int GetPostTownMinCount()
		{
			return 0;
		}

		public static int PostTownMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPostTownMaxCount()
		{
			return 1;
		}

		public static int PostTownMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPostTownCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown");
		}

		public int PostTownCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown");
			}
		}

		public bool HasPostTown()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown");
		}

		public PostTownType NewPostTown()
		{
			return new PostTownType();
		}

		public PostTownType GetPostTownAt(int index)
		{
			return new PostTownType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", index)));
		}

		public XmlNode GetStartingPostTownCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown" );
		}

		public XmlNode GetAdvancedPostTownCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", curNode );
		}

		public PostTownType GetPostTownValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PostTownType( curNode.InnerText );
		}


		public PostTownType GetPostTown()
		{
			return GetPostTownAt(0);
		}

		public PostTownType PostTown
		{
			get
			{
				return GetPostTownAt(0);
			}
		}

		public void RemovePostTownAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", index);
		}

		public void RemovePostTown()
		{
			RemovePostTownAt(0);
		}

		public XmlNode AddPostTown(PostTownType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", newValue.ToString());
			return null;
		}

		public void InsertPostTownAt(PostTownType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", index, newValue.ToString());
		}

		public void ReplacePostTownAt(PostTownType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", index, newValue.ToString());
		}
		#endregion // PostTown accessor methods

		#region PostTown collection
        public PostTownCollection	MyPostTowns = new PostTownCollection( );

        public class PostTownCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PostTownEnumerator GetEnumerator() 
			{
				return new PostTownEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PostTownEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public PostTownEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PostTownCount );
			}
			public PostTownType  Current 
			{
				get 
				{
					return(parent.GetPostTownAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PostTown collection

		#region PostCode accessor methods
		public static int GetPostCodeMinCount()
		{
			return 0;
		}

		public static int PostCodeMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPostCodeMaxCount()
		{
			return 1;
		}

		public static int PostCodeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPostCodeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode");
		}

		public int PostCodeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode");
			}
		}

		public bool HasPostCode()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode");
		}

		public PostCodeType NewPostCode()
		{
			return new PostCodeType();
		}

		public PostCodeType GetPostCodeAt(int index)
		{
			return new PostCodeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", index)));
		}

		public XmlNode GetStartingPostCodeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode" );
		}

		public XmlNode GetAdvancedPostCodeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", curNode );
		}

		public PostCodeType GetPostCodeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PostCodeType( curNode.InnerText );
		}


		public PostCodeType GetPostCode()
		{
			return GetPostCodeAt(0);
		}

		public PostCodeType PostCode
		{
			get
			{
				return GetPostCodeAt(0);
			}
		}

		public void RemovePostCodeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", index);
		}

		public void RemovePostCode()
		{
			RemovePostCodeAt(0);
		}

		public XmlNode AddPostCode(PostCodeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", newValue.ToString());
			return null;
		}

		public void InsertPostCodeAt(PostCodeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", index, newValue.ToString());
		}

		public void ReplacePostCodeAt(PostCodeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", index, newValue.ToString());
		}
		#endregion // PostCode accessor methods

		#region PostCode collection
        public PostCodeCollection	MyPostCodes = new PostCodeCollection( );

        public class PostCodeCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PostCodeEnumerator GetEnumerator() 
			{
				return new PostCodeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PostCodeEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public PostCodeEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PostCodeCount );
			}
			public PostCodeType  Current 
			{
				get 
				{
					return(parent.GetPostCodeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PostCode collection

		#region UniquePropertyReferenceNumber accessor methods
		public static int GetUniquePropertyReferenceNumberMinCount()
		{
			return 0;
		}

		public static int UniquePropertyReferenceNumberMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetUniquePropertyReferenceNumberMaxCount()
		{
			return 1;
		}

		public static int UniquePropertyReferenceNumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUniquePropertyReferenceNumberCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber");
		}

		public int UniquePropertyReferenceNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber");
			}
		}

		public bool HasUniquePropertyReferenceNumber()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber");
		}

		public UPRNtype NewUniquePropertyReferenceNumber()
		{
			return new UPRNtype();
		}

		public UPRNtype GetUniquePropertyReferenceNumberAt(int index)
		{
			return new UPRNtype(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", index)));
		}

		public XmlNode GetStartingUniquePropertyReferenceNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber" );
		}

		public XmlNode GetAdvancedUniquePropertyReferenceNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", curNode );
		}

		public UPRNtype GetUniquePropertyReferenceNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new UPRNtype( curNode.InnerText );
		}


		public UPRNtype GetUniquePropertyReferenceNumber()
		{
			return GetUniquePropertyReferenceNumberAt(0);
		}

		public UPRNtype UniquePropertyReferenceNumber
		{
			get
			{
				return GetUniquePropertyReferenceNumberAt(0);
			}
		}

		public void RemoveUniquePropertyReferenceNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", index);
		}

		public void RemoveUniquePropertyReferenceNumber()
		{
			RemoveUniquePropertyReferenceNumberAt(0);
		}

		public XmlNode AddUniquePropertyReferenceNumber(UPRNtype newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", newValue.ToString());
			return null;
		}

		public void InsertUniquePropertyReferenceNumberAt(UPRNtype newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", index, newValue.ToString());
		}

		public void ReplaceUniquePropertyReferenceNumberAt(UPRNtype newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "UniquePropertyReferenceNumber", index, newValue.ToString());
		}
		#endregion // UniquePropertyReferenceNumber accessor methods

		#region UniquePropertyReferenceNumber collection
        public UniquePropertyReferenceNumberCollection	MyUniquePropertyReferenceNumbers = new UniquePropertyReferenceNumberCollection( );

        public class UniquePropertyReferenceNumberCollection: IEnumerable
        {
            BSaddressStructure parent;
            public BSaddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public UniquePropertyReferenceNumberEnumerator GetEnumerator() 
			{
				return new UniquePropertyReferenceNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UniquePropertyReferenceNumberEnumerator: IEnumerator 
        {
			int nIndex;
			BSaddressStructure parent;
			public UniquePropertyReferenceNumberEnumerator(BSaddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UniquePropertyReferenceNumberCount );
			}
			public UPRNtype  Current 
			{
				get 
				{
					return(parent.GetUniquePropertyReferenceNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UniquePropertyReferenceNumber collection

        private void SetCollectionParents()
        {
            MySAONs.Parent = this; 
            MyPAONs.Parent = this; 
            MyStreetDescriptions.Parent = this; 
            MyUniqueStreetReferenceNumbers.Parent = this; 
            MyLocalitys.Parent = this; 
            MyTowns.Parent = this; 
            MyAdministrativeAreas.Parent = this; 
            MyPostTowns.Parent = this; 
            MyPostCodes.Parent = this; 
            MyUniquePropertyReferenceNumbers.Parent = this; 
	}
}
}
