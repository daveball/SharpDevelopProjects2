//
// NotificationOfDeathType.cs
//
// This file was generated by XMLSpy 2012r2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class NotificationOfDeathType : Altova.Xml.Node
	{
		#region Forward constructors

		public NotificationOfDeathType() : base() { SetCollectionParents(); }

		public NotificationOfDeathType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public NotificationOfDeathType(XmlNode node) : base(node) { SetCollectionParents(); }
		public NotificationOfDeathType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public NotificationOfDeathType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UCRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UCRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "DateOfDeath" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "DateOfDeath", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new PersonDescriptives2.PersonDeathDateStructure(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "NotificationOfDeath");
		}


		#region UCRN accessor methods
		public static int GetUCRNMinCount()
		{
			return 1;
		}

		public static int UCRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUCRNMaxCount()
		{
			return 1;
		}

		public static int UCRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUCRNCount()
		{
			return DomChildCount(NodeType.Element, "", "UCRN");
		}

		public int UCRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UCRN");
			}
		}

		public bool HasUCRN()
		{
			return HasDomChild(NodeType.Element, "", "UCRN");
		}

		public core3.UCRNType NewUCRN()
		{
			return new core3.UCRNType();
		}

		public core3.UCRNType GetUCRNAt(int index)
		{
			return new core3.UCRNType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UCRN", index)));
		}

		public XmlNode GetStartingUCRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UCRN" );
		}

		public XmlNode GetAdvancedUCRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UCRN", curNode );
		}

		public core3.UCRNType GetUCRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UCRNType( curNode.InnerText );
		}


		public core3.UCRNType GetUCRN()
		{
			return GetUCRNAt(0);
		}

		public core3.UCRNType UCRN
		{
			get
			{
				return GetUCRNAt(0);
			}
		}

		public void RemoveUCRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UCRN", index);
		}

		public void RemoveUCRN()
		{
			RemoveUCRNAt(0);
		}

		public XmlNode AddUCRN(core3.UCRNType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UCRN", newValue.ToString());
			return null;
		}

		public void InsertUCRNAt(core3.UCRNType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}

		public void ReplaceUCRNAt(core3.UCRNType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}
		#endregion // UCRN accessor methods

		#region UCRN collection
        public UCRNCollection	MyUCRNs = new UCRNCollection( );

        public class UCRNCollection: IEnumerable
        {
            NotificationOfDeathType parent;
            public NotificationOfDeathType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UCRNEnumerator GetEnumerator() 
			{
				return new UCRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UCRNEnumerator: IEnumerator 
        {
			int nIndex;
			NotificationOfDeathType parent;
			public UCRNEnumerator(NotificationOfDeathType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UCRNCount );
			}
			public core3.UCRNType  Current 
			{
				get 
				{
					return(parent.GetUCRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UCRN collection

		#region DateOfDeath accessor methods
		public static int GetDateOfDeathMinCount()
		{
			return 1;
		}

		public static int DateOfDeathMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetDateOfDeathMaxCount()
		{
			return 1;
		}

		public static int DateOfDeathMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDateOfDeathCount()
		{
			return DomChildCount(NodeType.Element, "", "DateOfDeath");
		}

		public int DateOfDeathCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DateOfDeath");
			}
		}

		public bool HasDateOfDeath()
		{
			return HasDomChild(NodeType.Element, "", "DateOfDeath");
		}

		public PersonDescriptives2.PersonDeathDateStructure NewDateOfDeath()
		{
			return new PersonDescriptives2.PersonDeathDateStructure(domNode.OwnerDocument.CreateElement("DateOfDeath", ""));
		}

		public PersonDescriptives2.PersonDeathDateStructure GetDateOfDeathAt(int index)
		{
			return new PersonDescriptives2.PersonDeathDateStructure(GetDomChildAt(NodeType.Element, "", "DateOfDeath", index));
		}

		public XmlNode GetStartingDateOfDeathCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DateOfDeath" );
		}

		public XmlNode GetAdvancedDateOfDeathCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DateOfDeath", curNode );
		}

		public PersonDescriptives2.PersonDeathDateStructure GetDateOfDeathValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonDescriptives2.PersonDeathDateStructure( curNode );
		}


		public PersonDescriptives2.PersonDeathDateStructure GetDateOfDeath()
		{
			return GetDateOfDeathAt(0);
		}

		public PersonDescriptives2.PersonDeathDateStructure DateOfDeath
		{
			get
			{
				return GetDateOfDeathAt(0);
			}
		}

		public void RemoveDateOfDeathAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DateOfDeath", index);
		}

		public void RemoveDateOfDeath()
		{
			RemoveDateOfDeathAt(0);
		}

		public XmlNode AddDateOfDeath(PersonDescriptives2.PersonDeathDateStructure newValue)
		{
			return AppendDomElement("", "DateOfDeath", newValue);
		}

		public void InsertDateOfDeathAt(PersonDescriptives2.PersonDeathDateStructure newValue, int index)
		{
			InsertDomElementAt("", "DateOfDeath", index, newValue);
		}

		public void ReplaceDateOfDeathAt(PersonDescriptives2.PersonDeathDateStructure newValue, int index)
		{
			ReplaceDomElementAt("", "DateOfDeath", index, newValue);
		}
		#endregion // DateOfDeath accessor methods

		#region DateOfDeath collection
        public DateOfDeathCollection	MyDateOfDeaths = new DateOfDeathCollection( );

        public class DateOfDeathCollection: IEnumerable
        {
            NotificationOfDeathType parent;
            public NotificationOfDeathType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DateOfDeathEnumerator GetEnumerator() 
			{
				return new DateOfDeathEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DateOfDeathEnumerator: IEnumerator 
        {
			int nIndex;
			NotificationOfDeathType parent;
			public DateOfDeathEnumerator(NotificationOfDeathType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DateOfDeathCount );
			}
			public PersonDescriptives2.PersonDeathDateStructure  Current 
			{
				get 
				{
					return(parent.GetDateOfDeathAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DateOfDeath collection

        private void SetCollectionParents()
        {
            MyUCRNs.Parent = this; 
            MyDateOfDeaths.Parent = this; 
	}
}
}
