//
// CitizenRegistrationResponseType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class CitizenRegistrationResponseType : Altova.Xml.Node
	{
		#region Forward constructors

		public CitizenRegistrationResponseType() : base() { SetCollectionParents(); }

		public CitizenRegistrationResponseType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public CitizenRegistrationResponseType(XmlNode node) : base(node) { SetCollectionParents(); }
		public CitizenRegistrationResponseType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public CitizenRegistrationResponseType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CitizenUserID" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CitizenUserID", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "CitizenRegistrationResponse");
		}


		#region CitizenUserID accessor methods
		public static int GetCitizenUserIDMinCount()
		{
			return 1;
		}

		public static int CitizenUserIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCitizenUserIDMaxCount()
		{
			return 1;
		}

		public static int CitizenUserIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCitizenUserIDCount()
		{
			return DomChildCount(NodeType.Element, "", "CitizenUserID");
		}

		public int CitizenUserIDCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CitizenUserID");
			}
		}

		public bool HasCitizenUserID()
		{
			return HasDomChild(NodeType.Element, "", "CitizenUserID");
		}

		public core3.UserIDType NewCitizenUserID()
		{
			return new core3.UserIDType();
		}

		public core3.UserIDType GetCitizenUserIDAt(int index)
		{
			return new core3.UserIDType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CitizenUserID", index)));
		}

		public XmlNode GetStartingCitizenUserIDCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CitizenUserID" );
		}

		public XmlNode GetAdvancedCitizenUserIDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CitizenUserID", curNode );
		}

		public core3.UserIDType GetCitizenUserIDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UserIDType( curNode.InnerText );
		}


		public core3.UserIDType GetCitizenUserID()
		{
			return GetCitizenUserIDAt(0);
		}

		public core3.UserIDType CitizenUserID
		{
			get
			{
				return GetCitizenUserIDAt(0);
			}
		}

		public void RemoveCitizenUserIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CitizenUserID", index);
		}

		public void RemoveCitizenUserID()
		{
			RemoveCitizenUserIDAt(0);
		}

		public XmlNode AddCitizenUserID(core3.UserIDType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CitizenUserID", newValue.ToString());
			return null;
		}

		public void InsertCitizenUserIDAt(core3.UserIDType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CitizenUserID", index, newValue.ToString());
		}

		public void ReplaceCitizenUserIDAt(core3.UserIDType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CitizenUserID", index, newValue.ToString());
		}
		#endregion // CitizenUserID accessor methods

		#region CitizenUserID collection
        public CitizenUserIDCollection	MyCitizenUserIDs = new CitizenUserIDCollection( );

        public class CitizenUserIDCollection: IEnumerable
        {
            CitizenRegistrationResponseType parent;
            public CitizenRegistrationResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CitizenUserIDEnumerator GetEnumerator() 
			{
				return new CitizenUserIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CitizenUserIDEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenRegistrationResponseType parent;
			public CitizenUserIDEnumerator(CitizenRegistrationResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CitizenUserIDCount );
			}
			public core3.UserIDType  Current 
			{
				get 
				{
					return(parent.GetCitizenUserIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CitizenUserID collection

        private void SetCollectionParents()
        {
            MyCitizenUserIDs.Parent = this; 
	}
}
}
