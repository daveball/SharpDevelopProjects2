//
// NewCitizenRegistrationType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class NewCitizenRegistrationType : Altova.Xml.Node
	{
		#region Forward constructors

		public NewCitizenRegistrationType() : base() { SetCollectionParents(); }

		public NewCitizenRegistrationType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public NewCitizenRegistrationType(XmlNode node) : base(node) { SetCollectionParents(); }
		public NewCitizenRegistrationType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public NewCitizenRegistrationType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UCRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UCRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CitizenDetails" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CitizenDetails", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.CitizenDetailsType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UPRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UPRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CitizenAddress" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CitizenAddress", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new AddressAndPersonalDetails2.UKPostalAddressStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "NationalLevelConsentFlag" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "NationalLevelConsentFlag", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Level1Enrolment" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Level1Enrolment", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.Level1EnrolmentType (DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Level2Enrolment" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Level2Enrolment", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.Level2EnrolmentType(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "NewCitizenRegistrationType");
		}


		#region UCRN accessor methods
		public static int GetUCRNMinCount()
		{
			return 1;
		}

		public static int UCRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUCRNMaxCount()
		{
			return 1;
		}

		public static int UCRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUCRNCount()
		{
			return DomChildCount(NodeType.Element, "", "UCRN");
		}

		public int UCRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UCRN");
			}
		}

		public bool HasUCRN()
		{
			return HasDomChild(NodeType.Element, "", "UCRN");
		}

		public core3.UCRNType NewUCRN()
		{
			return new core3.UCRNType();
		}

		public core3.UCRNType GetUCRNAt(int index)
		{
			return new core3.UCRNType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UCRN", index)));
		}

		public XmlNode GetStartingUCRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UCRN" );
		}

		public XmlNode GetAdvancedUCRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UCRN", curNode );
		}

		public core3.UCRNType GetUCRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UCRNType( curNode.InnerText );
		}


		public core3.UCRNType GetUCRN()
		{
			return GetUCRNAt(0);
		}

		public core3.UCRNType UCRN
		{
			get
			{
				return GetUCRNAt(0);
			}
		}

		public void RemoveUCRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UCRN", index);
		}

		public void RemoveUCRN()
		{
			RemoveUCRNAt(0);
		}

		public XmlNode AddUCRN(core3.UCRNType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UCRN", newValue.ToString());
			return null;
		}

		public void InsertUCRNAt(core3.UCRNType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}

		public void ReplaceUCRNAt(core3.UCRNType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}
		#endregion // UCRN accessor methods

		#region UCRN collection
        public UCRNCollection	MyUCRNs = new UCRNCollection( );

        public class UCRNCollection: IEnumerable
        {
            NewCitizenRegistrationType parent;
            public NewCitizenRegistrationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UCRNEnumerator GetEnumerator() 
			{
				return new UCRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UCRNEnumerator: IEnumerator 
        {
			int nIndex;
			NewCitizenRegistrationType parent;
			public UCRNEnumerator(NewCitizenRegistrationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UCRNCount );
			}
			public core3.UCRNType  Current 
			{
				get 
				{
					return(parent.GetUCRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UCRN collection

		#region CitizenDetails accessor methods
		public static int GetCitizenDetailsMinCount()
		{
			return 1;
		}

		public static int CitizenDetailsMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCitizenDetailsMaxCount()
		{
			return 1;
		}

		public static int CitizenDetailsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCitizenDetailsCount()
		{
			return DomChildCount(NodeType.Element, "", "CitizenDetails");
		}

		public int CitizenDetailsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CitizenDetails");
			}
		}

		public bool HasCitizenDetails()
		{
			return HasDomChild(NodeType.Element, "", "CitizenDetails");
		}

		public core3.CitizenDetailsType NewCitizenDetails()
		{
			return new core3.CitizenDetailsType(domNode.OwnerDocument.CreateElement("CitizenDetails", ""));
		}

		public core3.CitizenDetailsType GetCitizenDetailsAt(int index)
		{
			return new core3.CitizenDetailsType(GetDomChildAt(NodeType.Element, "", "CitizenDetails", index));
		}

		public XmlNode GetStartingCitizenDetailsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CitizenDetails" );
		}

		public XmlNode GetAdvancedCitizenDetailsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CitizenDetails", curNode );
		}

		public core3.CitizenDetailsType GetCitizenDetailsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.CitizenDetailsType( curNode );
		}


		public core3.CitizenDetailsType GetCitizenDetails()
		{
			return GetCitizenDetailsAt(0);
		}

		public core3.CitizenDetailsType CitizenDetails
		{
			get
			{
				return GetCitizenDetailsAt(0);
			}
		}

		public void RemoveCitizenDetailsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CitizenDetails", index);
		}

		public void RemoveCitizenDetails()
		{
			RemoveCitizenDetailsAt(0);
		}

		public XmlNode AddCitizenDetails(core3.CitizenDetailsType newValue)
		{
			return AppendDomElement("", "CitizenDetails", newValue);
		}

		public void InsertCitizenDetailsAt(core3.CitizenDetailsType newValue, int index)
		{
			InsertDomElementAt("", "CitizenDetails", index, newValue);
		}

		public void ReplaceCitizenDetailsAt(core3.CitizenDetailsType newValue, int index)
		{
			ReplaceDomElementAt("", "CitizenDetails", index, newValue);
		}
		#endregion // CitizenDetails accessor methods

		#region CitizenDetails collection
        public CitizenDetailsCollection	MyCitizenDetailss = new CitizenDetailsCollection( );

        public class CitizenDetailsCollection: IEnumerable
        {
            NewCitizenRegistrationType parent;
            public NewCitizenRegistrationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CitizenDetailsEnumerator GetEnumerator() 
			{
				return new CitizenDetailsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CitizenDetailsEnumerator: IEnumerator 
        {
			int nIndex;
			NewCitizenRegistrationType parent;
			public CitizenDetailsEnumerator(NewCitizenRegistrationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CitizenDetailsCount );
			}
			public core3.CitizenDetailsType  Current 
			{
				get 
				{
					return(parent.GetCitizenDetailsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CitizenDetails collection

		#region UPRN accessor methods
		public static int GetUPRNMinCount()
		{
			return 1;
		}

		public static int UPRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUPRNMaxCount()
		{
			return 1;
		}

		public static int UPRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUPRNCount()
		{
			return DomChildCount(NodeType.Element, "", "UPRN");
		}

		public int UPRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UPRN");
			}
		}

		public bool HasUPRN()
		{
			return HasDomChild(NodeType.Element, "", "UPRN");
		}

		public core3.UPRNType2 NewUPRN()
		{
			return new core3.UPRNType2();
		}

		public core3.UPRNType2 GetUPRNAt(int index)
		{
			return new core3.UPRNType2(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UPRN", index)));
		}

		public XmlNode GetStartingUPRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UPRN" );
		}

		public XmlNode GetAdvancedUPRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UPRN", curNode );
		}

		public core3.UPRNType2 GetUPRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UPRNType2( curNode.InnerText );
		}


		public core3.UPRNType2 GetUPRN()
		{
			return GetUPRNAt(0);
		}

		public core3.UPRNType2 UPRN
		{
			get
			{
				return GetUPRNAt(0);
			}
		}

		public void RemoveUPRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UPRN", index);
		}

		public void RemoveUPRN()
		{
			RemoveUPRNAt(0);
		}

		public XmlNode AddUPRN(core3.UPRNType2 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UPRN", newValue.ToString());
			return null;
		}

		public void InsertUPRNAt(core3.UPRNType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UPRN", index, newValue.ToString());
		}

		public void ReplaceUPRNAt(core3.UPRNType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UPRN", index, newValue.ToString());
		}
		#endregion // UPRN accessor methods

		#region UPRN collection
        public UPRNCollection	MyUPRNs = new UPRNCollection( );

        public class UPRNCollection: IEnumerable
        {
            NewCitizenRegistrationType parent;
            public NewCitizenRegistrationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UPRNEnumerator GetEnumerator() 
			{
				return new UPRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UPRNEnumerator: IEnumerator 
        {
			int nIndex;
			NewCitizenRegistrationType parent;
			public UPRNEnumerator(NewCitizenRegistrationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UPRNCount );
			}
			public core3.UPRNType2  Current 
			{
				get 
				{
					return(parent.GetUPRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UPRN collection

		#region CitizenAddress accessor methods
		public static int GetCitizenAddressMinCount()
		{
			return 1;
		}

		public static int CitizenAddressMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCitizenAddressMaxCount()
		{
			return 1;
		}

		public static int CitizenAddressMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCitizenAddressCount()
		{
			return DomChildCount(NodeType.Element, "", "CitizenAddress");
		}

		public int CitizenAddressCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CitizenAddress");
			}
		}

		public bool HasCitizenAddress()
		{
			return HasDomChild(NodeType.Element, "", "CitizenAddress");
		}

		public AddressAndPersonalDetails2.UKPostalAddressStructure NewCitizenAddress()
		{
			return new AddressAndPersonalDetails2.UKPostalAddressStructure(domNode.OwnerDocument.CreateElement("CitizenAddress", ""));
		}

		public AddressAndPersonalDetails2.UKPostalAddressStructure GetCitizenAddressAt(int index)
		{
			return new AddressAndPersonalDetails2.UKPostalAddressStructure(GetDomChildAt(NodeType.Element, "", "CitizenAddress", index));
		}

		public XmlNode GetStartingCitizenAddressCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CitizenAddress" );
		}

		public XmlNode GetAdvancedCitizenAddressCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CitizenAddress", curNode );
		}

		public AddressAndPersonalDetails2.UKPostalAddressStructure GetCitizenAddressValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AddressAndPersonalDetails2.UKPostalAddressStructure( curNode );
		}


		public AddressAndPersonalDetails2.UKPostalAddressStructure GetCitizenAddress()
		{
			return GetCitizenAddressAt(0);
		}

		public AddressAndPersonalDetails2.UKPostalAddressStructure CitizenAddress
		{
			get
			{
				return GetCitizenAddressAt(0);
			}
		}

		public void RemoveCitizenAddressAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CitizenAddress", index);
		}

		public void RemoveCitizenAddress()
		{
			RemoveCitizenAddressAt(0);
		}

		public XmlNode AddCitizenAddress(AddressAndPersonalDetails2.UKPostalAddressStructure newValue)
		{
			return AppendDomElement("", "CitizenAddress", newValue);
		}

		public void InsertCitizenAddressAt(AddressAndPersonalDetails2.UKPostalAddressStructure newValue, int index)
		{
			InsertDomElementAt("", "CitizenAddress", index, newValue);
		}

		public void ReplaceCitizenAddressAt(AddressAndPersonalDetails2.UKPostalAddressStructure newValue, int index)
		{
			ReplaceDomElementAt("", "CitizenAddress", index, newValue);
		}
		#endregion // CitizenAddress accessor methods

		#region CitizenAddress collection
        public CitizenAddressCollection	MyCitizenAddresss = new CitizenAddressCollection( );

        public class CitizenAddressCollection: IEnumerable
        {
            NewCitizenRegistrationType parent;
            public NewCitizenRegistrationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CitizenAddressEnumerator GetEnumerator() 
			{
				return new CitizenAddressEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CitizenAddressEnumerator: IEnumerator 
        {
			int nIndex;
			NewCitizenRegistrationType parent;
			public CitizenAddressEnumerator(NewCitizenRegistrationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CitizenAddressCount );
			}
			public AddressAndPersonalDetails2.UKPostalAddressStructure  Current 
			{
				get 
				{
					return(parent.GetCitizenAddressAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CitizenAddress collection

		#region NationalLevelConsentFlag accessor methods
		public static int GetNationalLevelConsentFlagMinCount()
		{
			return 1;
		}

		public static int NationalLevelConsentFlagMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNationalLevelConsentFlagMaxCount()
		{
			return 1;
		}

		public static int NationalLevelConsentFlagMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNationalLevelConsentFlagCount()
		{
			return DomChildCount(NodeType.Element, "", "NationalLevelConsentFlag");
		}

		public int NationalLevelConsentFlagCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "NationalLevelConsentFlag");
			}
		}

		public bool HasNationalLevelConsentFlag()
		{
			return HasDomChild(NodeType.Element, "", "NationalLevelConsentFlag");
		}

		public core2.YesNoType NewNationalLevelConsentFlag()
		{
			return new core2.YesNoType();
		}

		public core2.YesNoType GetNationalLevelConsentFlagAt(int index)
		{
			return new core2.YesNoType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "NationalLevelConsentFlag", index)));
		}

		public XmlNode GetStartingNationalLevelConsentFlagCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "NationalLevelConsentFlag" );
		}

		public XmlNode GetAdvancedNationalLevelConsentFlagCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "NationalLevelConsentFlag", curNode );
		}

		public core2.YesNoType GetNationalLevelConsentFlagValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.YesNoType( curNode.InnerText );
		}


		public core2.YesNoType GetNationalLevelConsentFlag()
		{
			return GetNationalLevelConsentFlagAt(0);
		}

		public core2.YesNoType NationalLevelConsentFlag
		{
			get
			{
				return GetNationalLevelConsentFlagAt(0);
			}
		}

		public void RemoveNationalLevelConsentFlagAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "NationalLevelConsentFlag", index);
		}

		public void RemoveNationalLevelConsentFlag()
		{
			RemoveNationalLevelConsentFlagAt(0);
		}

		public XmlNode AddNationalLevelConsentFlag(core2.YesNoType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "NationalLevelConsentFlag", newValue.ToString());
			return null;
		}

		public void InsertNationalLevelConsentFlagAt(core2.YesNoType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "NationalLevelConsentFlag", index, newValue.ToString());
		}

		public void ReplaceNationalLevelConsentFlagAt(core2.YesNoType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "NationalLevelConsentFlag", index, newValue.ToString());
		}
		#endregion // NationalLevelConsentFlag accessor methods

		#region NationalLevelConsentFlag collection
        public NationalLevelConsentFlagCollection	MyNationalLevelConsentFlags = new NationalLevelConsentFlagCollection( );

        public class NationalLevelConsentFlagCollection: IEnumerable
        {
            NewCitizenRegistrationType parent;
            public NewCitizenRegistrationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NationalLevelConsentFlagEnumerator GetEnumerator() 
			{
				return new NationalLevelConsentFlagEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NationalLevelConsentFlagEnumerator: IEnumerator 
        {
			int nIndex;
			NewCitizenRegistrationType parent;
			public NationalLevelConsentFlagEnumerator(NewCitizenRegistrationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NationalLevelConsentFlagCount );
			}
			public core2.YesNoType  Current 
			{
				get 
				{
					return(parent.GetNationalLevelConsentFlagAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // NationalLevelConsentFlag collection

		#region Level1Enrolment accessor methods
		public static int GetLevel1EnrolmentMinCount()
		{
			return 1;
		}

		public static int Level1EnrolmentMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLevel1EnrolmentMaxCount()
		{
			return 1;
		}

		public static int Level1EnrolmentMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLevel1EnrolmentCount()
		{
			return DomChildCount(NodeType.Element, "", "Level1Enrolment");
		}

		public int Level1EnrolmentCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Level1Enrolment");
			}
		}

		public bool HasLevel1Enrolment()
		{
			return HasDomChild(NodeType.Element, "", "Level1Enrolment");
		}

		public core3.Level1EnrolmentType NewLevel1Enrolment()
		{
			return new core3.Level1EnrolmentType (domNode.OwnerDocument.CreateElement("Level1Enrolment", ""));
		}

		public core3.Level1EnrolmentType  GetLevel1EnrolmentAt(int index)
		{
			return new core3.Level1EnrolmentType (GetDomChildAt(NodeType.Element, "", "Level1Enrolment", index));
		}

		public XmlNode GetStartingLevel1EnrolmentCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Level1Enrolment" );
		}

		public XmlNode GetAdvancedLevel1EnrolmentCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Level1Enrolment", curNode );
		}

		public core3.Level1EnrolmentType  GetLevel1EnrolmentValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.Level1EnrolmentType ( curNode );
		}


		public core3.Level1EnrolmentType  GetLevel1Enrolment()
		{
			return GetLevel1EnrolmentAt(0);
		}

		public core3.Level1EnrolmentType  Level1Enrolment
		{
			get
			{
				return GetLevel1EnrolmentAt(0);
			}
		}

		public void RemoveLevel1EnrolmentAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Level1Enrolment", index);
		}

		public void RemoveLevel1Enrolment()
		{
			RemoveLevel1EnrolmentAt(0);
		}

		public XmlNode AddLevel1Enrolment(core3.Level1EnrolmentType  newValue)
		{
			return AppendDomElement("", "Level1Enrolment", newValue);
		}

		public void InsertLevel1EnrolmentAt(core3.Level1EnrolmentType  newValue, int index)
		{
			InsertDomElementAt("", "Level1Enrolment", index, newValue);
		}

		public void ReplaceLevel1EnrolmentAt(core3.Level1EnrolmentType  newValue, int index)
		{
			ReplaceDomElementAt("", "Level1Enrolment", index, newValue);
		}
		#endregion // Level1Enrolment accessor methods

		#region Level1Enrolment collection
        public Level1EnrolmentCollection	MyLevel1Enrolments = new Level1EnrolmentCollection( );

        public class Level1EnrolmentCollection: IEnumerable
        {
            NewCitizenRegistrationType parent;
            public NewCitizenRegistrationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Level1EnrolmentEnumerator GetEnumerator() 
			{
				return new Level1EnrolmentEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Level1EnrolmentEnumerator: IEnumerator 
        {
			int nIndex;
			NewCitizenRegistrationType parent;
			public Level1EnrolmentEnumerator(NewCitizenRegistrationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Level1EnrolmentCount );
			}
			public core3.Level1EnrolmentType   Current 
			{
				get 
				{
					return(parent.GetLevel1EnrolmentAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Level1Enrolment collection

		#region Level2Enrolment accessor methods
		public static int GetLevel2EnrolmentMinCount()
		{
			return 1;
		}

		public static int Level2EnrolmentMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLevel2EnrolmentMaxCount()
		{
			return 1;
		}

		public static int Level2EnrolmentMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLevel2EnrolmentCount()
		{
			return DomChildCount(NodeType.Element, "", "Level2Enrolment");
		}

		public int Level2EnrolmentCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Level2Enrolment");
			}
		}

		public bool HasLevel2Enrolment()
		{
			return HasDomChild(NodeType.Element, "", "Level2Enrolment");
		}

		public core3.Level2EnrolmentType NewLevel2Enrolment()
		{
			return new core3.Level2EnrolmentType(domNode.OwnerDocument.CreateElement("Level2Enrolment", ""));
		}

		public core3.Level2EnrolmentType GetLevel2EnrolmentAt(int index)
		{
			return new core3.Level2EnrolmentType(GetDomChildAt(NodeType.Element, "", "Level2Enrolment", index));
		}

		public XmlNode GetStartingLevel2EnrolmentCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Level2Enrolment" );
		}

		public XmlNode GetAdvancedLevel2EnrolmentCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Level2Enrolment", curNode );
		}

		public core3.Level2EnrolmentType GetLevel2EnrolmentValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.Level2EnrolmentType( curNode );
		}


		public core3.Level2EnrolmentType GetLevel2Enrolment()
		{
			return GetLevel2EnrolmentAt(0);
		}

		public core3.Level2EnrolmentType Level2Enrolment
		{
			get
			{
				return GetLevel2EnrolmentAt(0);
			}
		}

		public void RemoveLevel2EnrolmentAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Level2Enrolment", index);
		}

		public void RemoveLevel2Enrolment()
		{
			RemoveLevel2EnrolmentAt(0);
		}

		public XmlNode AddLevel2Enrolment(core3.Level2EnrolmentType newValue)
		{
			return AppendDomElement("", "Level2Enrolment", newValue);
		}

		public void InsertLevel2EnrolmentAt(core3.Level2EnrolmentType newValue, int index)
		{
			InsertDomElementAt("", "Level2Enrolment", index, newValue);
		}

		public void ReplaceLevel2EnrolmentAt(core3.Level2EnrolmentType newValue, int index)
		{
			ReplaceDomElementAt("", "Level2Enrolment", index, newValue);
		}
		#endregion // Level2Enrolment accessor methods

		#region Level2Enrolment collection
        public Level2EnrolmentCollection	MyLevel2Enrolments = new Level2EnrolmentCollection( );

        public class Level2EnrolmentCollection: IEnumerable
        {
            NewCitizenRegistrationType parent;
            public NewCitizenRegistrationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Level2EnrolmentEnumerator GetEnumerator() 
			{
				return new Level2EnrolmentEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Level2EnrolmentEnumerator: IEnumerator 
        {
			int nIndex;
			NewCitizenRegistrationType parent;
			public Level2EnrolmentEnumerator(NewCitizenRegistrationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Level2EnrolmentCount );
			}
			public core3.Level2EnrolmentType  Current 
			{
				get 
				{
					return(parent.GetLevel2EnrolmentAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Level2Enrolment collection

        private void SetCollectionParents()
        {
            MyUCRNs.Parent = this; 
            MyCitizenDetailss.Parent = this; 
            MyUPRNs.Parent = this; 
            MyCitizenAddresss.Parent = this; 
            MyNationalLevelConsentFlags.Parent = this; 
            MyLevel1Enrolments.Parent = this; 
            MyLevel2Enrolments.Parent = this; 
	}
}
}
