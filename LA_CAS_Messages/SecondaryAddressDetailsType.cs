//
// SecondaryAddressDetailsType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class SecondaryAddressDetailsType : Altova.Xml.Node
	{
		#region Forward constructors

		public SecondaryAddressDetailsType() : base() { SetCollectionParents(); }

		public SecondaryAddressDetailsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public SecondaryAddressDetailsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public SecondaryAddressDetailsType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public SecondaryAddressDetailsType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UPRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UPRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EffectiveDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EffectiveDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "SecondaryAddressDetailsType");
		}


		#region UPRN accessor methods
		public static int GetUPRNMinCount()
		{
			return 1;
		}

		public static int UPRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUPRNMaxCount()
		{
			return 1;
		}

		public static int UPRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUPRNCount()
		{
			return DomChildCount(NodeType.Element, "", "UPRN");
		}

		public int UPRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UPRN");
			}
		}

		public bool HasUPRN()
		{
			return HasDomChild(NodeType.Element, "", "UPRN");
		}

		public core3.UPRNType2 NewUPRN()
		{
			return new core3.UPRNType2();
		}

		public core3.UPRNType2 GetUPRNAt(int index)
		{
			return new core3.UPRNType2(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UPRN", index)));
		}

		public XmlNode GetStartingUPRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UPRN" );
		}

		public XmlNode GetAdvancedUPRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UPRN", curNode );
		}

		public core3.UPRNType2 GetUPRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UPRNType2( curNode.InnerText );
		}


		public core3.UPRNType2 GetUPRN()
		{
			return GetUPRNAt(0);
		}

		public core3.UPRNType2 UPRN
		{
			get
			{
				return GetUPRNAt(0);
			}
		}

		public void RemoveUPRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UPRN", index);
		}

		public void RemoveUPRN()
		{
			RemoveUPRNAt(0);
		}

		public XmlNode AddUPRN(core3.UPRNType2 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UPRN", newValue.ToString());
			return null;
		}

		public void InsertUPRNAt(core3.UPRNType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UPRN", index, newValue.ToString());
		}

		public void ReplaceUPRNAt(core3.UPRNType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UPRN", index, newValue.ToString());
		}
		#endregion // UPRN accessor methods

		#region UPRN collection
        public UPRNCollection	MyUPRNs = new UPRNCollection( );

        public class UPRNCollection: IEnumerable
        {
            SecondaryAddressDetailsType parent;
            public SecondaryAddressDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UPRNEnumerator GetEnumerator() 
			{
				return new UPRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UPRNEnumerator: IEnumerator 
        {
			int nIndex;
			SecondaryAddressDetailsType parent;
			public UPRNEnumerator(SecondaryAddressDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UPRNCount );
			}
			public core3.UPRNType2  Current 
			{
				get 
				{
					return(parent.GetUPRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UPRN collection

		#region EffectiveDate accessor methods
		public static int GetEffectiveDateMinCount()
		{
			return 0;
		}

		public static int EffectiveDateMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetEffectiveDateMaxCount()
		{
			return 1;
		}

		public static int EffectiveDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEffectiveDateCount()
		{
			return DomChildCount(NodeType.Element, "", "EffectiveDate");
		}

		public int EffectiveDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EffectiveDate");
			}
		}

		public bool HasEffectiveDate()
		{
			return HasDomChild(NodeType.Element, "", "EffectiveDate");
		}

		public SchemaDate NewEffectiveDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetEffectiveDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "EffectiveDate", index)));
		}

		public XmlNode GetStartingEffectiveDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EffectiveDate" );
		}

		public XmlNode GetAdvancedEffectiveDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EffectiveDate", curNode );
		}

		public SchemaDate GetEffectiveDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetEffectiveDate()
		{
			return GetEffectiveDateAt(0);
		}

		public SchemaDate EffectiveDate
		{
			get
			{
				return GetEffectiveDateAt(0);
			}
		}

		public void RemoveEffectiveDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EffectiveDate", index);
		}

		public void RemoveEffectiveDate()
		{
			RemoveEffectiveDateAt(0);
		}

		public XmlNode AddEffectiveDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "EffectiveDate", newValue.ToString());
			return null;
		}

		public void InsertEffectiveDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "EffectiveDate", index, newValue.ToString());
		}

		public void ReplaceEffectiveDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "EffectiveDate", index, newValue.ToString());
		}
		#endregion // EffectiveDate accessor methods

		#region EffectiveDate collection
        public EffectiveDateCollection	MyEffectiveDates = new EffectiveDateCollection( );

        public class EffectiveDateCollection: IEnumerable
        {
            SecondaryAddressDetailsType parent;
            public SecondaryAddressDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EffectiveDateEnumerator GetEnumerator() 
			{
				return new EffectiveDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EffectiveDateEnumerator: IEnumerator 
        {
			int nIndex;
			SecondaryAddressDetailsType parent;
			public EffectiveDateEnumerator(SecondaryAddressDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EffectiveDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetEffectiveDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EffectiveDate collection

        private void SetCollectionParents()
        {
            MyUPRNs.Parent = this; 
            MyEffectiveDates.Parent = this; 
	}
}
}
