//
// CitizenRegistrationRequestType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class CitizenRegistrationRequestType : Altova.Xml.Node
	{
		#region Forward constructors

		public CitizenRegistrationRequestType() : base() { SetCollectionParents(); }

		public CitizenRegistrationRequestType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public CitizenRegistrationRequestType(XmlNode node) : base(node) { SetCollectionParents(); }
		public CitizenRegistrationRequestType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public CitizenRegistrationRequestType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "NewCitizenRegistration" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "NewCitizenRegistration", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new NewCitizenRegistrationType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ExistingWebSiteRegistration" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ExistingWebSiteRegistration", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new ExistingWebSiteRegistrationType(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "CitizenRegistrationRequest");
		}


		#region NewCitizenRegistration accessor methods
		public static int GetNewCitizenRegistrationMinCount()
		{
			return 1;
		}

		public static int NewCitizenRegistrationMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNewCitizenRegistrationMaxCount()
		{
			return 1;
		}

		public static int NewCitizenRegistrationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNewCitizenRegistrationCount()
		{
			return DomChildCount(NodeType.Element, "", "NewCitizenRegistration");
		}

		public int NewCitizenRegistrationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "NewCitizenRegistration");
			}
		}

		public bool HasNewCitizenRegistration()
		{
			return HasDomChild(NodeType.Element, "", "NewCitizenRegistration");
		}

		public NewCitizenRegistrationType NewNewCitizenRegistration()
		{
			return new NewCitizenRegistrationType(domNode.OwnerDocument.CreateElement("NewCitizenRegistration", ""));
		}

		public NewCitizenRegistrationType GetNewCitizenRegistrationAt(int index)
		{
			return new NewCitizenRegistrationType(GetDomChildAt(NodeType.Element, "", "NewCitizenRegistration", index));
		}

		public XmlNode GetStartingNewCitizenRegistrationCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "NewCitizenRegistration" );
		}

		public XmlNode GetAdvancedNewCitizenRegistrationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "NewCitizenRegistration", curNode );
		}

		public NewCitizenRegistrationType GetNewCitizenRegistrationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new NewCitizenRegistrationType( curNode );
		}


		public NewCitizenRegistrationType GetNewCitizenRegistration()
		{
			return GetNewCitizenRegistrationAt(0);
		}

		public NewCitizenRegistrationType NewCitizenRegistration
		{
			get
			{
				return GetNewCitizenRegistrationAt(0);
			}
		}

		public void RemoveNewCitizenRegistrationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "NewCitizenRegistration", index);
		}

		public void RemoveNewCitizenRegistration()
		{
			RemoveNewCitizenRegistrationAt(0);
		}

		public XmlNode AddNewCitizenRegistration(NewCitizenRegistrationType newValue)
		{
			return AppendDomElement("", "NewCitizenRegistration", newValue);
		}

		public void InsertNewCitizenRegistrationAt(NewCitizenRegistrationType newValue, int index)
		{
			InsertDomElementAt("", "NewCitizenRegistration", index, newValue);
		}

		public void ReplaceNewCitizenRegistrationAt(NewCitizenRegistrationType newValue, int index)
		{
			ReplaceDomElementAt("", "NewCitizenRegistration", index, newValue);
		}
		#endregion // NewCitizenRegistration accessor methods

		#region NewCitizenRegistration collection
        public NewCitizenRegistrationCollection	MyNewCitizenRegistrations = new NewCitizenRegistrationCollection( );

        public class NewCitizenRegistrationCollection: IEnumerable
        {
            CitizenRegistrationRequestType parent;
            public CitizenRegistrationRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NewCitizenRegistrationEnumerator GetEnumerator() 
			{
				return new NewCitizenRegistrationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NewCitizenRegistrationEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenRegistrationRequestType parent;
			public NewCitizenRegistrationEnumerator(CitizenRegistrationRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NewCitizenRegistrationCount );
			}
			public NewCitizenRegistrationType  Current 
			{
				get 
				{
					return(parent.GetNewCitizenRegistrationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // NewCitizenRegistration collection

		#region ExistingWebSiteRegistration accessor methods
		public static int GetExistingWebSiteRegistrationMinCount()
		{
			return 1;
		}

		public static int ExistingWebSiteRegistrationMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetExistingWebSiteRegistrationMaxCount()
		{
			return 1;
		}

		public static int ExistingWebSiteRegistrationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExistingWebSiteRegistrationCount()
		{
			return DomChildCount(NodeType.Element, "", "ExistingWebSiteRegistration");
		}

		public int ExistingWebSiteRegistrationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ExistingWebSiteRegistration");
			}
		}

		public bool HasExistingWebSiteRegistration()
		{
			return HasDomChild(NodeType.Element, "", "ExistingWebSiteRegistration");
		}

		public ExistingWebSiteRegistrationType NewExistingWebSiteRegistration()
		{
			return new ExistingWebSiteRegistrationType(domNode.OwnerDocument.CreateElement("ExistingWebSiteRegistration", ""));
		}

		public ExistingWebSiteRegistrationType GetExistingWebSiteRegistrationAt(int index)
		{
			return new ExistingWebSiteRegistrationType(GetDomChildAt(NodeType.Element, "", "ExistingWebSiteRegistration", index));
		}

		public XmlNode GetStartingExistingWebSiteRegistrationCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ExistingWebSiteRegistration" );
		}

		public XmlNode GetAdvancedExistingWebSiteRegistrationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ExistingWebSiteRegistration", curNode );
		}

		public ExistingWebSiteRegistrationType GetExistingWebSiteRegistrationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ExistingWebSiteRegistrationType( curNode );
		}


		public ExistingWebSiteRegistrationType GetExistingWebSiteRegistration()
		{
			return GetExistingWebSiteRegistrationAt(0);
		}

		public ExistingWebSiteRegistrationType ExistingWebSiteRegistration
		{
			get
			{
				return GetExistingWebSiteRegistrationAt(0);
			}
		}

		public void RemoveExistingWebSiteRegistrationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ExistingWebSiteRegistration", index);
		}

		public void RemoveExistingWebSiteRegistration()
		{
			RemoveExistingWebSiteRegistrationAt(0);
		}

		public XmlNode AddExistingWebSiteRegistration(ExistingWebSiteRegistrationType newValue)
		{
			return AppendDomElement("", "ExistingWebSiteRegistration", newValue);
		}

		public void InsertExistingWebSiteRegistrationAt(ExistingWebSiteRegistrationType newValue, int index)
		{
			InsertDomElementAt("", "ExistingWebSiteRegistration", index, newValue);
		}

		public void ReplaceExistingWebSiteRegistrationAt(ExistingWebSiteRegistrationType newValue, int index)
		{
			ReplaceDomElementAt("", "ExistingWebSiteRegistration", index, newValue);
		}
		#endregion // ExistingWebSiteRegistration accessor methods

		#region ExistingWebSiteRegistration collection
        public ExistingWebSiteRegistrationCollection	MyExistingWebSiteRegistrations = new ExistingWebSiteRegistrationCollection( );

        public class ExistingWebSiteRegistrationCollection: IEnumerable
        {
            CitizenRegistrationRequestType parent;
            public CitizenRegistrationRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ExistingWebSiteRegistrationEnumerator GetEnumerator() 
			{
				return new ExistingWebSiteRegistrationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ExistingWebSiteRegistrationEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenRegistrationRequestType parent;
			public ExistingWebSiteRegistrationEnumerator(CitizenRegistrationRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ExistingWebSiteRegistrationCount );
			}
			public ExistingWebSiteRegistrationType  Current 
			{
				get 
				{
					return(parent.GetExistingWebSiteRegistrationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ExistingWebSiteRegistration collection

        private void SetCollectionParents()
        {
            MyNewCitizenRegistrations.Parent = this; 
            MyExistingWebSiteRegistrations.Parent = this; 
	}
}
}
