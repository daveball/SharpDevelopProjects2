//
// EntitlementCardApplicationRequestType.cs
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class EntitlementCardApplicationRequestType : Altova.Xml.Node
	{
		#region Forward constructors

		public EntitlementCardApplicationRequestType() : base() { SetCollectionParents(); }

		public EntitlementCardApplicationRequestType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public EntitlementCardApplicationRequestType(XmlNode node) : base(node) { SetCollectionParents(); }
		public EntitlementCardApplicationRequestType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public EntitlementCardApplicationRequestType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UCRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UCRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CASCitizenGUID" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CASCitizenGUID", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CitizenPhoto" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CitizenPhoto", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.PhotoType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CHINumberPrintedOnCard" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CHINumberPrintedOnCard", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "EntitlementCardApplicationRequest");
		}


		#region UCRN accessor methods
		public static int GetUCRNMinCount()
		{
			return 1;
		}

		public static int UCRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUCRNMaxCount()
		{
			return 1;
		}

		public static int UCRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUCRNCount()
		{
			return DomChildCount(NodeType.Element, "", "UCRN");
		}

		public int UCRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UCRN");
			}
		}

		public bool HasUCRN()
		{
			return HasDomChild(NodeType.Element, "", "UCRN");
		}

		public core3.UCRNType NewUCRN()
		{
			return new core3.UCRNType();
		}

		public core3.UCRNType GetUCRNAt(int index)
		{
			return new core3.UCRNType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UCRN", index)));
		}

		public XmlNode GetStartingUCRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UCRN" );
		}

		public XmlNode GetAdvancedUCRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UCRN", curNode );
		}

		public core3.UCRNType GetUCRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UCRNType( curNode.InnerText );
		}


		public core3.UCRNType GetUCRN()
		{
			return GetUCRNAt(0);
		}

		public core3.UCRNType UCRN
		{
			get
			{
				return GetUCRNAt(0);
			}
		}

		public void RemoveUCRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UCRN", index);
		}

		public void RemoveUCRN()
		{
			RemoveUCRNAt(0);
		}

		public XmlNode AddUCRN(core3.UCRNType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UCRN", newValue.ToString());
			return null;
		}

		public void InsertUCRNAt(core3.UCRNType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}

		public void ReplaceUCRNAt(core3.UCRNType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}
		#endregion // UCRN accessor methods

		#region UCRN collection
        public UCRNCollection	MyUCRNs = new UCRNCollection( );

        public class UCRNCollection: IEnumerable
        {
            EntitlementCardApplicationRequestType parent;
            public EntitlementCardApplicationRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UCRNEnumerator GetEnumerator() 
			{
				return new UCRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UCRNEnumerator: IEnumerator 
        {
			int nIndex;
			EntitlementCardApplicationRequestType parent;
			public UCRNEnumerator(EntitlementCardApplicationRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UCRNCount );
			}
			public core3.UCRNType  Current 
			{
				get 
				{
					return(parent.GetUCRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UCRN collection

		#region CASCitizenGUID accessor methods
		public static int GetCASCitizenGUIDMinCount()
		{
			return 1;
		}

		public static int CASCitizenGUIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCASCitizenGUIDMaxCount()
		{
			return 1;
		}

		public static int CASCitizenGUIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCASCitizenGUIDCount()
		{
			return DomChildCount(NodeType.Element, "", "CASCitizenGUID");
		}

		public int CASCitizenGUIDCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CASCitizenGUID");
			}
		}

		public bool HasCASCitizenGUID()
		{
			return HasDomChild(NodeType.Element, "", "CASCitizenGUID");
		}

		public core3.CitizenGUIDType NewCASCitizenGUID()
		{
			return new core3.CitizenGUIDType();
		}

		public core3.CitizenGUIDType GetCASCitizenGUIDAt(int index)
		{
			return new core3.CitizenGUIDType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CASCitizenGUID", index)));
		}

		public XmlNode GetStartingCASCitizenGUIDCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CASCitizenGUID" );
		}

		public XmlNode GetAdvancedCASCitizenGUIDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CASCitizenGUID", curNode );
		}

		public core3.CitizenGUIDType GetCASCitizenGUIDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.CitizenGUIDType( curNode.InnerText );
		}


		public core3.CitizenGUIDType GetCASCitizenGUID()
		{
			return GetCASCitizenGUIDAt(0);
		}

		public core3.CitizenGUIDType CASCitizenGUID
		{
			get
			{
				return GetCASCitizenGUIDAt(0);
			}
		}

		public void RemoveCASCitizenGUIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CASCitizenGUID", index);
		}

		public void RemoveCASCitizenGUID()
		{
			RemoveCASCitizenGUIDAt(0);
		}

		public XmlNode AddCASCitizenGUID(core3.CitizenGUIDType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CASCitizenGUID", newValue.ToString());
			return null;
		}

		public void InsertCASCitizenGUIDAt(core3.CitizenGUIDType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CASCitizenGUID", index, newValue.ToString());
		}

		public void ReplaceCASCitizenGUIDAt(core3.CitizenGUIDType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CASCitizenGUID", index, newValue.ToString());
		}
		#endregion // CASCitizenGUID accessor methods

		#region CASCitizenGUID collection
        public CASCitizenGUIDCollection	MyCASCitizenGUIDs = new CASCitizenGUIDCollection( );

        public class CASCitizenGUIDCollection: IEnumerable
        {
            EntitlementCardApplicationRequestType parent;
            public EntitlementCardApplicationRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CASCitizenGUIDEnumerator GetEnumerator() 
			{
				return new CASCitizenGUIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CASCitizenGUIDEnumerator: IEnumerator 
        {
			int nIndex;
			EntitlementCardApplicationRequestType parent;
			public CASCitizenGUIDEnumerator(EntitlementCardApplicationRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CASCitizenGUIDCount );
			}
			public core3.CitizenGUIDType  Current 
			{
				get 
				{
					return(parent.GetCASCitizenGUIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CASCitizenGUID collection

		#region CitizenPhoto accessor methods
		public static int GetCitizenPhotoMinCount()
		{
			return 1;
		}

		public static int CitizenPhotoMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCitizenPhotoMaxCount()
		{
			return 1;
		}

		public static int CitizenPhotoMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCitizenPhotoCount()
		{
			return DomChildCount(NodeType.Element, "", "CitizenPhoto");
		}

		public int CitizenPhotoCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CitizenPhoto");
			}
		}

		public bool HasCitizenPhoto()
		{
			return HasDomChild(NodeType.Element, "", "CitizenPhoto");
		}

		public core3.PhotoType NewCitizenPhoto()
		{
			return new core3.PhotoType(domNode.OwnerDocument.CreateElement("CitizenPhoto", ""));
		}

		public core3.PhotoType GetCitizenPhotoAt(int index)
		{
			return new core3.PhotoType(GetDomChildAt(NodeType.Element, "", "CitizenPhoto", index));
		}

		public XmlNode GetStartingCitizenPhotoCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CitizenPhoto" );
		}

		public XmlNode GetAdvancedCitizenPhotoCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CitizenPhoto", curNode );
		}

		public core3.PhotoType GetCitizenPhotoValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.PhotoType( curNode );
		}


		public core3.PhotoType GetCitizenPhoto()
		{
			return GetCitizenPhotoAt(0);
		}

		public core3.PhotoType CitizenPhoto
		{
			get
			{
				return GetCitizenPhotoAt(0);
			}
		}

		public void RemoveCitizenPhotoAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CitizenPhoto", index);
		}

		public void RemoveCitizenPhoto()
		{
			RemoveCitizenPhotoAt(0);
		}

		public XmlNode AddCitizenPhoto(core3.PhotoType newValue)
		{
			return AppendDomElement("", "CitizenPhoto", newValue);
		}

		public void InsertCitizenPhotoAt(core3.PhotoType newValue, int index)
		{
			InsertDomElementAt("", "CitizenPhoto", index, newValue);
		}

		public void ReplaceCitizenPhotoAt(core3.PhotoType newValue, int index)
		{
			ReplaceDomElementAt("", "CitizenPhoto", index, newValue);
		}
		#endregion // CitizenPhoto accessor methods

		#region CitizenPhoto collection
        public CitizenPhotoCollection	MyCitizenPhotos = new CitizenPhotoCollection( );

        public class CitizenPhotoCollection: IEnumerable
        {
            EntitlementCardApplicationRequestType parent;
            public EntitlementCardApplicationRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CitizenPhotoEnumerator GetEnumerator() 
			{
				return new CitizenPhotoEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CitizenPhotoEnumerator: IEnumerator 
        {
			int nIndex;
			EntitlementCardApplicationRequestType parent;
			public CitizenPhotoEnumerator(EntitlementCardApplicationRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CitizenPhotoCount );
			}
			public core3.PhotoType  Current 
			{
				get 
				{
					return(parent.GetCitizenPhotoAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CitizenPhoto collection

		#region CHINumberPrintedOnCard accessor methods
		public static int GetCHINumberPrintedOnCardMinCount()
		{
			return 1;
		}

		public static int CHINumberPrintedOnCardMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCHINumberPrintedOnCardMaxCount()
		{
			return 1;
		}

		public static int CHINumberPrintedOnCardMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCHINumberPrintedOnCardCount()
		{
			return DomChildCount(NodeType.Element, "", "CHINumberPrintedOnCard");
		}

		public int CHINumberPrintedOnCardCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CHINumberPrintedOnCard");
			}
		}

		public bool HasCHINumberPrintedOnCard()
		{
			return HasDomChild(NodeType.Element, "", "CHINumberPrintedOnCard");
		}

		public core2.YesNoType NewCHINumberPrintedOnCard()
		{
			return new core2.YesNoType();
		}

		public core2.YesNoType GetCHINumberPrintedOnCardAt(int index)
		{
			return new core2.YesNoType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CHINumberPrintedOnCard", index)));
		}

		public XmlNode GetStartingCHINumberPrintedOnCardCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CHINumberPrintedOnCard" );
		}

		public XmlNode GetAdvancedCHINumberPrintedOnCardCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CHINumberPrintedOnCard", curNode );
		}

		public core2.YesNoType GetCHINumberPrintedOnCardValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.YesNoType( curNode.InnerText );
		}


		public core2.YesNoType GetCHINumberPrintedOnCard()
		{
			return GetCHINumberPrintedOnCardAt(0);
		}

		public core2.YesNoType CHINumberPrintedOnCard
		{
			get
			{
				return GetCHINumberPrintedOnCardAt(0);
			}
		}

		public void RemoveCHINumberPrintedOnCardAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CHINumberPrintedOnCard", index);
		}

		public void RemoveCHINumberPrintedOnCard()
		{
			RemoveCHINumberPrintedOnCardAt(0);
		}

		public XmlNode AddCHINumberPrintedOnCard(core2.YesNoType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CHINumberPrintedOnCard", newValue.ToString());
			return null;
		}

		public void InsertCHINumberPrintedOnCardAt(core2.YesNoType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CHINumberPrintedOnCard", index, newValue.ToString());
		}

		public void ReplaceCHINumberPrintedOnCardAt(core2.YesNoType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CHINumberPrintedOnCard", index, newValue.ToString());
		}
		#endregion // CHINumberPrintedOnCard accessor methods

		#region CHINumberPrintedOnCard collection
        public CHINumberPrintedOnCardCollection	MyCHINumberPrintedOnCards = new CHINumberPrintedOnCardCollection( );

        public class CHINumberPrintedOnCardCollection: IEnumerable
        {
            EntitlementCardApplicationRequestType parent;
            public EntitlementCardApplicationRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CHINumberPrintedOnCardEnumerator GetEnumerator() 
			{
				return new CHINumberPrintedOnCardEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CHINumberPrintedOnCardEnumerator: IEnumerator 
        {
			int nIndex;
			EntitlementCardApplicationRequestType parent;
			public CHINumberPrintedOnCardEnumerator(EntitlementCardApplicationRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CHINumberPrintedOnCardCount );
			}
			public core2.YesNoType  Current 
			{
				get 
				{
					return(parent.GetCHINumberPrintedOnCardAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CHINumberPrintedOnCard collection

        private void SetCollectionParents()
        {
            MyUCRNs.Parent = this; 
            MyCASCitizenGUIDs.Parent = this; 
            MyCitizenPhotos.Parent = this; 
            MyCHINumberPrintedOnCards.Parent = this; 
	}
}
}
