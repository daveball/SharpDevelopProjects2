//
// PostcodeSearchRequestType.cs
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class PostcodeSearchRequestType : Altova.Xml.Node
	{
		#region Forward constructors

		public PostcodeSearchRequestType() : base() { SetCollectionParents(); }

		public PostcodeSearchRequestType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public PostcodeSearchRequestType(XmlNode node) : base(node) { SetCollectionParents(); }
		public PostcodeSearchRequestType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public PostcodeSearchRequestType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Postcode" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Postcode", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "PostcodeSearchRequest");
		}


		#region Postcode accessor methods
		public static int GetPostcodeMinCount()
		{
			return 1;
		}

		public static int PostcodeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPostcodeMaxCount()
		{
			return 1;
		}

		public static int PostcodeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPostcodeCount()
		{
			return DomChildCount(NodeType.Element, "", "Postcode");
		}

		public int PostcodeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Postcode");
			}
		}

		public bool HasPostcode()
		{
			return HasDomChild(NodeType.Element, "", "Postcode");
		}

		public bs76662.PostCodeType NewPostcode()
		{
			return new bs76662.PostCodeType();
		}

		public bs76662.PostCodeType GetPostcodeAt(int index)
		{
			return new bs76662.PostCodeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Postcode", index)));
		}

		public XmlNode GetStartingPostcodeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Postcode" );
		}

		public XmlNode GetAdvancedPostcodeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Postcode", curNode );
		}

		public bs76662.PostCodeType GetPostcodeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new bs76662.PostCodeType( curNode.InnerText );
		}


		public bs76662.PostCodeType GetPostcode()
		{
			return GetPostcodeAt(0);
		}

		public bs76662.PostCodeType Postcode
		{
			get
			{
				return GetPostcodeAt(0);
			}
		}

		public void RemovePostcodeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Postcode", index);
		}

		public void RemovePostcode()
		{
			RemovePostcodeAt(0);
		}

		public XmlNode AddPostcode(bs76662.PostCodeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "Postcode", newValue.ToString());
			return null;
		}

		public void InsertPostcodeAt(bs76662.PostCodeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Postcode", index, newValue.ToString());
		}

		public void ReplacePostcodeAt(bs76662.PostCodeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Postcode", index, newValue.ToString());
		}
		#endregion // Postcode accessor methods

		#region Postcode collection
        public PostcodeCollection	MyPostcodes = new PostcodeCollection( );

        public class PostcodeCollection: IEnumerable
        {
            PostcodeSearchRequestType parent;
            public PostcodeSearchRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PostcodeEnumerator GetEnumerator() 
			{
				return new PostcodeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PostcodeEnumerator: IEnumerator 
        {
			int nIndex;
			PostcodeSearchRequestType parent;
			public PostcodeEnumerator(PostcodeSearchRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PostcodeCount );
			}
			public bs76662.PostCodeType  Current 
			{
				get 
				{
					return(parent.GetPostcodeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Postcode collection

        private void SetCollectionParents()
        {
            MyPostcodes.Parent = this; 
	}
}
}
