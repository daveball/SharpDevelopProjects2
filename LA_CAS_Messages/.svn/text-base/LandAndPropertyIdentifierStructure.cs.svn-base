//
// LandAndPropertyIdentifierStructure.cs
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages.bs76662
{
	public class LandAndPropertyIdentifierStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public LandAndPropertyIdentifierStructure() : base() { SetCollectionParents(); }

		public LandAndPropertyIdentifierStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public LandAndPropertyIdentifierStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public LandAndPropertyIdentifierStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public LandAndPropertyIdentifierStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new AONstructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new AONstructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Street" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Street", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new StreetStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "bs7666:LandAndPropertyIdentifierStructure");
		}


		#region PAON accessor methods
		public static int GetPAONMinCount()
		{
			return 1;
		}

		public static int PAONMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPAONMaxCount()
		{
			return 1;
		}

		public static int PAONMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPAONCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON");
		}

		public int PAONCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON");
			}
		}

		public bool HasPAON()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON");
		}

		public AONstructure NewPAON()
		{
			return new AONstructure(domNode.OwnerDocument.CreateElement("PAON", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public AONstructure GetPAONAt(int index)
		{
			return new AONstructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON", index));
		}

		public XmlNode GetStartingPAONCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON" );
		}

		public XmlNode GetAdvancedPAONCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON", curNode );
		}

		public AONstructure GetPAONValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AONstructure( curNode );
		}


		public AONstructure GetPAON()
		{
			return GetPAONAt(0);
		}

		public AONstructure PAON
		{
			get
			{
				return GetPAONAt(0);
			}
		}

		public void RemovePAONAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PAON", index);
		}

		public void RemovePAON()
		{
			RemovePAONAt(0);
		}

		public XmlNode AddPAON(AONstructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "PAON", newValue);
		}

		public void InsertPAONAt(AONstructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "PAON", index, newValue);
		}

		public void ReplacePAONAt(AONstructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "PAON", index, newValue);
		}
		#endregion // PAON accessor methods

		#region PAON collection
        public PAONCollection	MyPAONs = new PAONCollection( );

        public class PAONCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PAONEnumerator GetEnumerator() 
			{
				return new PAONEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PAONEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public PAONEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PAONCount );
			}
			public AONstructure  Current 
			{
				get 
				{
					return(parent.GetPAONAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PAON collection

		#region SAON accessor methods
		public static int GetSAONMinCount()
		{
			return 0;
		}

		public static int SAONMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetSAONMaxCount()
		{
			return 1;
		}

		public static int SAONMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSAONCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON");
		}

		public int SAONCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON");
			}
		}

		public bool HasSAON()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON");
		}

		public AONstructure NewSAON()
		{
			return new AONstructure(domNode.OwnerDocument.CreateElement("SAON", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public AONstructure GetSAONAt(int index)
		{
			return new AONstructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON", index));
		}

		public XmlNode GetStartingSAONCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON" );
		}

		public XmlNode GetAdvancedSAONCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON", curNode );
		}

		public AONstructure GetSAONValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AONstructure( curNode );
		}


		public AONstructure GetSAON()
		{
			return GetSAONAt(0);
		}

		public AONstructure SAON
		{
			get
			{
				return GetSAONAt(0);
			}
		}

		public void RemoveSAONAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "SAON", index);
		}

		public void RemoveSAON()
		{
			RemoveSAONAt(0);
		}

		public XmlNode AddSAON(AONstructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "SAON", newValue);
		}

		public void InsertSAONAt(AONstructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "SAON", index, newValue);
		}

		public void ReplaceSAONAt(AONstructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "SAON", index, newValue);
		}
		#endregion // SAON accessor methods

		#region SAON collection
        public SAONCollection	MySAONs = new SAONCollection( );

        public class SAONCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public SAONEnumerator GetEnumerator() 
			{
				return new SAONEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class SAONEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public SAONEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.SAONCount );
			}
			public AONstructure  Current 
			{
				get 
				{
					return(parent.GetSAONAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // SAON collection

		#region PostTown accessor methods
		public static int GetPostTownMinCount()
		{
			return 0;
		}

		public static int PostTownMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPostTownMaxCount()
		{
			return 1;
		}

		public static int PostTownMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPostTownCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown");
		}

		public int PostTownCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown");
			}
		}

		public bool HasPostTown()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown");
		}

		public PostTownType NewPostTown()
		{
			return new PostTownType();
		}

		public PostTownType GetPostTownAt(int index)
		{
			return new PostTownType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", index)));
		}

		public XmlNode GetStartingPostTownCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown" );
		}

		public XmlNode GetAdvancedPostTownCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", curNode );
		}

		public PostTownType GetPostTownValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PostTownType( curNode.InnerText );
		}


		public PostTownType GetPostTown()
		{
			return GetPostTownAt(0);
		}

		public PostTownType PostTown
		{
			get
			{
				return GetPostTownAt(0);
			}
		}

		public void RemovePostTownAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", index);
		}

		public void RemovePostTown()
		{
			RemovePostTownAt(0);
		}

		public XmlNode AddPostTown(PostTownType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", newValue.ToString());
			return null;
		}

		public void InsertPostTownAt(PostTownType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", index, newValue.ToString());
		}

		public void ReplacePostTownAt(PostTownType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostTown", index, newValue.ToString());
		}
		#endregion // PostTown accessor methods

		#region PostTown collection
        public PostTownCollection	MyPostTowns = new PostTownCollection( );

        public class PostTownCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PostTownEnumerator GetEnumerator() 
			{
				return new PostTownEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PostTownEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public PostTownEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PostTownCount );
			}
			public PostTownType  Current 
			{
				get 
				{
					return(parent.GetPostTownAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PostTown collection

		#region PostCode accessor methods
		public static int GetPostCodeMinCount()
		{
			return 0;
		}

		public static int PostCodeMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPostCodeMaxCount()
		{
			return 1;
		}

		public static int PostCodeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPostCodeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode");
		}

		public int PostCodeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode");
			}
		}

		public bool HasPostCode()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode");
		}

		public PostCodeType NewPostCode()
		{
			return new PostCodeType();
		}

		public PostCodeType GetPostCodeAt(int index)
		{
			return new PostCodeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", index)));
		}

		public XmlNode GetStartingPostCodeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode" );
		}

		public XmlNode GetAdvancedPostCodeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", curNode );
		}

		public PostCodeType GetPostCodeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PostCodeType( curNode.InnerText );
		}


		public PostCodeType GetPostCode()
		{
			return GetPostCodeAt(0);
		}

		public PostCodeType PostCode
		{
			get
			{
				return GetPostCodeAt(0);
			}
		}

		public void RemovePostCodeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", index);
		}

		public void RemovePostCode()
		{
			RemovePostCodeAt(0);
		}

		public XmlNode AddPostCode(PostCodeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", newValue.ToString());
			return null;
		}

		public void InsertPostCodeAt(PostCodeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", index, newValue.ToString());
		}

		public void ReplacePostCodeAt(PostCodeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "PostCode", index, newValue.ToString());
		}
		#endregion // PostCode accessor methods

		#region PostCode collection
        public PostCodeCollection	MyPostCodes = new PostCodeCollection( );

        public class PostCodeCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PostCodeEnumerator GetEnumerator() 
			{
				return new PostCodeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PostCodeEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public PostCodeEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PostCodeCount );
			}
			public PostCodeType  Current 
			{
				get 
				{
					return(parent.GetPostCodeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PostCode collection

		#region Level accessor methods
		public static int GetLevelMinCount()
		{
			return 0;
		}

		public static int LevelMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetLevelMaxCount()
		{
			return 1;
		}

		public static int LevelMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLevelCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level");
		}

		public int LevelCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level");
			}
		}

		public bool HasLevel()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level");
		}

		public LevelType NewLevel()
		{
			return new LevelType();
		}

		public LevelType GetLevelAt(int index)
		{
			return new LevelType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level", index)));
		}

		public XmlNode GetStartingLevelCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level" );
		}

		public XmlNode GetAdvancedLevelCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level", curNode );
		}

		public LevelType GetLevelValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new LevelType( curNode.InnerText );
		}


		public LevelType GetLevel()
		{
			return GetLevelAt(0);
		}

		public LevelType Level
		{
			get
			{
				return GetLevelAt(0);
			}
		}

		public void RemoveLevelAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level", index);
		}

		public void RemoveLevel()
		{
			RemoveLevelAt(0);
		}

		public XmlNode AddLevel(LevelType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level", newValue.ToString());
			return null;
		}

		public void InsertLevelAt(LevelType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level", index, newValue.ToString());
		}

		public void ReplaceLevelAt(LevelType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Level", index, newValue.ToString());
		}
		#endregion // Level accessor methods

		#region Level collection
        public LevelCollection	MyLevels = new LevelCollection( );

        public class LevelCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LevelEnumerator GetEnumerator() 
			{
				return new LevelEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LevelEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public LevelEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LevelCount );
			}
			public LevelType  Current 
			{
				get 
				{
					return(parent.GetLevelAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Level collection

		#region LogicalStatus accessor methods
		public static int GetLogicalStatusMinCount()
		{
			return 1;
		}

		public static int LogicalStatusMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLogicalStatusMaxCount()
		{
			return 1;
		}

		public static int LogicalStatusMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLogicalStatusCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus");
		}

		public int LogicalStatusCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus");
			}
		}

		public bool HasLogicalStatus()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus");
		}

		public LogicalStatusType NewLogicalStatus()
		{
			return new LogicalStatusType();
		}

		public LogicalStatusType GetLogicalStatusAt(int index)
		{
			return new LogicalStatusType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", index)));
		}

		public XmlNode GetStartingLogicalStatusCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus" );
		}

		public XmlNode GetAdvancedLogicalStatusCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", curNode );
		}

		public LogicalStatusType GetLogicalStatusValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new LogicalStatusType( curNode.InnerText );
		}


		public LogicalStatusType GetLogicalStatus()
		{
			return GetLogicalStatusAt(0);
		}

		public LogicalStatusType LogicalStatus
		{
			get
			{
				return GetLogicalStatusAt(0);
			}
		}

		public void RemoveLogicalStatusAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", index);
		}

		public void RemoveLogicalStatus()
		{
			RemoveLogicalStatusAt(0);
		}

		public XmlNode AddLogicalStatus(LogicalStatusType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", newValue.ToString());
			return null;
		}

		public void InsertLogicalStatusAt(LogicalStatusType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", index, newValue.ToString());
		}

		public void ReplaceLogicalStatusAt(LogicalStatusType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LogicalStatus", index, newValue.ToString());
		}
		#endregion // LogicalStatus accessor methods

		#region LogicalStatus collection
        public LogicalStatusCollection	MyLogicalStatuss = new LogicalStatusCollection( );

        public class LogicalStatusCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LogicalStatusEnumerator GetEnumerator() 
			{
				return new LogicalStatusEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LogicalStatusEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public LogicalStatusEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LogicalStatusCount );
			}
			public LogicalStatusType  Current 
			{
				get 
				{
					return(parent.GetLogicalStatusAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LogicalStatus collection

		#region OfficialAddressMarker accessor methods
		public static int GetOfficialAddressMarkerMinCount()
		{
			return 0;
		}

		public static int OfficialAddressMarkerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetOfficialAddressMarkerMaxCount()
		{
			return 1;
		}

		public static int OfficialAddressMarkerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOfficialAddressMarkerCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker");
		}

		public int OfficialAddressMarkerCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker");
			}
		}

		public bool HasOfficialAddressMarker()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker");
		}

		public SchemaBoolean NewOfficialAddressMarker()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetOfficialAddressMarkerAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker", index)));
		}

		public XmlNode GetStartingOfficialAddressMarkerCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker" );
		}

		public XmlNode GetAdvancedOfficialAddressMarkerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker", curNode );
		}

		public SchemaBoolean GetOfficialAddressMarkerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetOfficialAddressMarker()
		{
			return GetOfficialAddressMarkerAt(0);
		}

		public SchemaBoolean OfficialAddressMarker
		{
			get
			{
				return GetOfficialAddressMarkerAt(0);
			}
		}

		public void RemoveOfficialAddressMarkerAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker", index);
		}

		public void RemoveOfficialAddressMarker()
		{
			RemoveOfficialAddressMarkerAt(0);
		}

		public XmlNode AddOfficialAddressMarker(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker", newValue.ToString());
			return null;
		}

		public void InsertOfficialAddressMarkerAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker", index, newValue.ToString());
		}

		public void ReplaceOfficialAddressMarkerAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "OfficialAddressMarker", index, newValue.ToString());
		}
		#endregion // OfficialAddressMarker accessor methods

		#region OfficialAddressMarker collection
        public OfficialAddressMarkerCollection	MyOfficialAddressMarkers = new OfficialAddressMarkerCollection( );

        public class OfficialAddressMarkerCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public OfficialAddressMarkerEnumerator GetEnumerator() 
			{
				return new OfficialAddressMarkerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class OfficialAddressMarkerEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public OfficialAddressMarkerEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.OfficialAddressMarkerCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetOfficialAddressMarkerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // OfficialAddressMarker collection

		#region LPIstartDate accessor methods
		public static int GetLPIstartDateMinCount()
		{
			return 1;
		}

		public static int LPIstartDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLPIstartDateMaxCount()
		{
			return 1;
		}

		public static int LPIstartDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLPIstartDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate");
		}

		public int LPIstartDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate");
			}
		}

		public bool HasLPIstartDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate");
		}

		public SchemaDate NewLPIstartDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetLPIstartDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate", index)));
		}

		public XmlNode GetStartingLPIstartDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate" );
		}

		public XmlNode GetAdvancedLPIstartDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate", curNode );
		}

		public SchemaDate GetLPIstartDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetLPIstartDate()
		{
			return GetLPIstartDateAt(0);
		}

		public SchemaDate LPIstartDate
		{
			get
			{
				return GetLPIstartDateAt(0);
			}
		}

		public void RemoveLPIstartDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate", index);
		}

		public void RemoveLPIstartDate()
		{
			RemoveLPIstartDateAt(0);
		}

		public XmlNode AddLPIstartDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate", newValue.ToString());
			return null;
		}

		public void InsertLPIstartDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate", index, newValue.ToString());
		}

		public void ReplaceLPIstartDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIstartDate", index, newValue.ToString());
		}
		#endregion // LPIstartDate accessor methods

		#region LPIstartDate collection
        public LPIstartDateCollection	MyLPIstartDates = new LPIstartDateCollection( );

        public class LPIstartDateCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LPIstartDateEnumerator GetEnumerator() 
			{
				return new LPIstartDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LPIstartDateEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public LPIstartDateEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LPIstartDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetLPIstartDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LPIstartDate collection

		#region LPIentryDate accessor methods
		public static int GetLPIentryDateMinCount()
		{
			return 1;
		}

		public static int LPIentryDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLPIentryDateMaxCount()
		{
			return 1;
		}

		public static int LPIentryDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLPIentryDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate");
		}

		public int LPIentryDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate");
			}
		}

		public bool HasLPIentryDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate");
		}

		public SchemaDate NewLPIentryDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetLPIentryDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate", index)));
		}

		public XmlNode GetStartingLPIentryDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate" );
		}

		public XmlNode GetAdvancedLPIentryDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate", curNode );
		}

		public SchemaDate GetLPIentryDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetLPIentryDate()
		{
			return GetLPIentryDateAt(0);
		}

		public SchemaDate LPIentryDate
		{
			get
			{
				return GetLPIentryDateAt(0);
			}
		}

		public void RemoveLPIentryDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate", index);
		}

		public void RemoveLPIentryDate()
		{
			RemoveLPIentryDateAt(0);
		}

		public XmlNode AddLPIentryDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate", newValue.ToString());
			return null;
		}

		public void InsertLPIentryDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate", index, newValue.ToString());
		}

		public void ReplaceLPIentryDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIentryDate", index, newValue.ToString());
		}
		#endregion // LPIentryDate accessor methods

		#region LPIentryDate collection
        public LPIentryDateCollection	MyLPIentryDates = new LPIentryDateCollection( );

        public class LPIentryDateCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LPIentryDateEnumerator GetEnumerator() 
			{
				return new LPIentryDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LPIentryDateEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public LPIentryDateEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LPIentryDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetLPIentryDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LPIentryDate collection

		#region LPIendDate accessor methods
		public static int GetLPIendDateMinCount()
		{
			return 0;
		}

		public static int LPIendDateMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetLPIendDateMaxCount()
		{
			return 1;
		}

		public static int LPIendDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLPIendDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate");
		}

		public int LPIendDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate");
			}
		}

		public bool HasLPIendDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate");
		}

		public SchemaDate NewLPIendDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetLPIendDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate", index)));
		}

		public XmlNode GetStartingLPIendDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate" );
		}

		public XmlNode GetAdvancedLPIendDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate", curNode );
		}

		public SchemaDate GetLPIendDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetLPIendDate()
		{
			return GetLPIendDateAt(0);
		}

		public SchemaDate LPIendDate
		{
			get
			{
				return GetLPIendDateAt(0);
			}
		}

		public void RemoveLPIendDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate", index);
		}

		public void RemoveLPIendDate()
		{
			RemoveLPIendDateAt(0);
		}

		public XmlNode AddLPIendDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate", newValue.ToString());
			return null;
		}

		public void InsertLPIendDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate", index, newValue.ToString());
		}

		public void ReplaceLPIendDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIendDate", index, newValue.ToString());
		}
		#endregion // LPIendDate accessor methods

		#region LPIendDate collection
        public LPIendDateCollection	MyLPIendDates = new LPIendDateCollection( );

        public class LPIendDateCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LPIendDateEnumerator GetEnumerator() 
			{
				return new LPIendDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LPIendDateEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public LPIendDateEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LPIendDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetLPIendDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LPIendDate collection

		#region LPIlastUpdateDate accessor methods
		public static int GetLPIlastUpdateDateMinCount()
		{
			return 1;
		}

		public static int LPIlastUpdateDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLPIlastUpdateDateMaxCount()
		{
			return 1;
		}

		public static int LPIlastUpdateDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLPIlastUpdateDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate");
		}

		public int LPIlastUpdateDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate");
			}
		}

		public bool HasLPIlastUpdateDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate");
		}

		public SchemaDate NewLPIlastUpdateDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetLPIlastUpdateDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate", index)));
		}

		public XmlNode GetStartingLPIlastUpdateDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate" );
		}

		public XmlNode GetAdvancedLPIlastUpdateDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate", curNode );
		}

		public SchemaDate GetLPIlastUpdateDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetLPIlastUpdateDate()
		{
			return GetLPIlastUpdateDateAt(0);
		}

		public SchemaDate LPIlastUpdateDate
		{
			get
			{
				return GetLPIlastUpdateDateAt(0);
			}
		}

		public void RemoveLPIlastUpdateDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate", index);
		}

		public void RemoveLPIlastUpdateDate()
		{
			RemoveLPIlastUpdateDateAt(0);
		}

		public XmlNode AddLPIlastUpdateDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate", newValue.ToString());
			return null;
		}

		public void InsertLPIlastUpdateDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate", index, newValue.ToString());
		}

		public void ReplaceLPIlastUpdateDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "LPIlastUpdateDate", index, newValue.ToString());
		}
		#endregion // LPIlastUpdateDate accessor methods

		#region LPIlastUpdateDate collection
        public LPIlastUpdateDateCollection	MyLPIlastUpdateDates = new LPIlastUpdateDateCollection( );

        public class LPIlastUpdateDateCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LPIlastUpdateDateEnumerator GetEnumerator() 
			{
				return new LPIlastUpdateDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LPIlastUpdateDateEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public LPIlastUpdateDateEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LPIlastUpdateDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetLPIlastUpdateDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LPIlastUpdateDate collection

		#region Street accessor methods
		public static int GetStreetMinCount()
		{
			return 1;
		}

		public static int StreetMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStreetMaxCount()
		{
			return 1;
		}

		public static int StreetMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStreetCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Street");
		}

		public int StreetCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Street");
			}
		}

		public bool HasStreet()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Street");
		}

		public StreetStructure NewStreet()
		{
			return new StreetStructure(domNode.OwnerDocument.CreateElement("Street", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public StreetStructure GetStreetAt(int index)
		{
			return new StreetStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Street", index));
		}

		public XmlNode GetStartingStreetCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Street" );
		}

		public XmlNode GetAdvancedStreetCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Street", curNode );
		}

		public StreetStructure GetStreetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StreetStructure( curNode );
		}


		public StreetStructure GetStreet()
		{
			return GetStreetAt(0);
		}

		public StreetStructure Street
		{
			get
			{
				return GetStreetAt(0);
			}
		}

		public void RemoveStreetAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Street", index);
		}

		public void RemoveStreet()
		{
			RemoveStreetAt(0);
		}

		public XmlNode AddStreet(StreetStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "Street", newValue);
		}

		public void InsertStreetAt(StreetStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "Street", index, newValue);
		}

		public void ReplaceStreetAt(StreetStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "Street", index, newValue);
		}
		#endregion // Street accessor methods

		#region Street collection
        public StreetCollection	MyStreets = new StreetCollection( );

        public class StreetCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StreetEnumerator GetEnumerator() 
			{
				return new StreetEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StreetEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public StreetEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StreetCount );
			}
			public StreetStructure  Current 
			{
				get 
				{
					return(parent.GetStreetAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Street collection

		#region USRN accessor methods
		public static int GetUSRNMinCount()
		{
			return 1;
		}

		public static int USRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUSRNMaxCount()
		{
			return 1;
		}

		public static int USRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUSRNCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN");
		}

		public int USRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN");
			}
		}

		public bool HasUSRN()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN");
		}

		public USRNtype NewUSRN()
		{
			return new USRNtype();
		}

		public USRNtype GetUSRNAt(int index)
		{
			return new USRNtype(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN", index)));
		}

		public XmlNode GetStartingUSRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN" );
		}

		public XmlNode GetAdvancedUSRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN", curNode );
		}

		public USRNtype GetUSRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new USRNtype( curNode.InnerText );
		}


		public USRNtype GetUSRN()
		{
			return GetUSRNAt(0);
		}

		public USRNtype USRN
		{
			get
			{
				return GetUSRNAt(0);
			}
		}

		public void RemoveUSRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN", index);
		}

		public void RemoveUSRN()
		{
			RemoveUSRNAt(0);
		}

		public XmlNode AddUSRN(USRNtype newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN", newValue.ToString());
			return null;
		}

		public void InsertUSRNAt(USRNtype newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN", index, newValue.ToString());
		}

		public void ReplaceUSRNAt(USRNtype newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "USRN", index, newValue.ToString());
		}
		#endregion // USRN accessor methods

		#region USRN collection
        public USRNCollection	MyUSRNs = new USRNCollection( );

        public class USRNCollection: IEnumerable
        {
            LandAndPropertyIdentifierStructure parent;
            public LandAndPropertyIdentifierStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public USRNEnumerator GetEnumerator() 
			{
				return new USRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class USRNEnumerator: IEnumerator 
        {
			int nIndex;
			LandAndPropertyIdentifierStructure parent;
			public USRNEnumerator(LandAndPropertyIdentifierStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.USRNCount );
			}
			public USRNtype  Current 
			{
				get 
				{
					return(parent.GetUSRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // USRN collection

        private void SetCollectionParents()
        {
            MyPAONs.Parent = this; 
            MySAONs.Parent = this; 
            MyPostTowns.Parent = this; 
            MyPostCodes.Parent = this; 
            MyLevels.Parent = this; 
            MyLogicalStatuss.Parent = this; 
            MyOfficialAddressMarkers.Parent = this; 
            MyLPIstartDates.Parent = this; 
            MyLPIentryDates.Parent = this; 
            MyLPIendDates.Parent = this; 
            MyLPIlastUpdateDates.Parent = this; 
            MyStreets.Parent = this; 
            MyUSRNs.Parent = this; 
	}
}
}
