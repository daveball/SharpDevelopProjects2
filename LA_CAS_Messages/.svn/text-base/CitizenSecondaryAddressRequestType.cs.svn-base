//
// CitizenSecondaryAddressRequestType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class CitizenSecondaryAddressRequestType : Altova.Xml.Node
	{
		#region Forward constructors

		public CitizenSecondaryAddressRequestType() : base() { SetCollectionParents(); }

		public CitizenSecondaryAddressRequestType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public CitizenSecondaryAddressRequestType(XmlNode node) : base(node) { SetCollectionParents(); }
		public CitizenSecondaryAddressRequestType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public CitizenSecondaryAddressRequestType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UCRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UCRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CASCitizenGUID" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CASCitizenGUID", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "DeleteSecondaryAddress" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "DeleteSecondaryAddress", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new SecondaryAddressDetailsType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CreateSecondaryAddress" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CreateSecondaryAddress", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new SecondaryAddressDetailsType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UpdateSecondaryAddress" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UpdateSecondaryAddress", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new SecondaryAddressUpdateDetailsType(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "CitizenSecondaryAddressRequest");
		}


		#region UCRN accessor methods
		public static int GetUCRNMinCount()
		{
			return 1;
		}

		public static int UCRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUCRNMaxCount()
		{
			return 1;
		}

		public static int UCRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUCRNCount()
		{
			return DomChildCount(NodeType.Element, "", "UCRN");
		}

		public int UCRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UCRN");
			}
		}

		public bool HasUCRN()
		{
			return HasDomChild(NodeType.Element, "", "UCRN");
		}

		public core3.UCRNType NewUCRN()
		{
			return new core3.UCRNType();
		}

		public core3.UCRNType GetUCRNAt(int index)
		{
			return new core3.UCRNType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UCRN", index)));
		}

		public XmlNode GetStartingUCRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UCRN" );
		}

		public XmlNode GetAdvancedUCRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UCRN", curNode );
		}

		public core3.UCRNType GetUCRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UCRNType( curNode.InnerText );
		}


		public core3.UCRNType GetUCRN()
		{
			return GetUCRNAt(0);
		}

		public core3.UCRNType UCRN
		{
			get
			{
				return GetUCRNAt(0);
			}
		}

		public void RemoveUCRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UCRN", index);
		}

		public void RemoveUCRN()
		{
			RemoveUCRNAt(0);
		}

		public XmlNode AddUCRN(core3.UCRNType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UCRN", newValue.ToString());
			return null;
		}

		public void InsertUCRNAt(core3.UCRNType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}

		public void ReplaceUCRNAt(core3.UCRNType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}
		#endregion // UCRN accessor methods

		#region UCRN collection
        public UCRNCollection	MyUCRNs = new UCRNCollection( );

        public class UCRNCollection: IEnumerable
        {
            CitizenSecondaryAddressRequestType parent;
            public CitizenSecondaryAddressRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UCRNEnumerator GetEnumerator() 
			{
				return new UCRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UCRNEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenSecondaryAddressRequestType parent;
			public UCRNEnumerator(CitizenSecondaryAddressRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UCRNCount );
			}
			public core3.UCRNType  Current 
			{
				get 
				{
					return(parent.GetUCRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UCRN collection

		#region CASCitizenGUID accessor methods
		public static int GetCASCitizenGUIDMinCount()
		{
			return 1;
		}

		public static int CASCitizenGUIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCASCitizenGUIDMaxCount()
		{
			return 1;
		}

		public static int CASCitizenGUIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCASCitizenGUIDCount()
		{
			return DomChildCount(NodeType.Element, "", "CASCitizenGUID");
		}

		public int CASCitizenGUIDCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CASCitizenGUID");
			}
		}

		public bool HasCASCitizenGUID()
		{
			return HasDomChild(NodeType.Element, "", "CASCitizenGUID");
		}

		public core3.CitizenGUIDType NewCASCitizenGUID()
		{
			return new core3.CitizenGUIDType();
		}

		public core3.CitizenGUIDType GetCASCitizenGUIDAt(int index)
		{
			return new core3.CitizenGUIDType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CASCitizenGUID", index)));
		}

		public XmlNode GetStartingCASCitizenGUIDCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CASCitizenGUID" );
		}

		public XmlNode GetAdvancedCASCitizenGUIDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CASCitizenGUID", curNode );
		}

		public core3.CitizenGUIDType GetCASCitizenGUIDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.CitizenGUIDType( curNode.InnerText );
		}


		public core3.CitizenGUIDType GetCASCitizenGUID()
		{
			return GetCASCitizenGUIDAt(0);
		}

		public core3.CitizenGUIDType CASCitizenGUID
		{
			get
			{
				return GetCASCitizenGUIDAt(0);
			}
		}

		public void RemoveCASCitizenGUIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CASCitizenGUID", index);
		}

		public void RemoveCASCitizenGUID()
		{
			RemoveCASCitizenGUIDAt(0);
		}

		public XmlNode AddCASCitizenGUID(core3.CitizenGUIDType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CASCitizenGUID", newValue.ToString());
			return null;
		}

		public void InsertCASCitizenGUIDAt(core3.CitizenGUIDType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CASCitizenGUID", index, newValue.ToString());
		}

		public void ReplaceCASCitizenGUIDAt(core3.CitizenGUIDType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CASCitizenGUID", index, newValue.ToString());
		}
		#endregion // CASCitizenGUID accessor methods

		#region CASCitizenGUID collection
        public CASCitizenGUIDCollection	MyCASCitizenGUIDs = new CASCitizenGUIDCollection( );

        public class CASCitizenGUIDCollection: IEnumerable
        {
            CitizenSecondaryAddressRequestType parent;
            public CitizenSecondaryAddressRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CASCitizenGUIDEnumerator GetEnumerator() 
			{
				return new CASCitizenGUIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CASCitizenGUIDEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenSecondaryAddressRequestType parent;
			public CASCitizenGUIDEnumerator(CitizenSecondaryAddressRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CASCitizenGUIDCount );
			}
			public core3.CitizenGUIDType  Current 
			{
				get 
				{
					return(parent.GetCASCitizenGUIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CASCitizenGUID collection

		#region DeleteSecondaryAddress accessor methods
		public static int GetDeleteSecondaryAddressMinCount()
		{
			return 1;
		}

		public static int DeleteSecondaryAddressMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetDeleteSecondaryAddressMaxCount()
		{
			return 1;
		}

		public static int DeleteSecondaryAddressMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDeleteSecondaryAddressCount()
		{
			return DomChildCount(NodeType.Element, "", "DeleteSecondaryAddress");
		}

		public int DeleteSecondaryAddressCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DeleteSecondaryAddress");
			}
		}

		public bool HasDeleteSecondaryAddress()
		{
			return HasDomChild(NodeType.Element, "", "DeleteSecondaryAddress");
		}

		public SecondaryAddressDetailsType NewDeleteSecondaryAddress()
		{
			return new SecondaryAddressDetailsType(domNode.OwnerDocument.CreateElement("DeleteSecondaryAddress", ""));
		}

		public SecondaryAddressDetailsType GetDeleteSecondaryAddressAt(int index)
		{
			return new SecondaryAddressDetailsType(GetDomChildAt(NodeType.Element, "", "DeleteSecondaryAddress", index));
		}

		public XmlNode GetStartingDeleteSecondaryAddressCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DeleteSecondaryAddress" );
		}

		public XmlNode GetAdvancedDeleteSecondaryAddressCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DeleteSecondaryAddress", curNode );
		}

		public SecondaryAddressDetailsType GetDeleteSecondaryAddressValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SecondaryAddressDetailsType( curNode );
		}


		public SecondaryAddressDetailsType GetDeleteSecondaryAddress()
		{
			return GetDeleteSecondaryAddressAt(0);
		}

		public SecondaryAddressDetailsType DeleteSecondaryAddress
		{
			get
			{
				return GetDeleteSecondaryAddressAt(0);
			}
		}

		public void RemoveDeleteSecondaryAddressAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DeleteSecondaryAddress", index);
		}

		public void RemoveDeleteSecondaryAddress()
		{
			RemoveDeleteSecondaryAddressAt(0);
		}

		public XmlNode AddDeleteSecondaryAddress(SecondaryAddressDetailsType newValue)
		{
			return AppendDomElement("", "DeleteSecondaryAddress", newValue);
		}

		public void InsertDeleteSecondaryAddressAt(SecondaryAddressDetailsType newValue, int index)
		{
			InsertDomElementAt("", "DeleteSecondaryAddress", index, newValue);
		}

		public void ReplaceDeleteSecondaryAddressAt(SecondaryAddressDetailsType newValue, int index)
		{
			ReplaceDomElementAt("", "DeleteSecondaryAddress", index, newValue);
		}
		#endregion // DeleteSecondaryAddress accessor methods

		#region DeleteSecondaryAddress collection
        public DeleteSecondaryAddressCollection	MyDeleteSecondaryAddresss = new DeleteSecondaryAddressCollection( );

        public class DeleteSecondaryAddressCollection: IEnumerable
        {
            CitizenSecondaryAddressRequestType parent;
            public CitizenSecondaryAddressRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DeleteSecondaryAddressEnumerator GetEnumerator() 
			{
				return new DeleteSecondaryAddressEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DeleteSecondaryAddressEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenSecondaryAddressRequestType parent;
			public DeleteSecondaryAddressEnumerator(CitizenSecondaryAddressRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DeleteSecondaryAddressCount );
			}
			public SecondaryAddressDetailsType  Current 
			{
				get 
				{
					return(parent.GetDeleteSecondaryAddressAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DeleteSecondaryAddress collection

		#region CreateSecondaryAddress accessor methods
		public static int GetCreateSecondaryAddressMinCount()
		{
			return 1;
		}

		public static int CreateSecondaryAddressMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCreateSecondaryAddressMaxCount()
		{
			return 1;
		}

		public static int CreateSecondaryAddressMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCreateSecondaryAddressCount()
		{
			return DomChildCount(NodeType.Element, "", "CreateSecondaryAddress");
		}

		public int CreateSecondaryAddressCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CreateSecondaryAddress");
			}
		}

		public bool HasCreateSecondaryAddress()
		{
			return HasDomChild(NodeType.Element, "", "CreateSecondaryAddress");
		}

		public SecondaryAddressDetailsType NewCreateSecondaryAddress()
		{
			return new SecondaryAddressDetailsType(domNode.OwnerDocument.CreateElement("CreateSecondaryAddress", ""));
		}

		public SecondaryAddressDetailsType GetCreateSecondaryAddressAt(int index)
		{
			return new SecondaryAddressDetailsType(GetDomChildAt(NodeType.Element, "", "CreateSecondaryAddress", index));
		}

		public XmlNode GetStartingCreateSecondaryAddressCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CreateSecondaryAddress" );
		}

		public XmlNode GetAdvancedCreateSecondaryAddressCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CreateSecondaryAddress", curNode );
		}

		public SecondaryAddressDetailsType GetCreateSecondaryAddressValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SecondaryAddressDetailsType( curNode );
		}


		public SecondaryAddressDetailsType GetCreateSecondaryAddress()
		{
			return GetCreateSecondaryAddressAt(0);
		}

		public SecondaryAddressDetailsType CreateSecondaryAddress
		{
			get
			{
				return GetCreateSecondaryAddressAt(0);
			}
		}

		public void RemoveCreateSecondaryAddressAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CreateSecondaryAddress", index);
		}

		public void RemoveCreateSecondaryAddress()
		{
			RemoveCreateSecondaryAddressAt(0);
		}

		public XmlNode AddCreateSecondaryAddress(SecondaryAddressDetailsType newValue)
		{
			return AppendDomElement("", "CreateSecondaryAddress", newValue);
		}

		public void InsertCreateSecondaryAddressAt(SecondaryAddressDetailsType newValue, int index)
		{
			InsertDomElementAt("", "CreateSecondaryAddress", index, newValue);
		}

		public void ReplaceCreateSecondaryAddressAt(SecondaryAddressDetailsType newValue, int index)
		{
			ReplaceDomElementAt("", "CreateSecondaryAddress", index, newValue);
		}
		#endregion // CreateSecondaryAddress accessor methods

		#region CreateSecondaryAddress collection
        public CreateSecondaryAddressCollection	MyCreateSecondaryAddresss = new CreateSecondaryAddressCollection( );

        public class CreateSecondaryAddressCollection: IEnumerable
        {
            CitizenSecondaryAddressRequestType parent;
            public CitizenSecondaryAddressRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CreateSecondaryAddressEnumerator GetEnumerator() 
			{
				return new CreateSecondaryAddressEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CreateSecondaryAddressEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenSecondaryAddressRequestType parent;
			public CreateSecondaryAddressEnumerator(CitizenSecondaryAddressRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CreateSecondaryAddressCount );
			}
			public SecondaryAddressDetailsType  Current 
			{
				get 
				{
					return(parent.GetCreateSecondaryAddressAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CreateSecondaryAddress collection

		#region UpdateSecondaryAddress accessor methods
		public static int GetUpdateSecondaryAddressMinCount()
		{
			return 1;
		}

		public static int UpdateSecondaryAddressMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUpdateSecondaryAddressMaxCount()
		{
			return 1;
		}

		public static int UpdateSecondaryAddressMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUpdateSecondaryAddressCount()
		{
			return DomChildCount(NodeType.Element, "", "UpdateSecondaryAddress");
		}

		public int UpdateSecondaryAddressCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UpdateSecondaryAddress");
			}
		}

		public bool HasUpdateSecondaryAddress()
		{
			return HasDomChild(NodeType.Element, "", "UpdateSecondaryAddress");
		}

		public SecondaryAddressUpdateDetailsType NewUpdateSecondaryAddress()
		{
			return new SecondaryAddressUpdateDetailsType(domNode.OwnerDocument.CreateElement("UpdateSecondaryAddress", ""));
		}

		public SecondaryAddressUpdateDetailsType GetUpdateSecondaryAddressAt(int index)
		{
			return new SecondaryAddressUpdateDetailsType(GetDomChildAt(NodeType.Element, "", "UpdateSecondaryAddress", index));
		}

		public XmlNode GetStartingUpdateSecondaryAddressCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UpdateSecondaryAddress" );
		}

		public XmlNode GetAdvancedUpdateSecondaryAddressCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UpdateSecondaryAddress", curNode );
		}

		public SecondaryAddressUpdateDetailsType GetUpdateSecondaryAddressValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SecondaryAddressUpdateDetailsType( curNode );
		}


		public SecondaryAddressUpdateDetailsType GetUpdateSecondaryAddress()
		{
			return GetUpdateSecondaryAddressAt(0);
		}

		public SecondaryAddressUpdateDetailsType UpdateSecondaryAddress
		{
			get
			{
				return GetUpdateSecondaryAddressAt(0);
			}
		}

		public void RemoveUpdateSecondaryAddressAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UpdateSecondaryAddress", index);
		}

		public void RemoveUpdateSecondaryAddress()
		{
			RemoveUpdateSecondaryAddressAt(0);
		}

		public XmlNode AddUpdateSecondaryAddress(SecondaryAddressUpdateDetailsType newValue)
		{
			return AppendDomElement("", "UpdateSecondaryAddress", newValue);
		}

		public void InsertUpdateSecondaryAddressAt(SecondaryAddressUpdateDetailsType newValue, int index)
		{
			InsertDomElementAt("", "UpdateSecondaryAddress", index, newValue);
		}

		public void ReplaceUpdateSecondaryAddressAt(SecondaryAddressUpdateDetailsType newValue, int index)
		{
			ReplaceDomElementAt("", "UpdateSecondaryAddress", index, newValue);
		}
		#endregion // UpdateSecondaryAddress accessor methods

		#region UpdateSecondaryAddress collection
        public UpdateSecondaryAddressCollection	MyUpdateSecondaryAddresss = new UpdateSecondaryAddressCollection( );

        public class UpdateSecondaryAddressCollection: IEnumerable
        {
            CitizenSecondaryAddressRequestType parent;
            public CitizenSecondaryAddressRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UpdateSecondaryAddressEnumerator GetEnumerator() 
			{
				return new UpdateSecondaryAddressEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UpdateSecondaryAddressEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenSecondaryAddressRequestType parent;
			public UpdateSecondaryAddressEnumerator(CitizenSecondaryAddressRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UpdateSecondaryAddressCount );
			}
			public SecondaryAddressUpdateDetailsType  Current 
			{
				get 
				{
					return(parent.GetUpdateSecondaryAddressAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UpdateSecondaryAddress collection

        private void SetCollectionParents()
        {
            MyUCRNs.Parent = this; 
            MyCASCitizenGUIDs.Parent = this; 
            MyDeleteSecondaryAddresss.Parent = this; 
            MyCreateSecondaryAddresss.Parent = this; 
            MyUpdateSecondaryAddresss.Parent = this; 
	}
}
}
