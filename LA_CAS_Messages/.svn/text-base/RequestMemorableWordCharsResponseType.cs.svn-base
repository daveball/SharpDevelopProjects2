//
// RequestMemorableWordCharsResponseType.cs
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class RequestMemorableWordCharsResponseType : Altova.Xml.Node
	{
		#region Forward constructors

		public RequestMemorableWordCharsResponseType() : base() { SetCollectionParents(); }

		public RequestMemorableWordCharsResponseType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public RequestMemorableWordCharsResponseType(XmlNode node) : base(node) { SetCollectionParents(); }
		public RequestMemorableWordCharsResponseType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public RequestMemorableWordCharsResponseType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "GUID" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "GUID", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CharacterOnePosition" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CharacterOnePosition", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CharacterTwoPosition" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CharacterTwoPosition", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CitizenPhotograph" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CitizenPhotograph", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.PhotoType(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "RequestMemorableWordCharsResponse");
		}


		#region GUID accessor methods
		public static int GetGUIDMinCount()
		{
			return 1;
		}

		public static int GUIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetGUIDMaxCount()
		{
			return 1;
		}

		public static int GUIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGUIDCount()
		{
			return DomChildCount(NodeType.Element, "", "GUID");
		}

		public int GUIDCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "GUID");
			}
		}

		public bool HasGUID()
		{
			return HasDomChild(NodeType.Element, "", "GUID");
		}

		public core3.MemorableWordGUIDType NewGUID()
		{
			return new core3.MemorableWordGUIDType();
		}

		public core3.MemorableWordGUIDType GetGUIDAt(int index)
		{
			return new core3.MemorableWordGUIDType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "GUID", index)));
		}

		public XmlNode GetStartingGUIDCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "GUID" );
		}

		public XmlNode GetAdvancedGUIDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "GUID", curNode );
		}

		public core3.MemorableWordGUIDType GetGUIDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.MemorableWordGUIDType( curNode.InnerText );
		}


		public core3.MemorableWordGUIDType GetGUID()
		{
			return GetGUIDAt(0);
		}

		public core3.MemorableWordGUIDType GUID
		{
			get
			{
				return GetGUIDAt(0);
			}
		}

		public void RemoveGUIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "GUID", index);
		}

		public void RemoveGUID()
		{
			RemoveGUIDAt(0);
		}

		public XmlNode AddGUID(core3.MemorableWordGUIDType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "GUID", newValue.ToString());
			return null;
		}

		public void InsertGUIDAt(core3.MemorableWordGUIDType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "GUID", index, newValue.ToString());
		}

		public void ReplaceGUIDAt(core3.MemorableWordGUIDType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "GUID", index, newValue.ToString());
		}
		#endregion // GUID accessor methods

		#region GUID collection
        public GUIDCollection	MyGUIDs = new GUIDCollection( );

        public class GUIDCollection: IEnumerable
        {
            RequestMemorableWordCharsResponseType parent;
            public RequestMemorableWordCharsResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GUIDEnumerator GetEnumerator() 
			{
				return new GUIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GUIDEnumerator: IEnumerator 
        {
			int nIndex;
			RequestMemorableWordCharsResponseType parent;
			public GUIDEnumerator(RequestMemorableWordCharsResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GUIDCount );
			}
			public core3.MemorableWordGUIDType  Current 
			{
				get 
				{
					return(parent.GetGUIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GUID collection

		#region CharacterOnePosition accessor methods
		public static int GetCharacterOnePositionMinCount()
		{
			return 1;
		}

		public static int CharacterOnePositionMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCharacterOnePositionMaxCount()
		{
			return 1;
		}

		public static int CharacterOnePositionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCharacterOnePositionCount()
		{
			return DomChildCount(NodeType.Element, "", "CharacterOnePosition");
		}

		public int CharacterOnePositionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CharacterOnePosition");
			}
		}

		public bool HasCharacterOnePosition()
		{
			return HasDomChild(NodeType.Element, "", "CharacterOnePosition");
		}

		public CharacterPositionType NewCharacterOnePosition()
		{
			return new CharacterPositionType();
		}

		public CharacterPositionType GetCharacterOnePositionAt(int index)
		{
			return new CharacterPositionType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CharacterOnePosition", index)));
		}

		public XmlNode GetStartingCharacterOnePositionCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CharacterOnePosition" );
		}

		public XmlNode GetAdvancedCharacterOnePositionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CharacterOnePosition", curNode );
		}

		public CharacterPositionType GetCharacterOnePositionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CharacterPositionType( curNode.InnerText );
		}


		public CharacterPositionType GetCharacterOnePosition()
		{
			return GetCharacterOnePositionAt(0);
		}

		public CharacterPositionType CharacterOnePosition
		{
			get
			{
				return GetCharacterOnePositionAt(0);
			}
		}

		public void RemoveCharacterOnePositionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CharacterOnePosition", index);
		}

		public void RemoveCharacterOnePosition()
		{
			RemoveCharacterOnePositionAt(0);
		}

		public XmlNode AddCharacterOnePosition(CharacterPositionType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CharacterOnePosition", newValue.ToString());
			return null;
		}

		public void InsertCharacterOnePositionAt(CharacterPositionType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CharacterOnePosition", index, newValue.ToString());
		}

		public void ReplaceCharacterOnePositionAt(CharacterPositionType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CharacterOnePosition", index, newValue.ToString());
		}
		#endregion // CharacterOnePosition accessor methods

		#region CharacterOnePosition collection
        public CharacterOnePositionCollection	MyCharacterOnePositions = new CharacterOnePositionCollection( );

        public class CharacterOnePositionCollection: IEnumerable
        {
            RequestMemorableWordCharsResponseType parent;
            public RequestMemorableWordCharsResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CharacterOnePositionEnumerator GetEnumerator() 
			{
				return new CharacterOnePositionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CharacterOnePositionEnumerator: IEnumerator 
        {
			int nIndex;
			RequestMemorableWordCharsResponseType parent;
			public CharacterOnePositionEnumerator(RequestMemorableWordCharsResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CharacterOnePositionCount );
			}
			public CharacterPositionType  Current 
			{
				get 
				{
					return(parent.GetCharacterOnePositionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CharacterOnePosition collection

		#region CharacterTwoPosition accessor methods
		public static int GetCharacterTwoPositionMinCount()
		{
			return 1;
		}

		public static int CharacterTwoPositionMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCharacterTwoPositionMaxCount()
		{
			return 1;
		}

		public static int CharacterTwoPositionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCharacterTwoPositionCount()
		{
			return DomChildCount(NodeType.Element, "", "CharacterTwoPosition");
		}

		public int CharacterTwoPositionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CharacterTwoPosition");
			}
		}

		public bool HasCharacterTwoPosition()
		{
			return HasDomChild(NodeType.Element, "", "CharacterTwoPosition");
		}

		public CharacterPositionType NewCharacterTwoPosition()
		{
			return new CharacterPositionType();
		}

		public CharacterPositionType GetCharacterTwoPositionAt(int index)
		{
			return new CharacterPositionType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CharacterTwoPosition", index)));
		}

		public XmlNode GetStartingCharacterTwoPositionCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CharacterTwoPosition" );
		}

		public XmlNode GetAdvancedCharacterTwoPositionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CharacterTwoPosition", curNode );
		}

		public CharacterPositionType GetCharacterTwoPositionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CharacterPositionType( curNode.InnerText );
		}


		public CharacterPositionType GetCharacterTwoPosition()
		{
			return GetCharacterTwoPositionAt(0);
		}

		public CharacterPositionType CharacterTwoPosition
		{
			get
			{
				return GetCharacterTwoPositionAt(0);
			}
		}

		public void RemoveCharacterTwoPositionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CharacterTwoPosition", index);
		}

		public void RemoveCharacterTwoPosition()
		{
			RemoveCharacterTwoPositionAt(0);
		}

		public XmlNode AddCharacterTwoPosition(CharacterPositionType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CharacterTwoPosition", newValue.ToString());
			return null;
		}

		public void InsertCharacterTwoPositionAt(CharacterPositionType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CharacterTwoPosition", index, newValue.ToString());
		}

		public void ReplaceCharacterTwoPositionAt(CharacterPositionType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CharacterTwoPosition", index, newValue.ToString());
		}
		#endregion // CharacterTwoPosition accessor methods

		#region CharacterTwoPosition collection
        public CharacterTwoPositionCollection	MyCharacterTwoPositions = new CharacterTwoPositionCollection( );

        public class CharacterTwoPositionCollection: IEnumerable
        {
            RequestMemorableWordCharsResponseType parent;
            public RequestMemorableWordCharsResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CharacterTwoPositionEnumerator GetEnumerator() 
			{
				return new CharacterTwoPositionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CharacterTwoPositionEnumerator: IEnumerator 
        {
			int nIndex;
			RequestMemorableWordCharsResponseType parent;
			public CharacterTwoPositionEnumerator(RequestMemorableWordCharsResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CharacterTwoPositionCount );
			}
			public CharacterPositionType  Current 
			{
				get 
				{
					return(parent.GetCharacterTwoPositionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CharacterTwoPosition collection

		#region CitizenPhotograph accessor methods
		public static int GetCitizenPhotographMinCount()
		{
			return 0;
		}

		public static int CitizenPhotographMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetCitizenPhotographMaxCount()
		{
			return 1;
		}

		public static int CitizenPhotographMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCitizenPhotographCount()
		{
			return DomChildCount(NodeType.Element, "", "CitizenPhotograph");
		}

		public int CitizenPhotographCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CitizenPhotograph");
			}
		}

		public bool HasCitizenPhotograph()
		{
			return HasDomChild(NodeType.Element, "", "CitizenPhotograph");
		}

		public core3.PhotoType NewCitizenPhotograph()
		{
			return new core3.PhotoType(domNode.OwnerDocument.CreateElement("CitizenPhotograph", ""));
		}

		public core3.PhotoType GetCitizenPhotographAt(int index)
		{
			return new core3.PhotoType(GetDomChildAt(NodeType.Element, "", "CitizenPhotograph", index));
		}

		public XmlNode GetStartingCitizenPhotographCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CitizenPhotograph" );
		}

		public XmlNode GetAdvancedCitizenPhotographCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CitizenPhotograph", curNode );
		}

		public core3.PhotoType GetCitizenPhotographValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.PhotoType( curNode );
		}


		public core3.PhotoType GetCitizenPhotograph()
		{
			return GetCitizenPhotographAt(0);
		}

		public core3.PhotoType CitizenPhotograph
		{
			get
			{
				return GetCitizenPhotographAt(0);
			}
		}

		public void RemoveCitizenPhotographAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CitizenPhotograph", index);
		}

		public void RemoveCitizenPhotograph()
		{
			RemoveCitizenPhotographAt(0);
		}

		public XmlNode AddCitizenPhotograph(core3.PhotoType newValue)
		{
			return AppendDomElement("", "CitizenPhotograph", newValue);
		}

		public void InsertCitizenPhotographAt(core3.PhotoType newValue, int index)
		{
			InsertDomElementAt("", "CitizenPhotograph", index, newValue);
		}

		public void ReplaceCitizenPhotographAt(core3.PhotoType newValue, int index)
		{
			ReplaceDomElementAt("", "CitizenPhotograph", index, newValue);
		}
		#endregion // CitizenPhotograph accessor methods

		#region CitizenPhotograph collection
        public CitizenPhotographCollection	MyCitizenPhotographs = new CitizenPhotographCollection( );

        public class CitizenPhotographCollection: IEnumerable
        {
            RequestMemorableWordCharsResponseType parent;
            public RequestMemorableWordCharsResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CitizenPhotographEnumerator GetEnumerator() 
			{
				return new CitizenPhotographEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CitizenPhotographEnumerator: IEnumerator 
        {
			int nIndex;
			RequestMemorableWordCharsResponseType parent;
			public CitizenPhotographEnumerator(RequestMemorableWordCharsResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CitizenPhotographCount );
			}
			public core3.PhotoType  Current 
			{
				get 
				{
					return(parent.GetCitizenPhotographAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CitizenPhotograph collection

        private void SetCollectionParents()
        {
            MyGUIDs.Parent = this; 
            MyCharacterOnePositions.Parent = this; 
            MyCharacterTwoPositions.Parent = this; 
            MyCitizenPhotographs.Parent = this; 
	}
}
}
