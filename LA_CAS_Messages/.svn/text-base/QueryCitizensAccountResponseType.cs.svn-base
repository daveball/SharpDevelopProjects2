//
// QueryCitizensAccountResponseType.cs
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class QueryCitizensAccountResponseType : Altova.Xml.Node
	{
		#region Forward constructors

		public QueryCitizensAccountResponseType() : base() { SetCollectionParents(); }

		public QueryCitizensAccountResponseType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public QueryCitizensAccountResponseType(XmlNode node) : base(node) { SetCollectionParents(); }
		public QueryCitizensAccountResponseType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public QueryCitizensAccountResponseType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CitizenDetails" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CitizenDetails", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.CitizenAccountDetailsGUIDType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CurrentProperty" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CurrentProperty", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.CitizenPropertyDetailsType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UserIDDetails" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UserIDDetails", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.UserIDDetailsType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "AuthenticationLevel" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "AuthenticationLevel", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "NationalLevelConsentFlag" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "NationalLevelConsentFlag", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "AccountStatus" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "AccountStatus", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CHINumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CHINumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CitizenPhoto" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CitizenPhoto", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.PhotoType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "MobilePhoneNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "MobilePhoneNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.SimpleUKPhoneNumberType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EmailAddress" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EmailAddress", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new AddressAndPersonalDetails2.EmailStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "PhoneNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "PhoneNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.SimpleUKPhoneNumberType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Level2EnrolmentProofs" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Level2EnrolmentProofs", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.Level2EnrolmentType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "PendingAddressChange" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "PendingAddressChange", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "QueryCitizensAccountResponse");
		}


		#region CitizenDetails accessor methods
		public static int GetCitizenDetailsMinCount()
		{
			return 1;
		}

		public static int CitizenDetailsMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCitizenDetailsMaxCount()
		{
			return 1;
		}

		public static int CitizenDetailsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCitizenDetailsCount()
		{
			return DomChildCount(NodeType.Element, "", "CitizenDetails");
		}

		public int CitizenDetailsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CitizenDetails");
			}
		}

		public bool HasCitizenDetails()
		{
			return HasDomChild(NodeType.Element, "", "CitizenDetails");
		}

		public core3.CitizenAccountDetailsGUIDType NewCitizenDetails()
		{
			return new core3.CitizenAccountDetailsGUIDType(domNode.OwnerDocument.CreateElement("CitizenDetails", ""));
		}

		public core3.CitizenAccountDetailsGUIDType GetCitizenDetailsAt(int index)
		{
			return new core3.CitizenAccountDetailsGUIDType(GetDomChildAt(NodeType.Element, "", "CitizenDetails", index));
		}

		public XmlNode GetStartingCitizenDetailsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CitizenDetails" );
		}

		public XmlNode GetAdvancedCitizenDetailsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CitizenDetails", curNode );
		}

		public core3.CitizenAccountDetailsGUIDType GetCitizenDetailsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.CitizenAccountDetailsGUIDType( curNode );
		}


		public core3.CitizenAccountDetailsGUIDType GetCitizenDetails()
		{
			return GetCitizenDetailsAt(0);
		}

		public core3.CitizenAccountDetailsGUIDType CitizenDetails
		{
			get
			{
				return GetCitizenDetailsAt(0);
			}
		}

		public void RemoveCitizenDetailsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CitizenDetails", index);
		}

		public void RemoveCitizenDetails()
		{
			RemoveCitizenDetailsAt(0);
		}

		public XmlNode AddCitizenDetails(core3.CitizenAccountDetailsGUIDType newValue)
		{
			return AppendDomElement("", "CitizenDetails", newValue);
		}

		public void InsertCitizenDetailsAt(core3.CitizenAccountDetailsGUIDType newValue, int index)
		{
			InsertDomElementAt("", "CitizenDetails", index, newValue);
		}

		public void ReplaceCitizenDetailsAt(core3.CitizenAccountDetailsGUIDType newValue, int index)
		{
			ReplaceDomElementAt("", "CitizenDetails", index, newValue);
		}
		#endregion // CitizenDetails accessor methods

		#region CitizenDetails collection
        public CitizenDetailsCollection	MyCitizenDetailss = new CitizenDetailsCollection( );

        public class CitizenDetailsCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CitizenDetailsEnumerator GetEnumerator() 
			{
				return new CitizenDetailsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CitizenDetailsEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public CitizenDetailsEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CitizenDetailsCount );
			}
			public core3.CitizenAccountDetailsGUIDType  Current 
			{
				get 
				{
					return(parent.GetCitizenDetailsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CitizenDetails collection

		#region CurrentProperty accessor methods
		public static int GetCurrentPropertyMinCount()
		{
			return 1;
		}

		public static int CurrentPropertyMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCurrentPropertyMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int CurrentPropertyMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetCurrentPropertyCount()
		{
			return DomChildCount(NodeType.Element, "", "CurrentProperty");
		}

		public int CurrentPropertyCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CurrentProperty");
			}
		}

		public bool HasCurrentProperty()
		{
			return HasDomChild(NodeType.Element, "", "CurrentProperty");
		}

		public core3.CitizenPropertyDetailsType NewCurrentProperty()
		{
			return new core3.CitizenPropertyDetailsType(domNode.OwnerDocument.CreateElement("CurrentProperty", ""));
		}

		public core3.CitizenPropertyDetailsType GetCurrentPropertyAt(int index)
		{
			return new core3.CitizenPropertyDetailsType(GetDomChildAt(NodeType.Element, "", "CurrentProperty", index));
		}

		public XmlNode GetStartingCurrentPropertyCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CurrentProperty" );
		}

		public XmlNode GetAdvancedCurrentPropertyCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CurrentProperty", curNode );
		}

		public core3.CitizenPropertyDetailsType GetCurrentPropertyValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.CitizenPropertyDetailsType( curNode );
		}


		public core3.CitizenPropertyDetailsType GetCurrentProperty()
		{
			return GetCurrentPropertyAt(0);
		}

		public core3.CitizenPropertyDetailsType CurrentProperty
		{
			get
			{
				return GetCurrentPropertyAt(0);
			}
		}

		public void RemoveCurrentPropertyAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CurrentProperty", index);
		}

		public void RemoveCurrentProperty()
		{
			while (HasCurrentProperty())
				RemoveCurrentPropertyAt(0);
		}

		public XmlNode AddCurrentProperty(core3.CitizenPropertyDetailsType newValue)
		{
			return AppendDomElement("", "CurrentProperty", newValue);
		}

		public void InsertCurrentPropertyAt(core3.CitizenPropertyDetailsType newValue, int index)
		{
			InsertDomElementAt("", "CurrentProperty", index, newValue);
		}

		public void ReplaceCurrentPropertyAt(core3.CitizenPropertyDetailsType newValue, int index)
		{
			ReplaceDomElementAt("", "CurrentProperty", index, newValue);
		}
		#endregion // CurrentProperty accessor methods

		#region CurrentProperty collection
        public CurrentPropertyCollection	MyCurrentPropertys = new CurrentPropertyCollection( );

        public class CurrentPropertyCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CurrentPropertyEnumerator GetEnumerator() 
			{
				return new CurrentPropertyEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CurrentPropertyEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public CurrentPropertyEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CurrentPropertyCount );
			}
			public core3.CitizenPropertyDetailsType  Current 
			{
				get 
				{
					return(parent.GetCurrentPropertyAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CurrentProperty collection

		#region UserIDDetails accessor methods
		public static int GetUserIDDetailsMinCount()
		{
			return 1;
		}

		public static int UserIDDetailsMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUserIDDetailsMaxCount()
		{
			return 1;
		}

		public static int UserIDDetailsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUserIDDetailsCount()
		{
			return DomChildCount(NodeType.Element, "", "UserIDDetails");
		}

		public int UserIDDetailsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UserIDDetails");
			}
		}

		public bool HasUserIDDetails()
		{
			return HasDomChild(NodeType.Element, "", "UserIDDetails");
		}

		public core3.UserIDDetailsType NewUserIDDetails()
		{
			return new core3.UserIDDetailsType(domNode.OwnerDocument.CreateElement("UserIDDetails", ""));
		}

		public core3.UserIDDetailsType GetUserIDDetailsAt(int index)
		{
			return new core3.UserIDDetailsType(GetDomChildAt(NodeType.Element, "", "UserIDDetails", index));
		}

		public XmlNode GetStartingUserIDDetailsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UserIDDetails" );
		}

		public XmlNode GetAdvancedUserIDDetailsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UserIDDetails", curNode );
		}

		public core3.UserIDDetailsType GetUserIDDetailsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UserIDDetailsType( curNode );
		}


		public core3.UserIDDetailsType GetUserIDDetails()
		{
			return GetUserIDDetailsAt(0);
		}

		public core3.UserIDDetailsType UserIDDetails
		{
			get
			{
				return GetUserIDDetailsAt(0);
			}
		}

		public void RemoveUserIDDetailsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UserIDDetails", index);
		}

		public void RemoveUserIDDetails()
		{
			RemoveUserIDDetailsAt(0);
		}

		public XmlNode AddUserIDDetails(core3.UserIDDetailsType newValue)
		{
			return AppendDomElement("", "UserIDDetails", newValue);
		}

		public void InsertUserIDDetailsAt(core3.UserIDDetailsType newValue, int index)
		{
			InsertDomElementAt("", "UserIDDetails", index, newValue);
		}

		public void ReplaceUserIDDetailsAt(core3.UserIDDetailsType newValue, int index)
		{
			ReplaceDomElementAt("", "UserIDDetails", index, newValue);
		}
		#endregion // UserIDDetails accessor methods

		#region UserIDDetails collection
        public UserIDDetailsCollection	MyUserIDDetailss = new UserIDDetailsCollection( );

        public class UserIDDetailsCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UserIDDetailsEnumerator GetEnumerator() 
			{
				return new UserIDDetailsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UserIDDetailsEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public UserIDDetailsEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UserIDDetailsCount );
			}
			public core3.UserIDDetailsType  Current 
			{
				get 
				{
					return(parent.GetUserIDDetailsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UserIDDetails collection

		#region AuthenticationLevel accessor methods
		public static int GetAuthenticationLevelMinCount()
		{
			return 1;
		}

		public static int AuthenticationLevelMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetAuthenticationLevelMaxCount()
		{
			return 1;
		}

		public static int AuthenticationLevelMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAuthenticationLevelCount()
		{
			return DomChildCount(NodeType.Element, "", "AuthenticationLevel");
		}

		public int AuthenticationLevelCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "AuthenticationLevel");
			}
		}

		public bool HasAuthenticationLevel()
		{
			return HasDomChild(NodeType.Element, "", "AuthenticationLevel");
		}

		public core3.AuthenticationLevelType NewAuthenticationLevel()
		{
			return new core3.AuthenticationLevelType();
		}

		public core3.AuthenticationLevelType GetAuthenticationLevelAt(int index)
		{
			return new core3.AuthenticationLevelType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "AuthenticationLevel", index)));
		}

		public XmlNode GetStartingAuthenticationLevelCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "AuthenticationLevel" );
		}

		public XmlNode GetAdvancedAuthenticationLevelCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "AuthenticationLevel", curNode );
		}

		public core3.AuthenticationLevelType GetAuthenticationLevelValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.AuthenticationLevelType( curNode.InnerText );
		}


		public core3.AuthenticationLevelType GetAuthenticationLevel()
		{
			return GetAuthenticationLevelAt(0);
		}

		public core3.AuthenticationLevelType AuthenticationLevel
		{
			get
			{
				return GetAuthenticationLevelAt(0);
			}
		}

		public void RemoveAuthenticationLevelAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "AuthenticationLevel", index);
		}

		public void RemoveAuthenticationLevel()
		{
			RemoveAuthenticationLevelAt(0);
		}

		public XmlNode AddAuthenticationLevel(core3.AuthenticationLevelType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "AuthenticationLevel", newValue.ToString());
			return null;
		}

		public void InsertAuthenticationLevelAt(core3.AuthenticationLevelType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "AuthenticationLevel", index, newValue.ToString());
		}

		public void ReplaceAuthenticationLevelAt(core3.AuthenticationLevelType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "AuthenticationLevel", index, newValue.ToString());
		}
		#endregion // AuthenticationLevel accessor methods

		#region AuthenticationLevel collection
        public AuthenticationLevelCollection	MyAuthenticationLevels = new AuthenticationLevelCollection( );

        public class AuthenticationLevelCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public AuthenticationLevelEnumerator GetEnumerator() 
			{
				return new AuthenticationLevelEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AuthenticationLevelEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public AuthenticationLevelEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AuthenticationLevelCount );
			}
			public core3.AuthenticationLevelType  Current 
			{
				get 
				{
					return(parent.GetAuthenticationLevelAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // AuthenticationLevel collection

		#region NationalLevelConsentFlag accessor methods
		public static int GetNationalLevelConsentFlagMinCount()
		{
			return 1;
		}

		public static int NationalLevelConsentFlagMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNationalLevelConsentFlagMaxCount()
		{
			return 1;
		}

		public static int NationalLevelConsentFlagMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNationalLevelConsentFlagCount()
		{
			return DomChildCount(NodeType.Element, "", "NationalLevelConsentFlag");
		}

		public int NationalLevelConsentFlagCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "NationalLevelConsentFlag");
			}
		}

		public bool HasNationalLevelConsentFlag()
		{
			return HasDomChild(NodeType.Element, "", "NationalLevelConsentFlag");
		}

		public core2.YesNoType NewNationalLevelConsentFlag()
		{
			return new core2.YesNoType();
		}

		public core2.YesNoType GetNationalLevelConsentFlagAt(int index)
		{
			return new core2.YesNoType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "NationalLevelConsentFlag", index)));
		}

		public XmlNode GetStartingNationalLevelConsentFlagCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "NationalLevelConsentFlag" );
		}

		public XmlNode GetAdvancedNationalLevelConsentFlagCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "NationalLevelConsentFlag", curNode );
		}

		public core2.YesNoType GetNationalLevelConsentFlagValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.YesNoType( curNode.InnerText );
		}


		public core2.YesNoType GetNationalLevelConsentFlag()
		{
			return GetNationalLevelConsentFlagAt(0);
		}

		public core2.YesNoType NationalLevelConsentFlag
		{
			get
			{
				return GetNationalLevelConsentFlagAt(0);
			}
		}

		public void RemoveNationalLevelConsentFlagAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "NationalLevelConsentFlag", index);
		}

		public void RemoveNationalLevelConsentFlag()
		{
			RemoveNationalLevelConsentFlagAt(0);
		}

		public XmlNode AddNationalLevelConsentFlag(core2.YesNoType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "NationalLevelConsentFlag", newValue.ToString());
			return null;
		}

		public void InsertNationalLevelConsentFlagAt(core2.YesNoType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "NationalLevelConsentFlag", index, newValue.ToString());
		}

		public void ReplaceNationalLevelConsentFlagAt(core2.YesNoType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "NationalLevelConsentFlag", index, newValue.ToString());
		}
		#endregion // NationalLevelConsentFlag accessor methods

		#region NationalLevelConsentFlag collection
        public NationalLevelConsentFlagCollection	MyNationalLevelConsentFlags = new NationalLevelConsentFlagCollection( );

        public class NationalLevelConsentFlagCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NationalLevelConsentFlagEnumerator GetEnumerator() 
			{
				return new NationalLevelConsentFlagEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NationalLevelConsentFlagEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public NationalLevelConsentFlagEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NationalLevelConsentFlagCount );
			}
			public core2.YesNoType  Current 
			{
				get 
				{
					return(parent.GetNationalLevelConsentFlagAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // NationalLevelConsentFlag collection

		#region AccountStatus accessor methods
		public static int GetAccountStatusMinCount()
		{
			return 1;
		}

		public static int AccountStatusMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetAccountStatusMaxCount()
		{
			return 1;
		}

		public static int AccountStatusMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAccountStatusCount()
		{
			return DomChildCount(NodeType.Element, "", "AccountStatus");
		}

		public int AccountStatusCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "AccountStatus");
			}
		}

		public bool HasAccountStatus()
		{
			return HasDomChild(NodeType.Element, "", "AccountStatus");
		}

		public core3.AccountStatusType NewAccountStatus()
		{
			return new core3.AccountStatusType();
		}

		public core3.AccountStatusType GetAccountStatusAt(int index)
		{
			return new core3.AccountStatusType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "AccountStatus", index)));
		}

		public XmlNode GetStartingAccountStatusCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "AccountStatus" );
		}

		public XmlNode GetAdvancedAccountStatusCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "AccountStatus", curNode );
		}

		public core3.AccountStatusType GetAccountStatusValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.AccountStatusType( curNode.InnerText );
		}


		public core3.AccountStatusType GetAccountStatus()
		{
			return GetAccountStatusAt(0);
		}

		public core3.AccountStatusType AccountStatus
		{
			get
			{
				return GetAccountStatusAt(0);
			}
		}

		public void RemoveAccountStatusAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "AccountStatus", index);
		}

		public void RemoveAccountStatus()
		{
			RemoveAccountStatusAt(0);
		}

		public XmlNode AddAccountStatus(core3.AccountStatusType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "AccountStatus", newValue.ToString());
			return null;
		}

		public void InsertAccountStatusAt(core3.AccountStatusType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "AccountStatus", index, newValue.ToString());
		}

		public void ReplaceAccountStatusAt(core3.AccountStatusType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "AccountStatus", index, newValue.ToString());
		}
		#endregion // AccountStatus accessor methods

		#region AccountStatus collection
        public AccountStatusCollection	MyAccountStatuss = new AccountStatusCollection( );

        public class AccountStatusCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public AccountStatusEnumerator GetEnumerator() 
			{
				return new AccountStatusEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AccountStatusEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public AccountStatusEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AccountStatusCount );
			}
			public core3.AccountStatusType  Current 
			{
				get 
				{
					return(parent.GetAccountStatusAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // AccountStatus collection

		#region CHINumber accessor methods
		public static int GetCHINumberMinCount()
		{
			return 0;
		}

		public static int CHINumberMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetCHINumberMaxCount()
		{
			return 1;
		}

		public static int CHINumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCHINumberCount()
		{
			return DomChildCount(NodeType.Element, "", "CHINumber");
		}

		public int CHINumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CHINumber");
			}
		}

		public bool HasCHINumber()
		{
			return HasDomChild(NodeType.Element, "", "CHINumber");
		}

		public core3.CHINumberType NewCHINumber()
		{
			return new core3.CHINumberType();
		}

		public core3.CHINumberType GetCHINumberAt(int index)
		{
			return new core3.CHINumberType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CHINumber", index)));
		}

		public XmlNode GetStartingCHINumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CHINumber" );
		}

		public XmlNode GetAdvancedCHINumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CHINumber", curNode );
		}

		public core3.CHINumberType GetCHINumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.CHINumberType( curNode.InnerText );
		}


		public core3.CHINumberType GetCHINumber()
		{
			return GetCHINumberAt(0);
		}

		public core3.CHINumberType CHINumber
		{
			get
			{
				return GetCHINumberAt(0);
			}
		}

		public void RemoveCHINumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CHINumber", index);
		}

		public void RemoveCHINumber()
		{
			RemoveCHINumberAt(0);
		}

		public XmlNode AddCHINumber(core3.CHINumberType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CHINumber", newValue.ToString());
			return null;
		}

		public void InsertCHINumberAt(core3.CHINumberType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CHINumber", index, newValue.ToString());
		}

		public void ReplaceCHINumberAt(core3.CHINumberType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CHINumber", index, newValue.ToString());
		}
		#endregion // CHINumber accessor methods

		#region CHINumber collection
        public CHINumberCollection	MyCHINumbers = new CHINumberCollection( );

        public class CHINumberCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CHINumberEnumerator GetEnumerator() 
			{
				return new CHINumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CHINumberEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public CHINumberEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CHINumberCount );
			}
			public core3.CHINumberType  Current 
			{
				get 
				{
					return(parent.GetCHINumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CHINumber collection

		#region CitizenPhoto accessor methods
		public static int GetCitizenPhotoMinCount()
		{
			return 0;
		}

		public static int CitizenPhotoMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetCitizenPhotoMaxCount()
		{
			return 1;
		}

		public static int CitizenPhotoMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCitizenPhotoCount()
		{
			return DomChildCount(NodeType.Element, "", "CitizenPhoto");
		}

		public int CitizenPhotoCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CitizenPhoto");
			}
		}

		public bool HasCitizenPhoto()
		{
			return HasDomChild(NodeType.Element, "", "CitizenPhoto");
		}

		public core3.PhotoType NewCitizenPhoto()
		{
			return new core3.PhotoType(domNode.OwnerDocument.CreateElement("CitizenPhoto", ""));
		}

		public core3.PhotoType GetCitizenPhotoAt(int index)
		{
			return new core3.PhotoType(GetDomChildAt(NodeType.Element, "", "CitizenPhoto", index));
		}

		public XmlNode GetStartingCitizenPhotoCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CitizenPhoto" );
		}

		public XmlNode GetAdvancedCitizenPhotoCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CitizenPhoto", curNode );
		}

		public core3.PhotoType GetCitizenPhotoValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.PhotoType( curNode );
		}


		public core3.PhotoType GetCitizenPhoto()
		{
			return GetCitizenPhotoAt(0);
		}

		public core3.PhotoType CitizenPhoto
		{
			get
			{
				return GetCitizenPhotoAt(0);
			}
		}

		public void RemoveCitizenPhotoAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CitizenPhoto", index);
		}

		public void RemoveCitizenPhoto()
		{
			RemoveCitizenPhotoAt(0);
		}

		public XmlNode AddCitizenPhoto(core3.PhotoType newValue)
		{
			return AppendDomElement("", "CitizenPhoto", newValue);
		}

		public void InsertCitizenPhotoAt(core3.PhotoType newValue, int index)
		{
			InsertDomElementAt("", "CitizenPhoto", index, newValue);
		}

		public void ReplaceCitizenPhotoAt(core3.PhotoType newValue, int index)
		{
			ReplaceDomElementAt("", "CitizenPhoto", index, newValue);
		}
		#endregion // CitizenPhoto accessor methods

		#region CitizenPhoto collection
        public CitizenPhotoCollection	MyCitizenPhotos = new CitizenPhotoCollection( );

        public class CitizenPhotoCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CitizenPhotoEnumerator GetEnumerator() 
			{
				return new CitizenPhotoEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CitizenPhotoEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public CitizenPhotoEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CitizenPhotoCount );
			}
			public core3.PhotoType  Current 
			{
				get 
				{
					return(parent.GetCitizenPhotoAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CitizenPhoto collection

		#region MobilePhoneNumber accessor methods
		public static int GetMobilePhoneNumberMinCount()
		{
			return 0;
		}

		public static int MobilePhoneNumberMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetMobilePhoneNumberMaxCount()
		{
			return 1;
		}

		public static int MobilePhoneNumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMobilePhoneNumberCount()
		{
			return DomChildCount(NodeType.Element, "", "MobilePhoneNumber");
		}

		public int MobilePhoneNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "MobilePhoneNumber");
			}
		}

		public bool HasMobilePhoneNumber()
		{
			return HasDomChild(NodeType.Element, "", "MobilePhoneNumber");
		}

		public core3.SimpleUKPhoneNumberType NewMobilePhoneNumber()
		{
			return new core3.SimpleUKPhoneNumberType(domNode.OwnerDocument.CreateElement("MobilePhoneNumber", ""));
		}

		public core3.SimpleUKPhoneNumberType GetMobilePhoneNumberAt(int index)
		{
			return new core3.SimpleUKPhoneNumberType(GetDomChildAt(NodeType.Element, "", "MobilePhoneNumber", index));
		}

		public XmlNode GetStartingMobilePhoneNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "MobilePhoneNumber" );
		}

		public XmlNode GetAdvancedMobilePhoneNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "MobilePhoneNumber", curNode );
		}

		public core3.SimpleUKPhoneNumberType GetMobilePhoneNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.SimpleUKPhoneNumberType( curNode );
		}


		public core3.SimpleUKPhoneNumberType GetMobilePhoneNumber()
		{
			return GetMobilePhoneNumberAt(0);
		}

		public core3.SimpleUKPhoneNumberType MobilePhoneNumber
		{
			get
			{
				return GetMobilePhoneNumberAt(0);
			}
		}

		public void RemoveMobilePhoneNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "MobilePhoneNumber", index);
		}

		public void RemoveMobilePhoneNumber()
		{
			RemoveMobilePhoneNumberAt(0);
		}

		public XmlNode AddMobilePhoneNumber(core3.SimpleUKPhoneNumberType newValue)
		{
			return AppendDomElement("", "MobilePhoneNumber", newValue);
		}

		public void InsertMobilePhoneNumberAt(core3.SimpleUKPhoneNumberType newValue, int index)
		{
			InsertDomElementAt("", "MobilePhoneNumber", index, newValue);
		}

		public void ReplaceMobilePhoneNumberAt(core3.SimpleUKPhoneNumberType newValue, int index)
		{
			ReplaceDomElementAt("", "MobilePhoneNumber", index, newValue);
		}
		#endregion // MobilePhoneNumber accessor methods

		#region MobilePhoneNumber collection
        public MobilePhoneNumberCollection	MyMobilePhoneNumbers = new MobilePhoneNumberCollection( );

        public class MobilePhoneNumberCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public MobilePhoneNumberEnumerator GetEnumerator() 
			{
				return new MobilePhoneNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MobilePhoneNumberEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public MobilePhoneNumberEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MobilePhoneNumberCount );
			}
			public core3.SimpleUKPhoneNumberType  Current 
			{
				get 
				{
					return(parent.GetMobilePhoneNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MobilePhoneNumber collection

		#region EmailAddress accessor methods
		public static int GetEmailAddressMinCount()
		{
			return 0;
		}

		public static int EmailAddressMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetEmailAddressMaxCount()
		{
			return 1;
		}

		public static int EmailAddressMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEmailAddressCount()
		{
			return DomChildCount(NodeType.Element, "", "EmailAddress");
		}

		public int EmailAddressCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EmailAddress");
			}
		}

		public bool HasEmailAddress()
		{
			return HasDomChild(NodeType.Element, "", "EmailAddress");
		}

		public AddressAndPersonalDetails2.EmailStructure NewEmailAddress()
		{
			return new AddressAndPersonalDetails2.EmailStructure(domNode.OwnerDocument.CreateElement("EmailAddress", ""));
		}

		public AddressAndPersonalDetails2.EmailStructure GetEmailAddressAt(int index)
		{
			return new AddressAndPersonalDetails2.EmailStructure(GetDomChildAt(NodeType.Element, "", "EmailAddress", index));
		}

		public XmlNode GetStartingEmailAddressCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EmailAddress" );
		}

		public XmlNode GetAdvancedEmailAddressCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EmailAddress", curNode );
		}

		public AddressAndPersonalDetails2.EmailStructure GetEmailAddressValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AddressAndPersonalDetails2.EmailStructure( curNode );
		}


		public AddressAndPersonalDetails2.EmailStructure GetEmailAddress()
		{
			return GetEmailAddressAt(0);
		}

		public AddressAndPersonalDetails2.EmailStructure EmailAddress
		{
			get
			{
				return GetEmailAddressAt(0);
			}
		}

		public void RemoveEmailAddressAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EmailAddress", index);
		}

		public void RemoveEmailAddress()
		{
			RemoveEmailAddressAt(0);
		}

		public XmlNode AddEmailAddress(AddressAndPersonalDetails2.EmailStructure newValue)
		{
			return AppendDomElement("", "EmailAddress", newValue);
		}

		public void InsertEmailAddressAt(AddressAndPersonalDetails2.EmailStructure newValue, int index)
		{
			InsertDomElementAt("", "EmailAddress", index, newValue);
		}

		public void ReplaceEmailAddressAt(AddressAndPersonalDetails2.EmailStructure newValue, int index)
		{
			ReplaceDomElementAt("", "EmailAddress", index, newValue);
		}
		#endregion // EmailAddress accessor methods

		#region EmailAddress collection
        public EmailAddressCollection	MyEmailAddresss = new EmailAddressCollection( );

        public class EmailAddressCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EmailAddressEnumerator GetEnumerator() 
			{
				return new EmailAddressEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EmailAddressEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public EmailAddressEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EmailAddressCount );
			}
			public AddressAndPersonalDetails2.EmailStructure  Current 
			{
				get 
				{
					return(parent.GetEmailAddressAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EmailAddress collection

		#region PhoneNumber accessor methods
		public static int GetPhoneNumberMinCount()
		{
			return 0;
		}

		public static int PhoneNumberMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPhoneNumberMaxCount()
		{
			return 1;
		}

		public static int PhoneNumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPhoneNumberCount()
		{
			return DomChildCount(NodeType.Element, "", "PhoneNumber");
		}

		public int PhoneNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "PhoneNumber");
			}
		}

		public bool HasPhoneNumber()
		{
			return HasDomChild(NodeType.Element, "", "PhoneNumber");
		}

		public core3.SimpleUKPhoneNumberType NewPhoneNumber()
		{
			return new core3.SimpleUKPhoneNumberType(domNode.OwnerDocument.CreateElement("PhoneNumber", ""));
		}

		public core3.SimpleUKPhoneNumberType GetPhoneNumberAt(int index)
		{
			return new core3.SimpleUKPhoneNumberType(GetDomChildAt(NodeType.Element, "", "PhoneNumber", index));
		}

		public XmlNode GetStartingPhoneNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "PhoneNumber" );
		}

		public XmlNode GetAdvancedPhoneNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "PhoneNumber", curNode );
		}

		public core3.SimpleUKPhoneNumberType GetPhoneNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.SimpleUKPhoneNumberType( curNode );
		}


		public core3.SimpleUKPhoneNumberType GetPhoneNumber()
		{
			return GetPhoneNumberAt(0);
		}

		public core3.SimpleUKPhoneNumberType PhoneNumber
		{
			get
			{
				return GetPhoneNumberAt(0);
			}
		}

		public void RemovePhoneNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "PhoneNumber", index);
		}

		public void RemovePhoneNumber()
		{
			RemovePhoneNumberAt(0);
		}

		public XmlNode AddPhoneNumber(core3.SimpleUKPhoneNumberType newValue)
		{
			return AppendDomElement("", "PhoneNumber", newValue);
		}

		public void InsertPhoneNumberAt(core3.SimpleUKPhoneNumberType newValue, int index)
		{
			InsertDomElementAt("", "PhoneNumber", index, newValue);
		}

		public void ReplacePhoneNumberAt(core3.SimpleUKPhoneNumberType newValue, int index)
		{
			ReplaceDomElementAt("", "PhoneNumber", index, newValue);
		}
		#endregion // PhoneNumber accessor methods

		#region PhoneNumber collection
        public PhoneNumberCollection	MyPhoneNumbers = new PhoneNumberCollection( );

        public class PhoneNumberCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PhoneNumberEnumerator GetEnumerator() 
			{
				return new PhoneNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PhoneNumberEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public PhoneNumberEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PhoneNumberCount );
			}
			public core3.SimpleUKPhoneNumberType  Current 
			{
				get 
				{
					return(parent.GetPhoneNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PhoneNumber collection

		#region Level2EnrolmentProofs accessor methods
		public static int GetLevel2EnrolmentProofsMinCount()
		{
			return 0;
		}

		public static int Level2EnrolmentProofsMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetLevel2EnrolmentProofsMaxCount()
		{
			return 1;
		}

		public static int Level2EnrolmentProofsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLevel2EnrolmentProofsCount()
		{
			return DomChildCount(NodeType.Element, "", "Level2EnrolmentProofs");
		}

		public int Level2EnrolmentProofsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Level2EnrolmentProofs");
			}
		}

		public bool HasLevel2EnrolmentProofs()
		{
			return HasDomChild(NodeType.Element, "", "Level2EnrolmentProofs");
		}

		public core3.Level2EnrolmentType NewLevel2EnrolmentProofs()
		{
			return new core3.Level2EnrolmentType(domNode.OwnerDocument.CreateElement("Level2EnrolmentProofs", ""));
		}

		public core3.Level2EnrolmentType GetLevel2EnrolmentProofsAt(int index)
		{
			return new core3.Level2EnrolmentType(GetDomChildAt(NodeType.Element, "", "Level2EnrolmentProofs", index));
		}

		public XmlNode GetStartingLevel2EnrolmentProofsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Level2EnrolmentProofs" );
		}

		public XmlNode GetAdvancedLevel2EnrolmentProofsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Level2EnrolmentProofs", curNode );
		}

		public core3.Level2EnrolmentType GetLevel2EnrolmentProofsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.Level2EnrolmentType( curNode );
		}


		public core3.Level2EnrolmentType GetLevel2EnrolmentProofs()
		{
			return GetLevel2EnrolmentProofsAt(0);
		}

		public core3.Level2EnrolmentType Level2EnrolmentProofs
		{
			get
			{
				return GetLevel2EnrolmentProofsAt(0);
			}
		}

		public void RemoveLevel2EnrolmentProofsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Level2EnrolmentProofs", index);
		}

		public void RemoveLevel2EnrolmentProofs()
		{
			RemoveLevel2EnrolmentProofsAt(0);
		}

		public XmlNode AddLevel2EnrolmentProofs(core3.Level2EnrolmentType newValue)
		{
			return AppendDomElement("", "Level2EnrolmentProofs", newValue);
		}

		public void InsertLevel2EnrolmentProofsAt(core3.Level2EnrolmentType newValue, int index)
		{
			InsertDomElementAt("", "Level2EnrolmentProofs", index, newValue);
		}

		public void ReplaceLevel2EnrolmentProofsAt(core3.Level2EnrolmentType newValue, int index)
		{
			ReplaceDomElementAt("", "Level2EnrolmentProofs", index, newValue);
		}
		#endregion // Level2EnrolmentProofs accessor methods

		#region Level2EnrolmentProofs collection
        public Level2EnrolmentProofsCollection	MyLevel2EnrolmentProofss = new Level2EnrolmentProofsCollection( );

        public class Level2EnrolmentProofsCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Level2EnrolmentProofsEnumerator GetEnumerator() 
			{
				return new Level2EnrolmentProofsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Level2EnrolmentProofsEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public Level2EnrolmentProofsEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Level2EnrolmentProofsCount );
			}
			public core3.Level2EnrolmentType  Current 
			{
				get 
				{
					return(parent.GetLevel2EnrolmentProofsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Level2EnrolmentProofs collection

		#region PendingAddressChange accessor methods
		public static int GetPendingAddressChangeMinCount()
		{
			return 1;
		}

		public static int PendingAddressChangeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPendingAddressChangeMaxCount()
		{
			return 1;
		}

		public static int PendingAddressChangeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPendingAddressChangeCount()
		{
			return DomChildCount(NodeType.Element, "", "PendingAddressChange");
		}

		public int PendingAddressChangeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "PendingAddressChange");
			}
		}

		public bool HasPendingAddressChange()
		{
			return HasDomChild(NodeType.Element, "", "PendingAddressChange");
		}

		public core2.YesNoType NewPendingAddressChange()
		{
			return new core2.YesNoType();
		}

		public core2.YesNoType GetPendingAddressChangeAt(int index)
		{
			return new core2.YesNoType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "PendingAddressChange", index)));
		}

		public XmlNode GetStartingPendingAddressChangeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "PendingAddressChange" );
		}

		public XmlNode GetAdvancedPendingAddressChangeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "PendingAddressChange", curNode );
		}

		public core2.YesNoType GetPendingAddressChangeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.YesNoType( curNode.InnerText );
		}


		public core2.YesNoType GetPendingAddressChange()
		{
			return GetPendingAddressChangeAt(0);
		}

		public core2.YesNoType PendingAddressChange
		{
			get
			{
				return GetPendingAddressChangeAt(0);
			}
		}

		public void RemovePendingAddressChangeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "PendingAddressChange", index);
		}

		public void RemovePendingAddressChange()
		{
			RemovePendingAddressChangeAt(0);
		}

		public XmlNode AddPendingAddressChange(core2.YesNoType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "PendingAddressChange", newValue.ToString());
			return null;
		}

		public void InsertPendingAddressChangeAt(core2.YesNoType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "PendingAddressChange", index, newValue.ToString());
		}

		public void ReplacePendingAddressChangeAt(core2.YesNoType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "PendingAddressChange", index, newValue.ToString());
		}
		#endregion // PendingAddressChange accessor methods

		#region PendingAddressChange collection
        public PendingAddressChangeCollection	MyPendingAddressChanges = new PendingAddressChangeCollection( );

        public class PendingAddressChangeCollection: IEnumerable
        {
            QueryCitizensAccountResponseType parent;
            public QueryCitizensAccountResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PendingAddressChangeEnumerator GetEnumerator() 
			{
				return new PendingAddressChangeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PendingAddressChangeEnumerator: IEnumerator 
        {
			int nIndex;
			QueryCitizensAccountResponseType parent;
			public PendingAddressChangeEnumerator(QueryCitizensAccountResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PendingAddressChangeCount );
			}
			public core2.YesNoType  Current 
			{
				get 
				{
					return(parent.GetPendingAddressChangeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PendingAddressChange collection

        private void SetCollectionParents()
        {
            MyCitizenDetailss.Parent = this; 
            MyCurrentPropertys.Parent = this; 
            MyUserIDDetailss.Parent = this; 
            MyAuthenticationLevels.Parent = this; 
            MyNationalLevelConsentFlags.Parent = this; 
            MyAccountStatuss.Parent = this; 
            MyCHINumbers.Parent = this; 
            MyCitizenPhotos.Parent = this; 
            MyMobilePhoneNumbers.Parent = this; 
            MyEmailAddresss.Parent = this; 
            MyPhoneNumbers.Parent = this; 
            MyLevel2EnrolmentProofss.Parent = this; 
            MyPendingAddressChanges.Parent = this; 
	}
}
}
