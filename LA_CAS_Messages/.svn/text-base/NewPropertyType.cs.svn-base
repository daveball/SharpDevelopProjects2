//
// NewPropertyType.cs
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class NewPropertyType : Altova.Xml.Node
	{
		#region Forward constructors

		public NewPropertyType() : base() { SetCollectionParents(); }

		public NewPropertyType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public NewPropertyType(XmlNode node) : base(node) { SetCollectionParents(); }
		public NewPropertyType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public NewPropertyType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UPRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UPRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CASAddressGUID" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CASAddressGUID", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "NewProperty");
		}


		#region UPRN accessor methods
		public static int GetUPRNMinCount()
		{
			return 1;
		}

		public static int UPRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUPRNMaxCount()
		{
			return 1;
		}

		public static int UPRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUPRNCount()
		{
			return DomChildCount(NodeType.Element, "", "UPRN");
		}

		public int UPRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UPRN");
			}
		}

		public bool HasUPRN()
		{
			return HasDomChild(NodeType.Element, "", "UPRN");
		}

		public core3.UPRNType2 NewUPRN()
		{
			return new core3.UPRNType2();
		}

		public core3.UPRNType2 GetUPRNAt(int index)
		{
			return new core3.UPRNType2(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UPRN", index)));
		}

		public XmlNode GetStartingUPRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UPRN" );
		}

		public XmlNode GetAdvancedUPRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UPRN", curNode );
		}

		public core3.UPRNType2 GetUPRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UPRNType2( curNode.InnerText );
		}


		public core3.UPRNType2 GetUPRN()
		{
			return GetUPRNAt(0);
		}

		public core3.UPRNType2 UPRN
		{
			get
			{
				return GetUPRNAt(0);
			}
		}

		public void RemoveUPRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UPRN", index);
		}

		public void RemoveUPRN()
		{
			RemoveUPRNAt(0);
		}

		public XmlNode AddUPRN(core3.UPRNType2 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UPRN", newValue.ToString());
			return null;
		}

		public void InsertUPRNAt(core3.UPRNType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UPRN", index, newValue.ToString());
		}

		public void ReplaceUPRNAt(core3.UPRNType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UPRN", index, newValue.ToString());
		}
		#endregion // UPRN accessor methods

		#region UPRN collection
        public UPRNCollection	MyUPRNs = new UPRNCollection( );

        public class UPRNCollection: IEnumerable
        {
            NewPropertyType parent;
            public NewPropertyType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UPRNEnumerator GetEnumerator() 
			{
				return new UPRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UPRNEnumerator: IEnumerator 
        {
			int nIndex;
			NewPropertyType parent;
			public UPRNEnumerator(NewPropertyType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UPRNCount );
			}
			public core3.UPRNType2  Current 
			{
				get 
				{
					return(parent.GetUPRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UPRN collection

		#region CASAddressGUID accessor methods
		public static int GetCASAddressGUIDMinCount()
		{
			return 1;
		}

		public static int CASAddressGUIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCASAddressGUIDMaxCount()
		{
			return 1;
		}

		public static int CASAddressGUIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCASAddressGUIDCount()
		{
			return DomChildCount(NodeType.Element, "", "CASAddressGUID");
		}

		public int CASAddressGUIDCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CASAddressGUID");
			}
		}

		public bool HasCASAddressGUID()
		{
			return HasDomChild(NodeType.Element, "", "CASAddressGUID");
		}

		public core3.AddressGUIDType NewCASAddressGUID()
		{
			return new core3.AddressGUIDType();
		}

		public core3.AddressGUIDType GetCASAddressGUIDAt(int index)
		{
			return new core3.AddressGUIDType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CASAddressGUID", index)));
		}

		public XmlNode GetStartingCASAddressGUIDCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CASAddressGUID" );
		}

		public XmlNode GetAdvancedCASAddressGUIDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CASAddressGUID", curNode );
		}

		public core3.AddressGUIDType GetCASAddressGUIDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.AddressGUIDType( curNode.InnerText );
		}


		public core3.AddressGUIDType GetCASAddressGUID()
		{
			return GetCASAddressGUIDAt(0);
		}

		public core3.AddressGUIDType CASAddressGUID
		{
			get
			{
				return GetCASAddressGUIDAt(0);
			}
		}

		public void RemoveCASAddressGUIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CASAddressGUID", index);
		}

		public void RemoveCASAddressGUID()
		{
			RemoveCASAddressGUIDAt(0);
		}

		public XmlNode AddCASAddressGUID(core3.AddressGUIDType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CASAddressGUID", newValue.ToString());
			return null;
		}

		public void InsertCASAddressGUIDAt(core3.AddressGUIDType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CASAddressGUID", index, newValue.ToString());
		}

		public void ReplaceCASAddressGUIDAt(core3.AddressGUIDType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CASAddressGUID", index, newValue.ToString());
		}
		#endregion // CASAddressGUID accessor methods

		#region CASAddressGUID collection
        public CASAddressGUIDCollection	MyCASAddressGUIDs = new CASAddressGUIDCollection( );

        public class CASAddressGUIDCollection: IEnumerable
        {
            NewPropertyType parent;
            public NewPropertyType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CASAddressGUIDEnumerator GetEnumerator() 
			{
				return new CASAddressGUIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CASAddressGUIDEnumerator: IEnumerator 
        {
			int nIndex;
			NewPropertyType parent;
			public CASAddressGUIDEnumerator(NewPropertyType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CASAddressGUIDCount );
			}
			public core3.AddressGUIDType  Current 
			{
				get 
				{
					return(parent.GetCASAddressGUIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CASAddressGUID collection

        private void SetCollectionParents()
        {
            MyUPRNs.Parent = this; 
            MyCASAddressGUIDs.Parent = this; 
	}
}
}
