//
// CitizenAddressChangeRequestType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class CitizenAddressChangeRequestType : Altova.Xml.Node
	{
		#region Forward constructors

		public CitizenAddressChangeRequestType() : base() { SetCollectionParents(); }

		public CitizenAddressChangeRequestType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public CitizenAddressChangeRequestType(XmlNode node) : base(node) { SetCollectionParents(); }
		public CitizenAddressChangeRequestType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public CitizenAddressChangeRequestType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UCRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UCRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CASCitizenGUID" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CASCitizenGUID", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "NewUPRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "NewUPRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "NewCASAddressGUID" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "NewCASAddressGUID", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "AddressDetails" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "AddressDetails", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new core3.PropertyDetails(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EffectiveDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EffectiveDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "CitizenAddressChangeRequest");
		}


		#region UCRN accessor methods
		public static int GetUCRNMinCount()
		{
			return 1;
		}

		public static int UCRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUCRNMaxCount()
		{
			return 1;
		}

		public static int UCRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUCRNCount()
		{
			return DomChildCount(NodeType.Element, "", "UCRN");
		}

		public int UCRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UCRN");
			}
		}

		public bool HasUCRN()
		{
			return HasDomChild(NodeType.Element, "", "UCRN");
		}

		public core3.UCRNType NewUCRN()
		{
			return new core3.UCRNType();
		}

		public core3.UCRNType GetUCRNAt(int index)
		{
			return new core3.UCRNType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UCRN", index)));
		}

		public XmlNode GetStartingUCRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UCRN" );
		}

		public XmlNode GetAdvancedUCRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UCRN", curNode );
		}

		public core3.UCRNType GetUCRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UCRNType( curNode.InnerText );
		}


		public core3.UCRNType GetUCRN()
		{
			return GetUCRNAt(0);
		}

		public core3.UCRNType UCRN
		{
			get
			{
				return GetUCRNAt(0);
			}
		}

		public void RemoveUCRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UCRN", index);
		}

		public void RemoveUCRN()
		{
			RemoveUCRNAt(0);
		}

		public XmlNode AddUCRN(core3.UCRNType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UCRN", newValue.ToString());
			return null;
		}

		public void InsertUCRNAt(core3.UCRNType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}

		public void ReplaceUCRNAt(core3.UCRNType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}
		#endregion // UCRN accessor methods

		#region UCRN collection
        public UCRNCollection	MyUCRNs = new UCRNCollection( );

        public class UCRNCollection: IEnumerable
        {
            CitizenAddressChangeRequestType parent;
            public CitizenAddressChangeRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UCRNEnumerator GetEnumerator() 
			{
				return new UCRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UCRNEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenAddressChangeRequestType parent;
			public UCRNEnumerator(CitizenAddressChangeRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UCRNCount );
			}
			public core3.UCRNType  Current 
			{
				get 
				{
					return(parent.GetUCRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UCRN collection

		#region CASCitizenGUID accessor methods
		public static int GetCASCitizenGUIDMinCount()
		{
			return 1;
		}

		public static int CASCitizenGUIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCASCitizenGUIDMaxCount()
		{
			return 1;
		}

		public static int CASCitizenGUIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCASCitizenGUIDCount()
		{
			return DomChildCount(NodeType.Element, "", "CASCitizenGUID");
		}

		public int CASCitizenGUIDCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CASCitizenGUID");
			}
		}

		public bool HasCASCitizenGUID()
		{
			return HasDomChild(NodeType.Element, "", "CASCitizenGUID");
		}

		public core3.CitizenGUIDType NewCASCitizenGUID()
		{
			return new core3.CitizenGUIDType();
		}

		public core3.CitizenGUIDType GetCASCitizenGUIDAt(int index)
		{
			return new core3.CitizenGUIDType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CASCitizenGUID", index)));
		}

		public XmlNode GetStartingCASCitizenGUIDCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CASCitizenGUID" );
		}

		public XmlNode GetAdvancedCASCitizenGUIDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CASCitizenGUID", curNode );
		}

		public core3.CitizenGUIDType GetCASCitizenGUIDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.CitizenGUIDType( curNode.InnerText );
		}


		public core3.CitizenGUIDType GetCASCitizenGUID()
		{
			return GetCASCitizenGUIDAt(0);
		}

		public core3.CitizenGUIDType CASCitizenGUID
		{
			get
			{
				return GetCASCitizenGUIDAt(0);
			}
		}

		public void RemoveCASCitizenGUIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CASCitizenGUID", index);
		}

		public void RemoveCASCitizenGUID()
		{
			RemoveCASCitizenGUIDAt(0);
		}

		public XmlNode AddCASCitizenGUID(core3.CitizenGUIDType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CASCitizenGUID", newValue.ToString());
			return null;
		}

		public void InsertCASCitizenGUIDAt(core3.CitizenGUIDType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CASCitizenGUID", index, newValue.ToString());
		}

		public void ReplaceCASCitizenGUIDAt(core3.CitizenGUIDType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CASCitizenGUID", index, newValue.ToString());
		}
		#endregion // CASCitizenGUID accessor methods

		#region CASCitizenGUID collection
        public CASCitizenGUIDCollection	MyCASCitizenGUIDs = new CASCitizenGUIDCollection( );

        public class CASCitizenGUIDCollection: IEnumerable
        {
            CitizenAddressChangeRequestType parent;
            public CitizenAddressChangeRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CASCitizenGUIDEnumerator GetEnumerator() 
			{
				return new CASCitizenGUIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CASCitizenGUIDEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenAddressChangeRequestType parent;
			public CASCitizenGUIDEnumerator(CitizenAddressChangeRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CASCitizenGUIDCount );
			}
			public core3.CitizenGUIDType  Current 
			{
				get 
				{
					return(parent.GetCASCitizenGUIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CASCitizenGUID collection

		#region NewUPRN accessor methods
		public static int GetNewUPRNMinCount()
		{
			return 1;
		}

		public static int NewUPRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNewUPRNMaxCount()
		{
			return 1;
		}

		public static int NewUPRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNewUPRNCount()
		{
			return DomChildCount(NodeType.Element, "", "NewUPRN");
		}

		public int NewUPRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "NewUPRN");
			}
		}

		public bool HasNewUPRN()
		{
			return HasDomChild(NodeType.Element, "", "NewUPRN");
		}

		public core3.UPRNType2 NewNewUPRN()
		{
			return new core3.UPRNType2();
		}

		public core3.UPRNType2 GetNewUPRNAt(int index)
		{
			return new core3.UPRNType2(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "NewUPRN", index)));
		}

		public XmlNode GetStartingNewUPRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "NewUPRN" );
		}

		public XmlNode GetAdvancedNewUPRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "NewUPRN", curNode );
		}

		public core3.UPRNType2 GetNewUPRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UPRNType2( curNode.InnerText );
		}


		public core3.UPRNType2 GetNewUPRN()
		{
			return GetNewUPRNAt(0);
		}

		public core3.UPRNType2 NewUPRN
		{
			get
			{
				return GetNewUPRNAt(0);
			}
		}

		public void RemoveNewUPRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "NewUPRN", index);
		}

		public void RemoveNewUPRN()
		{
			RemoveNewUPRNAt(0);
		}

		public XmlNode AddNewUPRN(core3.UPRNType2 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "NewUPRN", newValue.ToString());
			return null;
		}

		public void InsertNewUPRNAt(core3.UPRNType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "NewUPRN", index, newValue.ToString());
		}

		public void ReplaceNewUPRNAt(core3.UPRNType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "NewUPRN", index, newValue.ToString());
		}
		#endregion // NewUPRN accessor methods

		#region NewUPRN collection
        public NewUPRNCollection	MyNewUPRNs = new NewUPRNCollection( );

        public class NewUPRNCollection: IEnumerable
        {
            CitizenAddressChangeRequestType parent;
            public CitizenAddressChangeRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NewUPRNEnumerator GetEnumerator() 
			{
				return new NewUPRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NewUPRNEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenAddressChangeRequestType parent;
			public NewUPRNEnumerator(CitizenAddressChangeRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NewUPRNCount );
			}
			public core3.UPRNType2  Current 
			{
				get 
				{
					return(parent.GetNewUPRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // NewUPRN collection

		#region NewCASAddressGUID accessor methods
		public static int GetNewCASAddressGUIDMinCount()
		{
			return 1;
		}

		public static int NewCASAddressGUIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNewCASAddressGUIDMaxCount()
		{
			return 1;
		}

		public static int NewCASAddressGUIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNewCASAddressGUIDCount()
		{
			return DomChildCount(NodeType.Element, "", "NewCASAddressGUID");
		}

		public int NewCASAddressGUIDCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "NewCASAddressGUID");
			}
		}

		public bool HasNewCASAddressGUID()
		{
			return HasDomChild(NodeType.Element, "", "NewCASAddressGUID");
		}

		public core3.AddressGUIDType NewNewCASAddressGUID()
		{
			return new core3.AddressGUIDType();
		}

		public core3.AddressGUIDType GetNewCASAddressGUIDAt(int index)
		{
			return new core3.AddressGUIDType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "NewCASAddressGUID", index)));
		}

		public XmlNode GetStartingNewCASAddressGUIDCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "NewCASAddressGUID" );
		}

		public XmlNode GetAdvancedNewCASAddressGUIDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "NewCASAddressGUID", curNode );
		}

		public core3.AddressGUIDType GetNewCASAddressGUIDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.AddressGUIDType( curNode.InnerText );
		}


		public core3.AddressGUIDType GetNewCASAddressGUID()
		{
			return GetNewCASAddressGUIDAt(0);
		}

		public core3.AddressGUIDType NewCASAddressGUID
		{
			get
			{
				return GetNewCASAddressGUIDAt(0);
			}
		}

		public void RemoveNewCASAddressGUIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "NewCASAddressGUID", index);
		}

		public void RemoveNewCASAddressGUID()
		{
			RemoveNewCASAddressGUIDAt(0);
		}

		public XmlNode AddNewCASAddressGUID(core3.AddressGUIDType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "NewCASAddressGUID", newValue.ToString());
			return null;
		}

		public void InsertNewCASAddressGUIDAt(core3.AddressGUIDType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "NewCASAddressGUID", index, newValue.ToString());
		}

		public void ReplaceNewCASAddressGUIDAt(core3.AddressGUIDType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "NewCASAddressGUID", index, newValue.ToString());
		}
		#endregion // NewCASAddressGUID accessor methods

		#region NewCASAddressGUID collection
        public NewCASAddressGUIDCollection	MyNewCASAddressGUIDs = new NewCASAddressGUIDCollection( );

        public class NewCASAddressGUIDCollection: IEnumerable
        {
            CitizenAddressChangeRequestType parent;
            public CitizenAddressChangeRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NewCASAddressGUIDEnumerator GetEnumerator() 
			{
				return new NewCASAddressGUIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NewCASAddressGUIDEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenAddressChangeRequestType parent;
			public NewCASAddressGUIDEnumerator(CitizenAddressChangeRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NewCASAddressGUIDCount );
			}
			public core3.AddressGUIDType  Current 
			{
				get 
				{
					return(parent.GetNewCASAddressGUIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // NewCASAddressGUID collection

		#region AddressDetails accessor methods
		public static int GetAddressDetailsMinCount()
		{
			return 1;
		}

		public static int AddressDetailsMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetAddressDetailsMaxCount()
		{
			return 1;
		}

		public static int AddressDetailsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAddressDetailsCount()
		{
			return DomChildCount(NodeType.Element, "", "AddressDetails");
		}

		public int AddressDetailsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "AddressDetails");
			}
		}

		public bool HasAddressDetails()
		{
			return HasDomChild(NodeType.Element, "", "AddressDetails");
		}

		public core3.PropertyDetails NewAddressDetails()
		{
			return new core3.PropertyDetails(domNode.OwnerDocument.CreateElement("AddressDetails", ""));
		}

		public core3.PropertyDetails GetAddressDetailsAt(int index)
		{
			return new core3.PropertyDetails(GetDomChildAt(NodeType.Element, "", "AddressDetails", index));
		}

		public XmlNode GetStartingAddressDetailsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "AddressDetails" );
		}

		public XmlNode GetAdvancedAddressDetailsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "AddressDetails", curNode );
		}

		public core3.PropertyDetails GetAddressDetailsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.PropertyDetails( curNode );
		}


		public core3.PropertyDetails GetAddressDetails()
		{
			return GetAddressDetailsAt(0);
		}

		public core3.PropertyDetails AddressDetails
		{
			get
			{
				return GetAddressDetailsAt(0);
			}
		}

		public void RemoveAddressDetailsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "AddressDetails", index);
		}

		public void RemoveAddressDetails()
		{
			RemoveAddressDetailsAt(0);
		}

		public XmlNode AddAddressDetails(core3.PropertyDetails newValue)
		{
			return AppendDomElement("", "AddressDetails", newValue);
		}

		public void InsertAddressDetailsAt(core3.PropertyDetails newValue, int index)
		{
			InsertDomElementAt("", "AddressDetails", index, newValue);
		}

		public void ReplaceAddressDetailsAt(core3.PropertyDetails newValue, int index)
		{
			ReplaceDomElementAt("", "AddressDetails", index, newValue);
		}
		#endregion // AddressDetails accessor methods

		#region AddressDetails collection
        public AddressDetailsCollection	MyAddressDetailss = new AddressDetailsCollection( );

        public class AddressDetailsCollection: IEnumerable
        {
            CitizenAddressChangeRequestType parent;
            public CitizenAddressChangeRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public AddressDetailsEnumerator GetEnumerator() 
			{
				return new AddressDetailsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AddressDetailsEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenAddressChangeRequestType parent;
			public AddressDetailsEnumerator(CitizenAddressChangeRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AddressDetailsCount );
			}
			public core3.PropertyDetails  Current 
			{
				get 
				{
					return(parent.GetAddressDetailsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // AddressDetails collection

		#region EffectiveDate accessor methods
		public static int GetEffectiveDateMinCount()
		{
			return 1;
		}

		public static int EffectiveDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEffectiveDateMaxCount()
		{
			return 1;
		}

		public static int EffectiveDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEffectiveDateCount()
		{
			return DomChildCount(NodeType.Element, "", "EffectiveDate");
		}

		public int EffectiveDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EffectiveDate");
			}
		}

		public bool HasEffectiveDate()
		{
			return HasDomChild(NodeType.Element, "", "EffectiveDate");
		}

		public SchemaDate NewEffectiveDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetEffectiveDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "EffectiveDate", index)));
		}

		public XmlNode GetStartingEffectiveDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EffectiveDate" );
		}

		public XmlNode GetAdvancedEffectiveDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EffectiveDate", curNode );
		}

		public SchemaDate GetEffectiveDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetEffectiveDate()
		{
			return GetEffectiveDateAt(0);
		}

		public SchemaDate EffectiveDate
		{
			get
			{
				return GetEffectiveDateAt(0);
			}
		}

		public void RemoveEffectiveDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EffectiveDate", index);
		}

		public void RemoveEffectiveDate()
		{
			RemoveEffectiveDateAt(0);
		}

		public XmlNode AddEffectiveDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "EffectiveDate", newValue.ToString());
			return null;
		}

		public void InsertEffectiveDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "EffectiveDate", index, newValue.ToString());
		}

		public void ReplaceEffectiveDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "EffectiveDate", index, newValue.ToString());
		}
		#endregion // EffectiveDate accessor methods

		#region EffectiveDate collection
        public EffectiveDateCollection	MyEffectiveDates = new EffectiveDateCollection( );

        public class EffectiveDateCollection: IEnumerable
        {
            CitizenAddressChangeRequestType parent;
            public CitizenAddressChangeRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EffectiveDateEnumerator GetEnumerator() 
			{
				return new EffectiveDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EffectiveDateEnumerator: IEnumerator 
        {
			int nIndex;
			CitizenAddressChangeRequestType parent;
			public EffectiveDateEnumerator(CitizenAddressChangeRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EffectiveDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetEffectiveDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EffectiveDate collection

        private void SetCollectionParents()
        {
            MyUCRNs.Parent = this; 
            MyCASCitizenGUIDs.Parent = this; 
            MyNewUPRNs.Parent = this; 
            MyNewCASAddressGUIDs.Parent = this; 
            MyAddressDetailss.Parent = this; 
            MyEffectiveDates.Parent = this; 
	}
}
}
