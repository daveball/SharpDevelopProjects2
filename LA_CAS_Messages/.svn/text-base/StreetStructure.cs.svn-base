//
// StreetStructure.cs
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages.bs76662
{
	public class StreetStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public StreetStructure() : base() { SetCollectionParents(); }

		public StreetStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public StreetStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public StreetStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public StreetStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "usrn" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "usrn", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new CoordinateStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new CoordinateStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new StreetDescriptiveIdentifierStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetAlias" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetAlias", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new StreetDescriptiveIdentifierStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new StreetCrossReferencesType(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "bs7666:StreetStructure");
		}


		#region usrn accessor methods
		public static int GetusrnMinCount()
		{
			return 0;
		}

		public static int usrnMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetusrnMaxCount()
		{
			return 1;
		}

		public static int usrnMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetusrnCount()
		{
			return DomChildCount(NodeType.Attribute, "", "usrn");
		}

		public int usrnCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "usrn");
			}
		}

		public bool Hasusrn()
		{
			return HasDomChild(NodeType.Attribute, "", "usrn");
		}

		public USRNtype Newusrn()
		{
			return new USRNtype();
		}

		public USRNtype GetusrnAt(int index)
		{
			return new USRNtype(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "usrn", index)));
		}

		public XmlNode GetStartingusrnCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "usrn" );
		}

		public XmlNode GetAdvancedusrnCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "usrn", curNode );
		}

		public USRNtype GetusrnValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new USRNtype( curNode.Value );
		}


		public USRNtype Getusrn()
		{
			return GetusrnAt(0);
		}

		public USRNtype usrn
		{
			get
			{
				return GetusrnAt(0);
			}
		}

		public void RemoveusrnAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "usrn", index);
		}

		public void Removeusrn()
		{
			RemoveusrnAt(0);
		}

		public XmlNode Addusrn(USRNtype newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "usrn", newValue.ToString());
			return null;
		}

		public void InsertusrnAt(USRNtype newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "usrn", index, newValue.ToString());
		}

		public void ReplaceusrnAt(USRNtype newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "usrn", index, newValue.ToString());
		}
		#endregion // usrn accessor methods

		#region usrn collection
        public usrnCollection	Myusrns = new usrnCollection( );

        public class usrnCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public usrnEnumerator GetEnumerator() 
			{
				return new usrnEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class usrnEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public usrnEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.usrnCount );
			}
			public USRNtype  Current 
			{
				get 
				{
					return(parent.GetusrnAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // usrn collection

		#region StreetReferenceType accessor methods
		public static int GetStreetReferenceTypeMinCount()
		{
			return 1;
		}

		public static int StreetReferenceTypeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStreetReferenceTypeMaxCount()
		{
			return 1;
		}

		public static int StreetReferenceTypeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStreetReferenceTypeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType");
		}

		public int StreetReferenceTypeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType");
			}
		}

		public bool HasStreetReferenceType()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType");
		}

		public StreetReferenceTypeType NewStreetReferenceType()
		{
			return new StreetReferenceTypeType();
		}

		public StreetReferenceTypeType GetStreetReferenceTypeAt(int index)
		{
			return new StreetReferenceTypeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType", index)));
		}

		public XmlNode GetStartingStreetReferenceTypeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType" );
		}

		public XmlNode GetAdvancedStreetReferenceTypeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType", curNode );
		}

		public StreetReferenceTypeType GetStreetReferenceTypeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StreetReferenceTypeType( curNode.InnerText );
		}


		public StreetReferenceTypeType GetStreetReferenceType()
		{
			return GetStreetReferenceTypeAt(0);
		}

		public StreetReferenceTypeType StreetReferenceType
		{
			get
			{
				return GetStreetReferenceTypeAt(0);
			}
		}

		public void RemoveStreetReferenceTypeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType", index);
		}

		public void RemoveStreetReferenceType()
		{
			RemoveStreetReferenceTypeAt(0);
		}

		public XmlNode AddStreetReferenceType(StreetReferenceTypeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType", newValue.ToString());
			return null;
		}

		public void InsertStreetReferenceTypeAt(StreetReferenceTypeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType", index, newValue.ToString());
		}

		public void ReplaceStreetReferenceTypeAt(StreetReferenceTypeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetReferenceType", index, newValue.ToString());
		}
		#endregion // StreetReferenceType accessor methods

		#region StreetReferenceType collection
        public StreetReferenceTypeCollection	MyStreetReferenceTypes = new StreetReferenceTypeCollection( );

        public class StreetReferenceTypeCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StreetReferenceTypeEnumerator GetEnumerator() 
			{
				return new StreetReferenceTypeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StreetReferenceTypeEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public StreetReferenceTypeEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StreetReferenceTypeCount );
			}
			public StreetReferenceTypeType  Current 
			{
				get 
				{
					return(parent.GetStreetReferenceTypeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StreetReferenceType collection

		#region StartCoordinate accessor methods
		public static int GetStartCoordinateMinCount()
		{
			return 1;
		}

		public static int StartCoordinateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStartCoordinateMaxCount()
		{
			return 1;
		}

		public static int StartCoordinateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStartCoordinateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate");
		}

		public int StartCoordinateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate");
			}
		}

		public bool HasStartCoordinate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate");
		}

		public CoordinateStructure NewStartCoordinate()
		{
			return new CoordinateStructure(domNode.OwnerDocument.CreateElement("StartCoordinate", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public CoordinateStructure GetStartCoordinateAt(int index)
		{
			return new CoordinateStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", index));
		}

		public XmlNode GetStartingStartCoordinateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate" );
		}

		public XmlNode GetAdvancedStartCoordinateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", curNode );
		}

		public CoordinateStructure GetStartCoordinateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CoordinateStructure( curNode );
		}


		public CoordinateStructure GetStartCoordinate()
		{
			return GetStartCoordinateAt(0);
		}

		public CoordinateStructure StartCoordinate
		{
			get
			{
				return GetStartCoordinateAt(0);
			}
		}

		public void RemoveStartCoordinateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", index);
		}

		public void RemoveStartCoordinate()
		{
			RemoveStartCoordinateAt(0);
		}

		public XmlNode AddStartCoordinate(CoordinateStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", newValue);
		}

		public void InsertStartCoordinateAt(CoordinateStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", index, newValue);
		}

		public void ReplaceStartCoordinateAt(CoordinateStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StartCoordinate", index, newValue);
		}
		#endregion // StartCoordinate accessor methods

		#region StartCoordinate collection
        public StartCoordinateCollection	MyStartCoordinates = new StartCoordinateCollection( );

        public class StartCoordinateCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StartCoordinateEnumerator GetEnumerator() 
			{
				return new StartCoordinateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StartCoordinateEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public StartCoordinateEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StartCoordinateCount );
			}
			public CoordinateStructure  Current 
			{
				get 
				{
					return(parent.GetStartCoordinateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StartCoordinate collection

		#region EndCoordinate accessor methods
		public static int GetEndCoordinateMinCount()
		{
			return 1;
		}

		public static int EndCoordinateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEndCoordinateMaxCount()
		{
			return 1;
		}

		public static int EndCoordinateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEndCoordinateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate");
		}

		public int EndCoordinateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate");
			}
		}

		public bool HasEndCoordinate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate");
		}

		public CoordinateStructure NewEndCoordinate()
		{
			return new CoordinateStructure(domNode.OwnerDocument.CreateElement("EndCoordinate", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public CoordinateStructure GetEndCoordinateAt(int index)
		{
			return new CoordinateStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", index));
		}

		public XmlNode GetStartingEndCoordinateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate" );
		}

		public XmlNode GetAdvancedEndCoordinateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", curNode );
		}

		public CoordinateStructure GetEndCoordinateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CoordinateStructure( curNode );
		}


		public CoordinateStructure GetEndCoordinate()
		{
			return GetEndCoordinateAt(0);
		}

		public CoordinateStructure EndCoordinate
		{
			get
			{
				return GetEndCoordinateAt(0);
			}
		}

		public void RemoveEndCoordinateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", index);
		}

		public void RemoveEndCoordinate()
		{
			RemoveEndCoordinateAt(0);
		}

		public XmlNode AddEndCoordinate(CoordinateStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", newValue);
		}

		public void InsertEndCoordinateAt(CoordinateStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", index, newValue);
		}

		public void ReplaceEndCoordinateAt(CoordinateStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "EndCoordinate", index, newValue);
		}
		#endregion // EndCoordinate accessor methods

		#region EndCoordinate collection
        public EndCoordinateCollection	MyEndCoordinates = new EndCoordinateCollection( );

        public class EndCoordinateCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public EndCoordinateEnumerator GetEnumerator() 
			{
				return new EndCoordinateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EndCoordinateEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public EndCoordinateEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EndCoordinateCount );
			}
			public CoordinateStructure  Current 
			{
				get 
				{
					return(parent.GetEndCoordinateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EndCoordinate collection

		#region Tolerance accessor methods
		public static int GetToleranceMinCount()
		{
			return 1;
		}

		public static int ToleranceMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetToleranceMaxCount()
		{
			return 1;
		}

		public static int ToleranceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetToleranceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance");
		}

		public int ToleranceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance");
			}
		}

		public bool HasTolerance()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance");
		}

		public ToleranceType NewTolerance()
		{
			return new ToleranceType();
		}

		public ToleranceType GetToleranceAt(int index)
		{
			return new ToleranceType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", index)));
		}

		public XmlNode GetStartingToleranceCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance" );
		}

		public XmlNode GetAdvancedToleranceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", curNode );
		}

		public ToleranceType GetToleranceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ToleranceType( curNode.InnerText );
		}


		public ToleranceType GetTolerance()
		{
			return GetToleranceAt(0);
		}

		public ToleranceType Tolerance
		{
			get
			{
				return GetToleranceAt(0);
			}
		}

		public void RemoveToleranceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", index);
		}

		public void RemoveTolerance()
		{
			RemoveToleranceAt(0);
		}

		public XmlNode AddTolerance(ToleranceType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", newValue.ToString());
			return null;
		}

		public void InsertToleranceAt(ToleranceType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", index, newValue.ToString());
		}

		public void ReplaceToleranceAt(ToleranceType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Tolerance", index, newValue.ToString());
		}
		#endregion // Tolerance accessor methods

		#region Tolerance collection
        public ToleranceCollection	MyTolerances = new ToleranceCollection( );

        public class ToleranceCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public ToleranceEnumerator GetEnumerator() 
			{
				return new ToleranceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ToleranceEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public ToleranceEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ToleranceCount );
			}
			public ToleranceType  Current 
			{
				get 
				{
					return(parent.GetToleranceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Tolerance collection

		#region StreetVersionNumber accessor methods
		public static int GetStreetVersionNumberMinCount()
		{
			return 1;
		}

		public static int StreetVersionNumberMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStreetVersionNumberMaxCount()
		{
			return 1;
		}

		public static int StreetVersionNumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStreetVersionNumberCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber");
		}

		public int StreetVersionNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber");
			}
		}

		public bool HasStreetVersionNumber()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber");
		}

		public VersionNumberType NewStreetVersionNumber()
		{
			return new VersionNumberType();
		}

		public VersionNumberType GetStreetVersionNumberAt(int index)
		{
			return new VersionNumberType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber", index)));
		}

		public XmlNode GetStartingStreetVersionNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber" );
		}

		public XmlNode GetAdvancedStreetVersionNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber", curNode );
		}

		public VersionNumberType GetStreetVersionNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new VersionNumberType( curNode.InnerText );
		}


		public VersionNumberType GetStreetVersionNumber()
		{
			return GetStreetVersionNumberAt(0);
		}

		public VersionNumberType StreetVersionNumber
		{
			get
			{
				return GetStreetVersionNumberAt(0);
			}
		}

		public void RemoveStreetVersionNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber", index);
		}

		public void RemoveStreetVersionNumber()
		{
			RemoveStreetVersionNumberAt(0);
		}

		public XmlNode AddStreetVersionNumber(VersionNumberType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber", newValue.ToString());
			return null;
		}

		public void InsertStreetVersionNumberAt(VersionNumberType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber", index, newValue.ToString());
		}

		public void ReplaceStreetVersionNumberAt(VersionNumberType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetVersionNumber", index, newValue.ToString());
		}
		#endregion // StreetVersionNumber accessor methods

		#region StreetVersionNumber collection
        public StreetVersionNumberCollection	MyStreetVersionNumbers = new StreetVersionNumberCollection( );

        public class StreetVersionNumberCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StreetVersionNumberEnumerator GetEnumerator() 
			{
				return new StreetVersionNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StreetVersionNumberEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public StreetVersionNumberEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StreetVersionNumberCount );
			}
			public VersionNumberType  Current 
			{
				get 
				{
					return(parent.GetStreetVersionNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StreetVersionNumber collection

		#region StreetEntryDate accessor methods
		public static int GetStreetEntryDateMinCount()
		{
			return 1;
		}

		public static int StreetEntryDateMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStreetEntryDateMaxCount()
		{
			return 1;
		}

		public static int StreetEntryDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStreetEntryDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate");
		}

		public int StreetEntryDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate");
			}
		}

		public bool HasStreetEntryDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate");
		}

		public SchemaDate NewStreetEntryDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetStreetEntryDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate", index)));
		}

		public XmlNode GetStartingStreetEntryDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate" );
		}

		public XmlNode GetAdvancedStreetEntryDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate", curNode );
		}

		public SchemaDate GetStreetEntryDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetStreetEntryDate()
		{
			return GetStreetEntryDateAt(0);
		}

		public SchemaDate StreetEntryDate
		{
			get
			{
				return GetStreetEntryDateAt(0);
			}
		}

		public void RemoveStreetEntryDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate", index);
		}

		public void RemoveStreetEntryDate()
		{
			RemoveStreetEntryDateAt(0);
		}

		public XmlNode AddStreetEntryDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate", newValue.ToString());
			return null;
		}

		public void InsertStreetEntryDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate", index, newValue.ToString());
		}

		public void ReplaceStreetEntryDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetEntryDate", index, newValue.ToString());
		}
		#endregion // StreetEntryDate accessor methods

		#region StreetEntryDate collection
        public StreetEntryDateCollection	MyStreetEntryDates = new StreetEntryDateCollection( );

        public class StreetEntryDateCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StreetEntryDateEnumerator GetEnumerator() 
			{
				return new StreetEntryDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StreetEntryDateEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public StreetEntryDateEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StreetEntryDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetStreetEntryDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StreetEntryDate collection

		#region StreetClosureDate accessor methods
		public static int GetStreetClosureDateMinCount()
		{
			return 0;
		}

		public static int StreetClosureDateMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetStreetClosureDateMaxCount()
		{
			return 1;
		}

		public static int StreetClosureDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStreetClosureDateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate");
		}

		public int StreetClosureDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate");
			}
		}

		public bool HasStreetClosureDate()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate");
		}

		public SchemaDate NewStreetClosureDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetStreetClosureDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate", index)));
		}

		public XmlNode GetStartingStreetClosureDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate" );
		}

		public XmlNode GetAdvancedStreetClosureDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate", curNode );
		}

		public SchemaDate GetStreetClosureDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetStreetClosureDate()
		{
			return GetStreetClosureDateAt(0);
		}

		public SchemaDate StreetClosureDate
		{
			get
			{
				return GetStreetClosureDateAt(0);
			}
		}

		public void RemoveStreetClosureDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate", index);
		}

		public void RemoveStreetClosureDate()
		{
			RemoveStreetClosureDateAt(0);
		}

		public XmlNode AddStreetClosureDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate", newValue.ToString());
			return null;
		}

		public void InsertStreetClosureDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate", index, newValue.ToString());
		}

		public void ReplaceStreetClosureDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetClosureDate", index, newValue.ToString());
		}
		#endregion // StreetClosureDate accessor methods

		#region StreetClosureDate collection
        public StreetClosureDateCollection	MyStreetClosureDates = new StreetClosureDateCollection( );

        public class StreetClosureDateCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StreetClosureDateEnumerator GetEnumerator() 
			{
				return new StreetClosureDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StreetClosureDateEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public StreetClosureDateEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StreetClosureDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetStreetClosureDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StreetClosureDate collection

		#region ResponsibleAuthority accessor methods
		public static int GetResponsibleAuthorityMinCount()
		{
			return 1;
		}

		public static int ResponsibleAuthorityMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetResponsibleAuthorityMaxCount()
		{
			return 1;
		}

		public static int ResponsibleAuthorityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetResponsibleAuthorityCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority");
		}

		public int ResponsibleAuthorityCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority");
			}
		}

		public bool HasResponsibleAuthority()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority");
		}

		public CustodianCodeType NewResponsibleAuthority()
		{
			return new CustodianCodeType();
		}

		public CustodianCodeType GetResponsibleAuthorityAt(int index)
		{
			return new CustodianCodeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority", index)));
		}

		public XmlNode GetStartingResponsibleAuthorityCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority" );
		}

		public XmlNode GetAdvancedResponsibleAuthorityCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority", curNode );
		}

		public CustodianCodeType GetResponsibleAuthorityValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new CustodianCodeType( curNode.InnerText );
		}


		public CustodianCodeType GetResponsibleAuthority()
		{
			return GetResponsibleAuthorityAt(0);
		}

		public CustodianCodeType ResponsibleAuthority
		{
			get
			{
				return GetResponsibleAuthorityAt(0);
			}
		}

		public void RemoveResponsibleAuthorityAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority", index);
		}

		public void RemoveResponsibleAuthority()
		{
			RemoveResponsibleAuthorityAt(0);
		}

		public XmlNode AddResponsibleAuthority(CustodianCodeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority", newValue.ToString());
			return null;
		}

		public void InsertResponsibleAuthorityAt(CustodianCodeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority", index, newValue.ToString());
		}

		public void ReplaceResponsibleAuthorityAt(CustodianCodeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "ResponsibleAuthority", index, newValue.ToString());
		}
		#endregion // ResponsibleAuthority accessor methods

		#region ResponsibleAuthority collection
        public ResponsibleAuthorityCollection	MyResponsibleAuthoritys = new ResponsibleAuthorityCollection( );

        public class ResponsibleAuthorityCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public ResponsibleAuthorityEnumerator GetEnumerator() 
			{
				return new ResponsibleAuthorityEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ResponsibleAuthorityEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public ResponsibleAuthorityEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ResponsibleAuthorityCount );
			}
			public CustodianCodeType  Current 
			{
				get 
				{
					return(parent.GetResponsibleAuthorityAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ResponsibleAuthority collection

		#region DescriptiveIdentifier accessor methods
		public static int GetDescriptiveIdentifierMinCount()
		{
			return 1;
		}

		public static int DescriptiveIdentifierMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetDescriptiveIdentifierMaxCount()
		{
			return 1;
		}

		public static int DescriptiveIdentifierMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDescriptiveIdentifierCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier");
		}

		public int DescriptiveIdentifierCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier");
			}
		}

		public bool HasDescriptiveIdentifier()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier");
		}

		public StreetDescriptiveIdentifierStructure NewDescriptiveIdentifier()
		{
			return new StreetDescriptiveIdentifierStructure(domNode.OwnerDocument.CreateElement("DescriptiveIdentifier", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public StreetDescriptiveIdentifierStructure GetDescriptiveIdentifierAt(int index)
		{
			return new StreetDescriptiveIdentifierStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier", index));
		}

		public XmlNode GetStartingDescriptiveIdentifierCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier" );
		}

		public XmlNode GetAdvancedDescriptiveIdentifierCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier", curNode );
		}

		public StreetDescriptiveIdentifierStructure GetDescriptiveIdentifierValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StreetDescriptiveIdentifierStructure( curNode );
		}


		public StreetDescriptiveIdentifierStructure GetDescriptiveIdentifier()
		{
			return GetDescriptiveIdentifierAt(0);
		}

		public StreetDescriptiveIdentifierStructure DescriptiveIdentifier
		{
			get
			{
				return GetDescriptiveIdentifierAt(0);
			}
		}

		public void RemoveDescriptiveIdentifierAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier", index);
		}

		public void RemoveDescriptiveIdentifier()
		{
			RemoveDescriptiveIdentifierAt(0);
		}

		public XmlNode AddDescriptiveIdentifier(StreetDescriptiveIdentifierStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier", newValue);
		}

		public void InsertDescriptiveIdentifierAt(StreetDescriptiveIdentifierStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier", index, newValue);
		}

		public void ReplaceDescriptiveIdentifierAt(StreetDescriptiveIdentifierStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "DescriptiveIdentifier", index, newValue);
		}
		#endregion // DescriptiveIdentifier accessor methods

		#region DescriptiveIdentifier collection
        public DescriptiveIdentifierCollection	MyDescriptiveIdentifiers = new DescriptiveIdentifierCollection( );

        public class DescriptiveIdentifierCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public DescriptiveIdentifierEnumerator GetEnumerator() 
			{
				return new DescriptiveIdentifierEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DescriptiveIdentifierEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public DescriptiveIdentifierEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DescriptiveIdentifierCount );
			}
			public StreetDescriptiveIdentifierStructure  Current 
			{
				get 
				{
					return(parent.GetDescriptiveIdentifierAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DescriptiveIdentifier collection

		#region StreetAlias accessor methods
		public static int GetStreetAliasMinCount()
		{
			return 0;
		}

		public static int StreetAliasMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetStreetAliasMaxCount()
		{
			return 1;
		}

		public static int StreetAliasMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStreetAliasCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetAlias");
		}

		public int StreetAliasCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetAlias");
			}
		}

		public bool HasStreetAlias()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetAlias");
		}

		public StreetDescriptiveIdentifierStructure NewStreetAlias()
		{
			return new StreetDescriptiveIdentifierStructure(domNode.OwnerDocument.CreateElement("StreetAlias", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public StreetDescriptiveIdentifierStructure GetStreetAliasAt(int index)
		{
			return new StreetDescriptiveIdentifierStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetAlias", index));
		}

		public XmlNode GetStartingStreetAliasCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetAlias" );
		}

		public XmlNode GetAdvancedStreetAliasCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetAlias", curNode );
		}

		public StreetDescriptiveIdentifierStructure GetStreetAliasValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StreetDescriptiveIdentifierStructure( curNode );
		}


		public StreetDescriptiveIdentifierStructure GetStreetAlias()
		{
			return GetStreetAliasAt(0);
		}

		public StreetDescriptiveIdentifierStructure StreetAlias
		{
			get
			{
				return GetStreetAliasAt(0);
			}
		}

		public void RemoveStreetAliasAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetAlias", index);
		}

		public void RemoveStreetAlias()
		{
			RemoveStreetAliasAt(0);
		}

		public XmlNode AddStreetAlias(StreetDescriptiveIdentifierStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "StreetAlias", newValue);
		}

		public void InsertStreetAliasAt(StreetDescriptiveIdentifierStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StreetAlias", index, newValue);
		}

		public void ReplaceStreetAliasAt(StreetDescriptiveIdentifierStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StreetAlias", index, newValue);
		}
		#endregion // StreetAlias accessor methods

		#region StreetAlias collection
        public StreetAliasCollection	MyStreetAliass = new StreetAliasCollection( );

        public class StreetAliasCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StreetAliasEnumerator GetEnumerator() 
			{
				return new StreetAliasEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StreetAliasEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public StreetAliasEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StreetAliasCount );
			}
			public StreetDescriptiveIdentifierStructure  Current 
			{
				get 
				{
					return(parent.GetStreetAliasAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StreetAlias collection

		#region StreetCrossReferences accessor methods
		public static int GetStreetCrossReferencesMinCount()
		{
			return 0;
		}

		public static int StreetCrossReferencesMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetStreetCrossReferencesMaxCount()
		{
			return 1;
		}

		public static int StreetCrossReferencesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStreetCrossReferencesCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences");
		}

		public int StreetCrossReferencesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences");
			}
		}

		public bool HasStreetCrossReferences()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences");
		}

		public StreetCrossReferencesType NewStreetCrossReferences()
		{
			return new StreetCrossReferencesType(domNode.OwnerDocument.CreateElement("StreetCrossReferences", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public StreetCrossReferencesType GetStreetCrossReferencesAt(int index)
		{
			return new StreetCrossReferencesType(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences", index));
		}

		public XmlNode GetStartingStreetCrossReferencesCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences" );
		}

		public XmlNode GetAdvancedStreetCrossReferencesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences", curNode );
		}

		public StreetCrossReferencesType GetStreetCrossReferencesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StreetCrossReferencesType( curNode );
		}


		public StreetCrossReferencesType GetStreetCrossReferences()
		{
			return GetStreetCrossReferencesAt(0);
		}

		public StreetCrossReferencesType StreetCrossReferences
		{
			get
			{
				return GetStreetCrossReferencesAt(0);
			}
		}

		public void RemoveStreetCrossReferencesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences", index);
		}

		public void RemoveStreetCrossReferences()
		{
			RemoveStreetCrossReferencesAt(0);
		}

		public XmlNode AddStreetCrossReferences(StreetCrossReferencesType newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences", newValue);
		}

		public void InsertStreetCrossReferencesAt(StreetCrossReferencesType newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences", index, newValue);
		}

		public void ReplaceStreetCrossReferencesAt(StreetCrossReferencesType newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StreetCrossReferences", index, newValue);
		}
		#endregion // StreetCrossReferences accessor methods

		#region StreetCrossReferences collection
        public StreetCrossReferencesCollection	MyStreetCrossReferencess = new StreetCrossReferencesCollection( );

        public class StreetCrossReferencesCollection: IEnumerable
        {
            StreetStructure parent;
            public StreetStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StreetCrossReferencesEnumerator GetEnumerator() 
			{
				return new StreetCrossReferencesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StreetCrossReferencesEnumerator: IEnumerator 
        {
			int nIndex;
			StreetStructure parent;
			public StreetCrossReferencesEnumerator(StreetStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StreetCrossReferencesCount );
			}
			public StreetCrossReferencesType  Current 
			{
				get 
				{
					return(parent.GetStreetCrossReferencesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StreetCrossReferences collection

        private void SetCollectionParents()
        {
            Myusrns.Parent = this; 
            MyStreetReferenceTypes.Parent = this; 
            MyStartCoordinates.Parent = this; 
            MyEndCoordinates.Parent = this; 
            MyTolerances.Parent = this; 
            MyStreetVersionNumbers.Parent = this; 
            MyStreetEntryDates.Parent = this; 
            MyStreetClosureDates.Parent = this; 
            MyResponsibleAuthoritys.Parent = this; 
            MyDescriptiveIdentifiers.Parent = this; 
            MyStreetAliass.Parent = this; 
            MyStreetCrossReferencess.Parent = this; 
	}
}
}
