//
// SecondaryAddressUpdateDetailsType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class SecondaryAddressUpdateDetailsType : Altova.Xml.Node
	{
		#region Forward constructors

		public SecondaryAddressUpdateDetailsType() : base() { SetCollectionParents(); }

		public SecondaryAddressUpdateDetailsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public SecondaryAddressUpdateDetailsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public SecondaryAddressUpdateDetailsType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public SecondaryAddressUpdateDetailsType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "OldUPRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "OldUPRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "NewUPRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "NewUPRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EffectiveDate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EffectiveDate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "SecondaryAddressUpdateDetailsType");
		}


		#region OldUPRN accessor methods
		public static int GetOldUPRNMinCount()
		{
			return 1;
		}

		public static int OldUPRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetOldUPRNMaxCount()
		{
			return 1;
		}

		public static int OldUPRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOldUPRNCount()
		{
			return DomChildCount(NodeType.Element, "", "OldUPRN");
		}

		public int OldUPRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "OldUPRN");
			}
		}

		public bool HasOldUPRN()
		{
			return HasDomChild(NodeType.Element, "", "OldUPRN");
		}

		public core3.UPRNType2 NewOldUPRN()
		{
			return new core3.UPRNType2();
		}

		public core3.UPRNType2 GetOldUPRNAt(int index)
		{
			return new core3.UPRNType2(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "OldUPRN", index)));
		}

		public XmlNode GetStartingOldUPRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "OldUPRN" );
		}

		public XmlNode GetAdvancedOldUPRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "OldUPRN", curNode );
		}

		public core3.UPRNType2 GetOldUPRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UPRNType2( curNode.InnerText );
		}


		public core3.UPRNType2 GetOldUPRN()
		{
			return GetOldUPRNAt(0);
		}

		public core3.UPRNType2 OldUPRN
		{
			get
			{
				return GetOldUPRNAt(0);
			}
		}

		public void RemoveOldUPRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "OldUPRN", index);
		}

		public void RemoveOldUPRN()
		{
			RemoveOldUPRNAt(0);
		}

		public XmlNode AddOldUPRN(core3.UPRNType2 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "OldUPRN", newValue.ToString());
			return null;
		}

		public void InsertOldUPRNAt(core3.UPRNType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "OldUPRN", index, newValue.ToString());
		}

		public void ReplaceOldUPRNAt(core3.UPRNType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "OldUPRN", index, newValue.ToString());
		}
		#endregion // OldUPRN accessor methods

		#region OldUPRN collection
        public OldUPRNCollection	MyOldUPRNs = new OldUPRNCollection( );

        public class OldUPRNCollection: IEnumerable
        {
            SecondaryAddressUpdateDetailsType parent;
            public SecondaryAddressUpdateDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public OldUPRNEnumerator GetEnumerator() 
			{
				return new OldUPRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class OldUPRNEnumerator: IEnumerator 
        {
			int nIndex;
			SecondaryAddressUpdateDetailsType parent;
			public OldUPRNEnumerator(SecondaryAddressUpdateDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.OldUPRNCount );
			}
			public core3.UPRNType2  Current 
			{
				get 
				{
					return(parent.GetOldUPRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // OldUPRN collection

		#region NewUPRN accessor methods
		public static int GetNewUPRNMinCount()
		{
			return 1;
		}

		public static int NewUPRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNewUPRNMaxCount()
		{
			return 1;
		}

		public static int NewUPRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNewUPRNCount()
		{
			return DomChildCount(NodeType.Element, "", "NewUPRN");
		}

		public int NewUPRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "NewUPRN");
			}
		}

		public bool HasNewUPRN()
		{
			return HasDomChild(NodeType.Element, "", "NewUPRN");
		}

		public core3.UPRNType2 NewNewUPRN()
		{
			return new core3.UPRNType2();
		}

		public core3.UPRNType2 GetNewUPRNAt(int index)
		{
			return new core3.UPRNType2(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "NewUPRN", index)));
		}

		public XmlNode GetStartingNewUPRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "NewUPRN" );
		}

		public XmlNode GetAdvancedNewUPRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "NewUPRN", curNode );
		}

		public core3.UPRNType2 GetNewUPRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UPRNType2( curNode.InnerText );
		}


		public core3.UPRNType2 GetNewUPRN()
		{
			return GetNewUPRNAt(0);
		}

		public core3.UPRNType2 NewUPRN
		{
			get
			{
				return GetNewUPRNAt(0);
			}
		}

		public void RemoveNewUPRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "NewUPRN", index);
		}

		public void RemoveNewUPRN()
		{
			RemoveNewUPRNAt(0);
		}

		public XmlNode AddNewUPRN(core3.UPRNType2 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "NewUPRN", newValue.ToString());
			return null;
		}

		public void InsertNewUPRNAt(core3.UPRNType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "NewUPRN", index, newValue.ToString());
		}

		public void ReplaceNewUPRNAt(core3.UPRNType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "NewUPRN", index, newValue.ToString());
		}
		#endregion // NewUPRN accessor methods

		#region NewUPRN collection
        public NewUPRNCollection	MyNewUPRNs = new NewUPRNCollection( );

        public class NewUPRNCollection: IEnumerable
        {
            SecondaryAddressUpdateDetailsType parent;
            public SecondaryAddressUpdateDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NewUPRNEnumerator GetEnumerator() 
			{
				return new NewUPRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NewUPRNEnumerator: IEnumerator 
        {
			int nIndex;
			SecondaryAddressUpdateDetailsType parent;
			public NewUPRNEnumerator(SecondaryAddressUpdateDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NewUPRNCount );
			}
			public core3.UPRNType2  Current 
			{
				get 
				{
					return(parent.GetNewUPRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // NewUPRN collection

		#region EffectiveDate accessor methods
		public static int GetEffectiveDateMinCount()
		{
			return 0;
		}

		public static int EffectiveDateMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetEffectiveDateMaxCount()
		{
			return 1;
		}

		public static int EffectiveDateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEffectiveDateCount()
		{
			return DomChildCount(NodeType.Element, "", "EffectiveDate");
		}

		public int EffectiveDateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EffectiveDate");
			}
		}

		public bool HasEffectiveDate()
		{
			return HasDomChild(NodeType.Element, "", "EffectiveDate");
		}

		public SchemaDate NewEffectiveDate()
		{
			return new SchemaDate();
		}

		public SchemaDate GetEffectiveDateAt(int index)
		{
			return new SchemaDate(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "EffectiveDate", index)));
		}

		public XmlNode GetStartingEffectiveDateCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EffectiveDate" );
		}

		public XmlNode GetAdvancedEffectiveDateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EffectiveDate", curNode );
		}

		public SchemaDate GetEffectiveDateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDate( curNode.InnerText );
		}


		public SchemaDate GetEffectiveDate()
		{
			return GetEffectiveDateAt(0);
		}

		public SchemaDate EffectiveDate
		{
			get
			{
				return GetEffectiveDateAt(0);
			}
		}

		public void RemoveEffectiveDateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EffectiveDate", index);
		}

		public void RemoveEffectiveDate()
		{
			RemoveEffectiveDateAt(0);
		}

		public XmlNode AddEffectiveDate(SchemaDate newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "EffectiveDate", newValue.ToString());
			return null;
		}

		public void InsertEffectiveDateAt(SchemaDate newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "EffectiveDate", index, newValue.ToString());
		}

		public void ReplaceEffectiveDateAt(SchemaDate newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "EffectiveDate", index, newValue.ToString());
		}
		#endregion // EffectiveDate accessor methods

		#region EffectiveDate collection
        public EffectiveDateCollection	MyEffectiveDates = new EffectiveDateCollection( );

        public class EffectiveDateCollection: IEnumerable
        {
            SecondaryAddressUpdateDetailsType parent;
            public SecondaryAddressUpdateDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EffectiveDateEnumerator GetEnumerator() 
			{
				return new EffectiveDateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EffectiveDateEnumerator: IEnumerator 
        {
			int nIndex;
			SecondaryAddressUpdateDetailsType parent;
			public EffectiveDateEnumerator(SecondaryAddressUpdateDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EffectiveDateCount );
			}
			public SchemaDate  Current 
			{
				get 
				{
					return(parent.GetEffectiveDateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EffectiveDate collection

        private void SetCollectionParents()
        {
            MyOldUPRNs.Parent = this; 
            MyNewUPRNs.Parent = this; 
            MyEffectiveDates.Parent = this; 
	}
}
}
