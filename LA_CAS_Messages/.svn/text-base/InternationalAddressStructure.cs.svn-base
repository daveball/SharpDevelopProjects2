//
// InternationalAddressStructure.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages.AddressAndPersonalDetails2
{
	public class InternationalAddressStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public InternationalAddressStructure() : base() { SetCollectionParents(); }

		public InternationalAddressStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public InternationalAddressStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public InternationalAddressStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public InternationalAddressStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "AddressAndPersonalDetails:InternationalAddressStructure");
		}


		#region IntAddressLine accessor methods
		public static int GetIntAddressLineMinCount()
		{
			return 2;
		}

		public static int IntAddressLineMinCount
		{
			get
			{
				return 2;
			}
		}

		public static int GetIntAddressLineMaxCount()
		{
			return 5;
		}

		public static int IntAddressLineMaxCount
		{
			get
			{
				return 5;
			}
		}

		public int GetIntAddressLineCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine");
		}

		public int IntAddressLineCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine");
			}
		}

		public bool HasIntAddressLine()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine");
		}

		public AddressLineType NewIntAddressLine()
		{
			return new AddressLineType();
		}

		public AddressLineType GetIntAddressLineAt(int index)
		{
			return new AddressLineType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine", index)));
		}

		public XmlNode GetStartingIntAddressLineCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine" );
		}

		public XmlNode GetAdvancedIntAddressLineCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine", curNode );
		}

		public AddressLineType GetIntAddressLineValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AddressLineType( curNode.InnerText );
		}


		public AddressLineType GetIntAddressLine()
		{
			return GetIntAddressLineAt(0);
		}

		public AddressLineType IntAddressLine
		{
			get
			{
				return GetIntAddressLineAt(0);
			}
		}

		public void RemoveIntAddressLineAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine", index);
		}

		public void RemoveIntAddressLine()
		{
			while (HasIntAddressLine())
				RemoveIntAddressLineAt(0);
		}

		public XmlNode AddIntAddressLine(AddressLineType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine", newValue.ToString());
			return null;
		}

		public void InsertIntAddressLineAt(AddressLineType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine", index, newValue.ToString());
		}

		public void ReplaceIntAddressLineAt(AddressLineType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "IntAddressLine", index, newValue.ToString());
		}
		#endregion // IntAddressLine accessor methods

		#region IntAddressLine collection
        public IntAddressLineCollection	MyIntAddressLines = new IntAddressLineCollection( );

        public class IntAddressLineCollection: IEnumerable
        {
            InternationalAddressStructure parent;
            public InternationalAddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public IntAddressLineEnumerator GetEnumerator() 
			{
				return new IntAddressLineEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IntAddressLineEnumerator: IEnumerator 
        {
			int nIndex;
			InternationalAddressStructure parent;
			public IntAddressLineEnumerator(InternationalAddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IntAddressLineCount );
			}
			public AddressLineType  Current 
			{
				get 
				{
					return(parent.GetIntAddressLineAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // IntAddressLine collection

		#region Country accessor methods
		public static int GetCountryMinCount()
		{
			return 1;
		}

		public static int CountryMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCountryMaxCount()
		{
			return 1;
		}

		public static int CountryMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCountryCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country");
		}

		public int CountryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country");
			}
		}

		public bool HasCountry()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country");
		}

		public AddressLineType NewCountry()
		{
			return new AddressLineType();
		}

		public AddressLineType GetCountryAt(int index)
		{
			return new AddressLineType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country", index)));
		}

		public XmlNode GetStartingCountryCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country" );
		}

		public XmlNode GetAdvancedCountryCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country", curNode );
		}

		public AddressLineType GetCountryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AddressLineType( curNode.InnerText );
		}


		public AddressLineType GetCountry()
		{
			return GetCountryAt(0);
		}

		public AddressLineType Country
		{
			get
			{
				return GetCountryAt(0);
			}
		}

		public void RemoveCountryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country", index);
		}

		public void RemoveCountry()
		{
			RemoveCountryAt(0);
		}

		public XmlNode AddCountry(AddressLineType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country", newValue.ToString());
			return null;
		}

		public void InsertCountryAt(AddressLineType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country", index, newValue.ToString());
		}

		public void ReplaceCountryAt(AddressLineType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Country", index, newValue.ToString());
		}
		#endregion // Country accessor methods

		#region Country collection
        public CountryCollection	MyCountrys = new CountryCollection( );

        public class CountryCollection: IEnumerable
        {
            InternationalAddressStructure parent;
            public InternationalAddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public CountryEnumerator GetEnumerator() 
			{
				return new CountryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CountryEnumerator: IEnumerator 
        {
			int nIndex;
			InternationalAddressStructure parent;
			public CountryEnumerator(InternationalAddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CountryCount );
			}
			public AddressLineType  Current 
			{
				get 
				{
					return(parent.GetCountryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Country collection

		#region InternationalPostCode accessor methods
		public static int GetInternationalPostCodeMinCount()
		{
			return 0;
		}

		public static int InternationalPostCodeMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetInternationalPostCodeMaxCount()
		{
			return 1;
		}

		public static int InternationalPostCodeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetInternationalPostCodeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode");
		}

		public int InternationalPostCodeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode");
			}
		}

		public bool HasInternationalPostCode()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode");
		}

		public InternationalPostCodeType NewInternationalPostCode()
		{
			return new InternationalPostCodeType();
		}

		public InternationalPostCodeType GetInternationalPostCodeAt(int index)
		{
			return new InternationalPostCodeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode", index)));
		}

		public XmlNode GetStartingInternationalPostCodeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode" );
		}

		public XmlNode GetAdvancedInternationalPostCodeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode", curNode );
		}

		public InternationalPostCodeType GetInternationalPostCodeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new InternationalPostCodeType( curNode.InnerText );
		}


		public InternationalPostCodeType GetInternationalPostCode()
		{
			return GetInternationalPostCodeAt(0);
		}

		public InternationalPostCodeType InternationalPostCode
		{
			get
			{
				return GetInternationalPostCodeAt(0);
			}
		}

		public void RemoveInternationalPostCodeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode", index);
		}

		public void RemoveInternationalPostCode()
		{
			RemoveInternationalPostCodeAt(0);
		}

		public XmlNode AddInternationalPostCode(InternationalPostCodeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode", newValue.ToString());
			return null;
		}

		public void InsertInternationalPostCodeAt(InternationalPostCodeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode", index, newValue.ToString());
		}

		public void ReplaceInternationalPostCodeAt(InternationalPostCodeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "InternationalPostCode", index, newValue.ToString());
		}
		#endregion // InternationalPostCode accessor methods

		#region InternationalPostCode collection
        public InternationalPostCodeCollection	MyInternationalPostCodes = new InternationalPostCodeCollection( );

        public class InternationalPostCodeCollection: IEnumerable
        {
            InternationalAddressStructure parent;
            public InternationalAddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public InternationalPostCodeEnumerator GetEnumerator() 
			{
				return new InternationalPostCodeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class InternationalPostCodeEnumerator: IEnumerator 
        {
			int nIndex;
			InternationalAddressStructure parent;
			public InternationalPostCodeEnumerator(InternationalAddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.InternationalPostCodeCount );
			}
			public InternationalPostCodeType  Current 
			{
				get 
				{
					return(parent.GetInternationalPostCodeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // InternationalPostCode collection

        private void SetCollectionParents()
        {
            MyIntAddressLines.Parent = this; 
            MyCountrys.Parent = this; 
            MyInternationalPostCodes.Parent = this; 
	}
}
}
