//
// CASAuthenticationResponseType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LA_CAS_Messages
{
	public class CASAuthenticationResponseType : Altova.Xml.Node
	{
		#region Forward constructors

		public CASAuthenticationResponseType() : base() { SetCollectionParents(); }

		public CASAuthenticationResponseType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public CASAuthenticationResponseType(XmlNode node) : base(node) { SetCollectionParents(); }
		public CASAuthenticationResponseType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public CASAuthenticationResponseType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UCRN" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UCRN", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "AUTHENTICATION_LEVEL" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "AUTHENTICATION_LEVEL", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "CASAuthenticationResponse");
		}


		#region UCRN accessor methods
		public static int GetUCRNMinCount()
		{
			return 1;
		}

		public static int UCRNMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUCRNMaxCount()
		{
			return 1;
		}

		public static int UCRNMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUCRNCount()
		{
			return DomChildCount(NodeType.Element, "", "UCRN");
		}

		public int UCRNCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UCRN");
			}
		}

		public bool HasUCRN()
		{
			return HasDomChild(NodeType.Element, "", "UCRN");
		}

		public core3.UCRNType NewUCRN()
		{
			return new core3.UCRNType();
		}

		public core3.UCRNType GetUCRNAt(int index)
		{
			return new core3.UCRNType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UCRN", index)));
		}

		public XmlNode GetStartingUCRNCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UCRN" );
		}

		public XmlNode GetAdvancedUCRNCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UCRN", curNode );
		}

		public core3.UCRNType GetUCRNValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.UCRNType( curNode.InnerText );
		}


		public core3.UCRNType GetUCRN()
		{
			return GetUCRNAt(0);
		}

		public core3.UCRNType UCRN
		{
			get
			{
				return GetUCRNAt(0);
			}
		}

		public void RemoveUCRNAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UCRN", index);
		}

		public void RemoveUCRN()
		{
			RemoveUCRNAt(0);
		}

		public XmlNode AddUCRN(core3.UCRNType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UCRN", newValue.ToString());
			return null;
		}

		public void InsertUCRNAt(core3.UCRNType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}

		public void ReplaceUCRNAt(core3.UCRNType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UCRN", index, newValue.ToString());
		}
		#endregion // UCRN accessor methods

		#region UCRN collection
        public UCRNCollection	MyUCRNs = new UCRNCollection( );

        public class UCRNCollection: IEnumerable
        {
            CASAuthenticationResponseType parent;
            public CASAuthenticationResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UCRNEnumerator GetEnumerator() 
			{
				return new UCRNEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UCRNEnumerator: IEnumerator 
        {
			int nIndex;
			CASAuthenticationResponseType parent;
			public UCRNEnumerator(CASAuthenticationResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UCRNCount );
			}
			public core3.UCRNType  Current 
			{
				get 
				{
					return(parent.GetUCRNAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UCRN collection

		#region AUTHENTICATION_LEVEL accessor methods
		public static int GetAUTHENTICATION_LEVELMinCount()
		{
			return 1;
		}

		public static int AUTHENTICATION_LEVELMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetAUTHENTICATION_LEVELMaxCount()
		{
			return 1;
		}

		public static int AUTHENTICATION_LEVELMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAUTHENTICATION_LEVELCount()
		{
			return DomChildCount(NodeType.Element, "", "AUTHENTICATION_LEVEL");
		}

		public int AUTHENTICATION_LEVELCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "AUTHENTICATION_LEVEL");
			}
		}

		public bool HasAUTHENTICATION_LEVEL()
		{
			return HasDomChild(NodeType.Element, "", "AUTHENTICATION_LEVEL");
		}

		public core3.AuthenticationLevelType NewAUTHENTICATION_LEVEL()
		{
			return new core3.AuthenticationLevelType();
		}

		public core3.AuthenticationLevelType GetAUTHENTICATION_LEVELAt(int index)
		{
			return new core3.AuthenticationLevelType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "AUTHENTICATION_LEVEL", index)));
		}

		public XmlNode GetStartingAUTHENTICATION_LEVELCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "AUTHENTICATION_LEVEL" );
		}

		public XmlNode GetAdvancedAUTHENTICATION_LEVELCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "AUTHENTICATION_LEVEL", curNode );
		}

		public core3.AuthenticationLevelType GetAUTHENTICATION_LEVELValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.AuthenticationLevelType( curNode.InnerText );
		}


		public core3.AuthenticationLevelType GetAUTHENTICATION_LEVEL()
		{
			return GetAUTHENTICATION_LEVELAt(0);
		}

		public core3.AuthenticationLevelType AUTHENTICATION_LEVEL
		{
			get
			{
				return GetAUTHENTICATION_LEVELAt(0);
			}
		}

		public void RemoveAUTHENTICATION_LEVELAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "AUTHENTICATION_LEVEL", index);
		}

		public void RemoveAUTHENTICATION_LEVEL()
		{
			RemoveAUTHENTICATION_LEVELAt(0);
		}

		public XmlNode AddAUTHENTICATION_LEVEL(core3.AuthenticationLevelType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "AUTHENTICATION_LEVEL", newValue.ToString());
			return null;
		}

		public void InsertAUTHENTICATION_LEVELAt(core3.AuthenticationLevelType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "AUTHENTICATION_LEVEL", index, newValue.ToString());
		}

		public void ReplaceAUTHENTICATION_LEVELAt(core3.AuthenticationLevelType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "AUTHENTICATION_LEVEL", index, newValue.ToString());
		}
		#endregion // AUTHENTICATION_LEVEL accessor methods

		#region AUTHENTICATION_LEVEL collection
        public AUTHENTICATION_LEVELCollection	MyAUTHENTICATION_LEVELs = new AUTHENTICATION_LEVELCollection( );

        public class AUTHENTICATION_LEVELCollection: IEnumerable
        {
            CASAuthenticationResponseType parent;
            public CASAuthenticationResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public AUTHENTICATION_LEVELEnumerator GetEnumerator() 
			{
				return new AUTHENTICATION_LEVELEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AUTHENTICATION_LEVELEnumerator: IEnumerator 
        {
			int nIndex;
			CASAuthenticationResponseType parent;
			public AUTHENTICATION_LEVELEnumerator(CASAuthenticationResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AUTHENTICATION_LEVELCount );
			}
			public core3.AuthenticationLevelType  Current 
			{
				get 
				{
					return(parent.GetAUTHENTICATION_LEVELAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // AUTHENTICATION_LEVEL collection

        private void SetCollectionParents()
        {
            MyUCRNs.Parent = this; 
            MyAUTHENTICATION_LEVELs.Parent = this; 
	}
}
}
