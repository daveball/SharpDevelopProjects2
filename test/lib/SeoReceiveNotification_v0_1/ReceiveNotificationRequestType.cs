//
// ReceiveNotificationRequestType.cs
//
// This file was generated by XMLSpy 2008r2sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoReceiveNotification_v0_1
{
	public class ReceiveNotificationRequestType : Altova.Xml.Node
	{
		#region Forward constructors

		public ReceiveNotificationRequestType() : base() { SetCollectionParents(); }

		public ReceiveNotificationRequestType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ReceiveNotificationRequestType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ReceiveNotificationRequestType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ReceiveNotificationRequestType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "NotificationID" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "NotificationID", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "ReceiveNotificationRequest");
		}


		#region NotificationID accessor methods
		public static int GetNotificationIDMinCount()
		{
			return 1;
		}

		public static int NotificationIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNotificationIDMaxCount()
		{
			return 1;
		}

		public static int NotificationIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNotificationIDCount()
		{
			return DomChildCount(NodeType.Element, "", "NotificationID");
		}

		public int NotificationIDCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "NotificationID");
			}
		}

		public bool HasNotificationID()
		{
			return HasDomChild(NodeType.Element, "", "NotificationID");
		}

		public core3.NotificationIDType NewNotificationID()
		{
			return new core3.NotificationIDType();
		}

		public core3.NotificationIDType GetNotificationIDAt(int index)
		{
			return new core3.NotificationIDType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "NotificationID", index)));
		}

		public XmlNode GetStartingNotificationIDCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "NotificationID" );
		}

		public XmlNode GetAdvancedNotificationIDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "NotificationID", curNode );
		}

		public core3.NotificationIDType GetNotificationIDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core3.NotificationIDType( curNode.InnerText );
		}


		public core3.NotificationIDType GetNotificationID()
		{
			return GetNotificationIDAt(0);
		}

		public core3.NotificationIDType NotificationID
		{
			get
			{
				return GetNotificationIDAt(0);
			}
		}

		public void RemoveNotificationIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "NotificationID", index);
		}

		public void RemoveNotificationID()
		{
			RemoveNotificationIDAt(0);
		}

		public XmlNode AddNotificationID(core3.NotificationIDType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "NotificationID", newValue.ToString());
			return null;
		}

		public void InsertNotificationIDAt(core3.NotificationIDType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "NotificationID", index, newValue.ToString());
		}

		public void ReplaceNotificationIDAt(core3.NotificationIDType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "NotificationID", index, newValue.ToString());
		}
		#endregion // NotificationID accessor methods

		#region NotificationID collection
        public NotificationIDCollection	MyNotificationIDs = new NotificationIDCollection( );

        public class NotificationIDCollection: IEnumerable
        {
            ReceiveNotificationRequestType parent;
            public ReceiveNotificationRequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NotificationIDEnumerator GetEnumerator() 
			{
				return new NotificationIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NotificationIDEnumerator: IEnumerator 
        {
			int nIndex;
			ReceiveNotificationRequestType parent;
			public NotificationIDEnumerator(ReceiveNotificationRequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NotificationIDCount );
			}
			public core3.NotificationIDType  Current 
			{
				get 
				{
					return(parent.GetNotificationIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // NotificationID collection

        private void SetCollectionParents()
        {
            MyNotificationIDs.Parent = this; 
	}
}
}
