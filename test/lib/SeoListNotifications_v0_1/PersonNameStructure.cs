//
// PersonNameStructure.cs
//
// This file was generated by XMLSpy 2008r2sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoListNotifications_v0_1.PersonDescriptives2
{
	public class PersonNameStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public PersonNameStructure() : base() { SetCollectionParents(); }

		public PersonNameStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public PersonNameStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public PersonNameStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public PersonNameStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "PersonDescriptives:PersonNameStructure");
		}


		#region PersonNameTitle accessor methods
		public static int GetPersonNameTitleMinCount()
		{
			return 0;
		}

		public static int PersonNameTitleMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPersonNameTitleMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int PersonNameTitleMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetPersonNameTitleCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle");
		}

		public int PersonNameTitleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle");
			}
		}

		public bool HasPersonNameTitle()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle");
		}

		public PersonNameTitleType NewPersonNameTitle()
		{
			return new PersonNameTitleType();
		}

		public PersonNameTitleType GetPersonNameTitleAt(int index)
		{
			return new PersonNameTitleType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle", index)));
		}

		public XmlNode GetStartingPersonNameTitleCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle" );
		}

		public XmlNode GetAdvancedPersonNameTitleCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle", curNode );
		}

		public PersonNameTitleType GetPersonNameTitleValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonNameTitleType( curNode.InnerText );
		}


		public PersonNameTitleType GetPersonNameTitle()
		{
			return GetPersonNameTitleAt(0);
		}

		public PersonNameTitleType PersonNameTitle
		{
			get
			{
				return GetPersonNameTitleAt(0);
			}
		}

		public void RemovePersonNameTitleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle", index);
		}

		public void RemovePersonNameTitle()
		{
			while (HasPersonNameTitle())
				RemovePersonNameTitleAt(0);
		}

		public XmlNode AddPersonNameTitle(PersonNameTitleType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle", newValue.ToString());
			return null;
		}

		public void InsertPersonNameTitleAt(PersonNameTitleType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle", index, newValue.ToString());
		}

		public void ReplacePersonNameTitleAt(PersonNameTitleType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameTitle", index, newValue.ToString());
		}
		#endregion // PersonNameTitle accessor methods

		#region PersonNameTitle collection
        public PersonNameTitleCollection	MyPersonNameTitles = new PersonNameTitleCollection( );

        public class PersonNameTitleCollection: IEnumerable
        {
            PersonNameStructure parent;
            public PersonNameStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PersonNameTitleEnumerator GetEnumerator() 
			{
				return new PersonNameTitleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PersonNameTitleEnumerator: IEnumerator 
        {
			int nIndex;
			PersonNameStructure parent;
			public PersonNameTitleEnumerator(PersonNameStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PersonNameTitleCount );
			}
			public PersonNameTitleType  Current 
			{
				get 
				{
					return(parent.GetPersonNameTitleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PersonNameTitle collection

		#region PersonGivenName accessor methods
		public static int GetPersonGivenNameMinCount()
		{
			return 0;
		}

		public static int PersonGivenNameMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPersonGivenNameMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int PersonGivenNameMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetPersonGivenNameCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName");
		}

		public int PersonGivenNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName");
			}
		}

		public bool HasPersonGivenName()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName");
		}

		public PersonGivenNameType NewPersonGivenName()
		{
			return new PersonGivenNameType();
		}

		public PersonGivenNameType GetPersonGivenNameAt(int index)
		{
			return new PersonGivenNameType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName", index)));
		}

		public XmlNode GetStartingPersonGivenNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName" );
		}

		public XmlNode GetAdvancedPersonGivenNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName", curNode );
		}

		public PersonGivenNameType GetPersonGivenNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonGivenNameType( curNode.InnerText );
		}


		public PersonGivenNameType GetPersonGivenName()
		{
			return GetPersonGivenNameAt(0);
		}

		public PersonGivenNameType PersonGivenName
		{
			get
			{
				return GetPersonGivenNameAt(0);
			}
		}

		public void RemovePersonGivenNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName", index);
		}

		public void RemovePersonGivenName()
		{
			while (HasPersonGivenName())
				RemovePersonGivenNameAt(0);
		}

		public XmlNode AddPersonGivenName(PersonGivenNameType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName", newValue.ToString());
			return null;
		}

		public void InsertPersonGivenNameAt(PersonGivenNameType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName", index, newValue.ToString());
		}

		public void ReplacePersonGivenNameAt(PersonGivenNameType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonGivenName", index, newValue.ToString());
		}
		#endregion // PersonGivenName accessor methods

		#region PersonGivenName collection
        public PersonGivenNameCollection	MyPersonGivenNames = new PersonGivenNameCollection( );

        public class PersonGivenNameCollection: IEnumerable
        {
            PersonNameStructure parent;
            public PersonNameStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PersonGivenNameEnumerator GetEnumerator() 
			{
				return new PersonGivenNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PersonGivenNameEnumerator: IEnumerator 
        {
			int nIndex;
			PersonNameStructure parent;
			public PersonGivenNameEnumerator(PersonNameStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PersonGivenNameCount );
			}
			public PersonGivenNameType  Current 
			{
				get 
				{
					return(parent.GetPersonGivenNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PersonGivenName collection

		#region PersonFamilyName accessor methods
		public static int GetPersonFamilyNameMinCount()
		{
			return 1;
		}

		public static int PersonFamilyNameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPersonFamilyNameMaxCount()
		{
			return 1;
		}

		public static int PersonFamilyNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPersonFamilyNameCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName");
		}

		public int PersonFamilyNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName");
			}
		}

		public bool HasPersonFamilyName()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName");
		}

		public PersonFamilyNameType NewPersonFamilyName()
		{
			return new PersonFamilyNameType();
		}

		public PersonFamilyNameType GetPersonFamilyNameAt(int index)
		{
			return new PersonFamilyNameType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName", index)));
		}

		public XmlNode GetStartingPersonFamilyNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName" );
		}

		public XmlNode GetAdvancedPersonFamilyNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName", curNode );
		}

		public PersonFamilyNameType GetPersonFamilyNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonFamilyNameType( curNode.InnerText );
		}


		public PersonFamilyNameType GetPersonFamilyName()
		{
			return GetPersonFamilyNameAt(0);
		}

		public PersonFamilyNameType PersonFamilyName
		{
			get
			{
				return GetPersonFamilyNameAt(0);
			}
		}

		public void RemovePersonFamilyNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName", index);
		}

		public void RemovePersonFamilyName()
		{
			RemovePersonFamilyNameAt(0);
		}

		public XmlNode AddPersonFamilyName(PersonFamilyNameType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName", newValue.ToString());
			return null;
		}

		public void InsertPersonFamilyNameAt(PersonFamilyNameType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName", index, newValue.ToString());
		}

		public void ReplacePersonFamilyNameAt(PersonFamilyNameType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonFamilyName", index, newValue.ToString());
		}
		#endregion // PersonFamilyName accessor methods

		#region PersonFamilyName collection
        public PersonFamilyNameCollection	MyPersonFamilyNames = new PersonFamilyNameCollection( );

        public class PersonFamilyNameCollection: IEnumerable
        {
            PersonNameStructure parent;
            public PersonNameStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PersonFamilyNameEnumerator GetEnumerator() 
			{
				return new PersonFamilyNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PersonFamilyNameEnumerator: IEnumerator 
        {
			int nIndex;
			PersonNameStructure parent;
			public PersonFamilyNameEnumerator(PersonNameStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PersonFamilyNameCount );
			}
			public PersonFamilyNameType  Current 
			{
				get 
				{
					return(parent.GetPersonFamilyNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PersonFamilyName collection

		#region PersonNameSuffix accessor methods
		public static int GetPersonNameSuffixMinCount()
		{
			return 0;
		}

		public static int PersonNameSuffixMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPersonNameSuffixMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int PersonNameSuffixMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetPersonNameSuffixCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix");
		}

		public int PersonNameSuffixCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix");
			}
		}

		public bool HasPersonNameSuffix()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix");
		}

		public PersonNameSuffixType NewPersonNameSuffix()
		{
			return new PersonNameSuffixType();
		}

		public PersonNameSuffixType GetPersonNameSuffixAt(int index)
		{
			return new PersonNameSuffixType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix", index)));
		}

		public XmlNode GetStartingPersonNameSuffixCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix" );
		}

		public XmlNode GetAdvancedPersonNameSuffixCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix", curNode );
		}

		public PersonNameSuffixType GetPersonNameSuffixValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonNameSuffixType( curNode.InnerText );
		}


		public PersonNameSuffixType GetPersonNameSuffix()
		{
			return GetPersonNameSuffixAt(0);
		}

		public PersonNameSuffixType PersonNameSuffix
		{
			get
			{
				return GetPersonNameSuffixAt(0);
			}
		}

		public void RemovePersonNameSuffixAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix", index);
		}

		public void RemovePersonNameSuffix()
		{
			while (HasPersonNameSuffix())
				RemovePersonNameSuffixAt(0);
		}

		public XmlNode AddPersonNameSuffix(PersonNameSuffixType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix", newValue.ToString());
			return null;
		}

		public void InsertPersonNameSuffixAt(PersonNameSuffixType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix", index, newValue.ToString());
		}

		public void ReplacePersonNameSuffixAt(PersonNameSuffixType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonNameSuffix", index, newValue.ToString());
		}
		#endregion // PersonNameSuffix accessor methods

		#region PersonNameSuffix collection
        public PersonNameSuffixCollection	MyPersonNameSuffixs = new PersonNameSuffixCollection( );

        public class PersonNameSuffixCollection: IEnumerable
        {
            PersonNameStructure parent;
            public PersonNameStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PersonNameSuffixEnumerator GetEnumerator() 
			{
				return new PersonNameSuffixEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PersonNameSuffixEnumerator: IEnumerator 
        {
			int nIndex;
			PersonNameStructure parent;
			public PersonNameSuffixEnumerator(PersonNameStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PersonNameSuffixCount );
			}
			public PersonNameSuffixType  Current 
			{
				get 
				{
					return(parent.GetPersonNameSuffixAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PersonNameSuffix collection

		#region PersonRequestedName accessor methods
		public static int GetPersonRequestedNameMinCount()
		{
			return 0;
		}

		public static int PersonRequestedNameMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPersonRequestedNameMaxCount()
		{
			return 1;
		}

		public static int PersonRequestedNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPersonRequestedNameCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName");
		}

		public int PersonRequestedNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName");
			}
		}

		public bool HasPersonRequestedName()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName");
		}

		public PersonRequestedNameType NewPersonRequestedName()
		{
			return new PersonRequestedNameType();
		}

		public PersonRequestedNameType GetPersonRequestedNameAt(int index)
		{
			return new PersonRequestedNameType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName", index)));
		}

		public XmlNode GetStartingPersonRequestedNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName" );
		}

		public XmlNode GetAdvancedPersonRequestedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName", curNode );
		}

		public PersonRequestedNameType GetPersonRequestedNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonRequestedNameType( curNode.InnerText );
		}


		public PersonRequestedNameType GetPersonRequestedName()
		{
			return GetPersonRequestedNameAt(0);
		}

		public PersonRequestedNameType PersonRequestedName
		{
			get
			{
				return GetPersonRequestedNameAt(0);
			}
		}

		public void RemovePersonRequestedNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName", index);
		}

		public void RemovePersonRequestedName()
		{
			RemovePersonRequestedNameAt(0);
		}

		public XmlNode AddPersonRequestedName(PersonRequestedNameType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName", newValue.ToString());
			return null;
		}

		public void InsertPersonRequestedNameAt(PersonRequestedNameType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName", index, newValue.ToString());
		}

		public void ReplacePersonRequestedNameAt(PersonRequestedNameType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/PersonDescriptives", "PersonRequestedName", index, newValue.ToString());
		}
		#endregion // PersonRequestedName accessor methods

		#region PersonRequestedName collection
        public PersonRequestedNameCollection	MyPersonRequestedNames = new PersonRequestedNameCollection( );

        public class PersonRequestedNameCollection: IEnumerable
        {
            PersonNameStructure parent;
            public PersonNameStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PersonRequestedNameEnumerator GetEnumerator() 
			{
				return new PersonRequestedNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PersonRequestedNameEnumerator: IEnumerator 
        {
			int nIndex;
			PersonNameStructure parent;
			public PersonRequestedNameEnumerator(PersonNameStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PersonRequestedNameCount );
			}
			public PersonRequestedNameType  Current 
			{
				get 
				{
					return(parent.GetPersonRequestedNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PersonRequestedName collection

        private void SetCollectionParents()
        {
            MyPersonNameTitles.Parent = this; 
            MyPersonGivenNames.Parent = this; 
            MyPersonFamilyNames.Parent = this; 
            MyPersonNameSuffixs.Parent = this; 
            MyPersonRequestedNames.Parent = this; 
	}
}
}
