//
// ListNotificationsResponseType.cs
//
// This file was generated by XMLSpy 2008r2sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoListNotifications_v0_1
{
	public class ListNotificationsResponseType : Altova.Xml.Node
	{
		#region Forward constructors

		public ListNotificationsResponseType() : base() { SetCollectionParents(); }

		public ListNotificationsResponseType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ListNotificationsResponseType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ListNotificationsResponseType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ListNotificationsResponseType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Notification" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Notification", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new NotificationType(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "ListNotificationsResponse");
		}


		#region Notification accessor methods
		public static int GetNotificationMinCount()
		{
			return 0;
		}

		public static int NotificationMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetNotificationMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int NotificationMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetNotificationCount()
		{
			return DomChildCount(NodeType.Element, "", "Notification");
		}

		public int NotificationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Notification");
			}
		}

		public bool HasNotification()
		{
			return HasDomChild(NodeType.Element, "", "Notification");
		}

		public NotificationType NewNotification()
		{
			return new NotificationType(domNode.OwnerDocument.CreateElement("Notification", ""));
		}

		public NotificationType GetNotificationAt(int index)
		{
			return new NotificationType(GetDomChildAt(NodeType.Element, "", "Notification", index));
		}

		public XmlNode GetStartingNotificationCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Notification" );
		}

		public XmlNode GetAdvancedNotificationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Notification", curNode );
		}

		public NotificationType GetNotificationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new NotificationType( curNode );
		}


		public NotificationType GetNotification()
		{
			return GetNotificationAt(0);
		}

		public NotificationType Notification
		{
			get
			{
				return GetNotificationAt(0);
			}
		}

		public void RemoveNotificationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Notification", index);
		}

		public void RemoveNotification()
		{
			while (HasNotification())
				RemoveNotificationAt(0);
		}

		public XmlNode AddNotification(NotificationType newValue)
		{
			return AppendDomElement("", "Notification", newValue);
		}

		public void InsertNotificationAt(NotificationType newValue, int index)
		{
			InsertDomElementAt("", "Notification", index, newValue);
		}

		public void ReplaceNotificationAt(NotificationType newValue, int index)
		{
			ReplaceDomElementAt("", "Notification", index, newValue);
		}
		#endregion // Notification accessor methods

		#region Notification collection
        public NotificationCollection	MyNotifications = new NotificationCollection( );

        public class NotificationCollection: IEnumerable
        {
            ListNotificationsResponseType parent;
            public ListNotificationsResponseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NotificationEnumerator GetEnumerator() 
			{
				return new NotificationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NotificationEnumerator: IEnumerator 
        {
			int nIndex;
			ListNotificationsResponseType parent;
			public NotificationEnumerator(ListNotificationsResponseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NotificationCount );
			}
			public NotificationType  Current 
			{
				get 
				{
					return(parent.GetNotificationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Notification collection

        private void SetCollectionParents()
        {
            MyNotifications.Parent = this; 
	}
}
}
