//
// AONstructure.cs
//
// This file was generated by XMLSpy 2008r2sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoListNotifications_v0_1.bs76662
{
	public class AONstructure : Altova.Xml.Node
	{
		#region Forward constructors

		public AONstructure() : base() { SetCollectionParents(); }

		public AONstructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public AONstructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public AONstructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public AONstructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartRange" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartRange", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new AONrangeStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndRange" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndRange", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new AONrangeStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "bs7666:AONstructure");
		}


		#region StartRange accessor methods
		public static int GetStartRangeMinCount()
		{
			return 1;
		}

		public static int StartRangeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStartRangeMaxCount()
		{
			return 1;
		}

		public static int StartRangeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStartRangeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartRange");
		}

		public int StartRangeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartRange");
			}
		}

		public bool HasStartRange()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartRange");
		}

		public AONrangeStructure NewStartRange()
		{
			return new AONrangeStructure(domNode.OwnerDocument.CreateElement("StartRange", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public AONrangeStructure GetStartRangeAt(int index)
		{
			return new AONrangeStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartRange", index));
		}

		public XmlNode GetStartingStartRangeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartRange" );
		}

		public XmlNode GetAdvancedStartRangeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartRange", curNode );
		}

		public AONrangeStructure GetStartRangeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AONrangeStructure( curNode );
		}


		public AONrangeStructure GetStartRange()
		{
			return GetStartRangeAt(0);
		}

		public AONrangeStructure StartRange
		{
			get
			{
				return GetStartRangeAt(0);
			}
		}

		public void RemoveStartRangeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "StartRange", index);
		}

		public void RemoveStartRange()
		{
			RemoveStartRangeAt(0);
		}

		public XmlNode AddStartRange(AONrangeStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "StartRange", newValue);
		}

		public void InsertStartRangeAt(AONrangeStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StartRange", index, newValue);
		}

		public void ReplaceStartRangeAt(AONrangeStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "StartRange", index, newValue);
		}
		#endregion // StartRange accessor methods

		#region StartRange collection
        public StartRangeCollection	MyStartRanges = new StartRangeCollection( );

        public class StartRangeCollection: IEnumerable
        {
            AONstructure parent;
            public AONstructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public StartRangeEnumerator GetEnumerator() 
			{
				return new StartRangeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StartRangeEnumerator: IEnumerator 
        {
			int nIndex;
			AONstructure parent;
			public StartRangeEnumerator(AONstructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StartRangeCount );
			}
			public AONrangeStructure  Current 
			{
				get 
				{
					return(parent.GetStartRangeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StartRange collection

		#region EndRange accessor methods
		public static int GetEndRangeMinCount()
		{
			return 0;
		}

		public static int EndRangeMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetEndRangeMaxCount()
		{
			return 1;
		}

		public static int EndRangeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEndRangeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndRange");
		}

		public int EndRangeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndRange");
			}
		}

		public bool HasEndRange()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndRange");
		}

		public AONrangeStructure NewEndRange()
		{
			return new AONrangeStructure(domNode.OwnerDocument.CreateElement("EndRange", "http://www.govtalk.gov.uk/people/bs7666"));
		}

		public AONrangeStructure GetEndRangeAt(int index)
		{
			return new AONrangeStructure(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndRange", index));
		}

		public XmlNode GetStartingEndRangeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndRange" );
		}

		public XmlNode GetAdvancedEndRangeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndRange", curNode );
		}

		public AONrangeStructure GetEndRangeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AONrangeStructure( curNode );
		}


		public AONrangeStructure GetEndRange()
		{
			return GetEndRangeAt(0);
		}

		public AONrangeStructure EndRange
		{
			get
			{
				return GetEndRangeAt(0);
			}
		}

		public void RemoveEndRangeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "EndRange", index);
		}

		public void RemoveEndRange()
		{
			RemoveEndRangeAt(0);
		}

		public XmlNode AddEndRange(AONrangeStructure newValue)
		{
			return AppendDomElement("http://www.govtalk.gov.uk/people/bs7666", "EndRange", newValue);
		}

		public void InsertEndRangeAt(AONrangeStructure newValue, int index)
		{
			InsertDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "EndRange", index, newValue);
		}

		public void ReplaceEndRangeAt(AONrangeStructure newValue, int index)
		{
			ReplaceDomElementAt("http://www.govtalk.gov.uk/people/bs7666", "EndRange", index, newValue);
		}
		#endregion // EndRange accessor methods

		#region EndRange collection
        public EndRangeCollection	MyEndRanges = new EndRangeCollection( );

        public class EndRangeCollection: IEnumerable
        {
            AONstructure parent;
            public AONstructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public EndRangeEnumerator GetEnumerator() 
			{
				return new EndRangeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EndRangeEnumerator: IEnumerator 
        {
			int nIndex;
			AONstructure parent;
			public EndRangeEnumerator(AONstructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EndRangeCount );
			}
			public AONrangeStructure  Current 
			{
				get 
				{
					return(parent.GetEndRangeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EndRange collection

		#region Description accessor methods
		public static int GetDescriptionMinCount()
		{
			return 0;
		}

		public static int DescriptionMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetDescriptionMaxCount()
		{
			return 1;
		}

		public static int DescriptionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDescriptionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description");
		}

		public int DescriptionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description");
			}
		}

		public bool HasDescription()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description");
		}

		public AONdescriptionType NewDescription()
		{
			return new AONdescriptionType();
		}

		public AONdescriptionType GetDescriptionAt(int index)
		{
			return new AONdescriptionType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description", index)));
		}

		public XmlNode GetStartingDescriptionCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description" );
		}

		public XmlNode GetAdvancedDescriptionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description", curNode );
		}

		public AONdescriptionType GetDescriptionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AONdescriptionType( curNode.InnerText );
		}


		public AONdescriptionType GetDescription()
		{
			return GetDescriptionAt(0);
		}

		public AONdescriptionType Description
		{
			get
			{
				return GetDescriptionAt(0);
			}
		}

		public void RemoveDescriptionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description", index);
		}

		public void RemoveDescription()
		{
			RemoveDescriptionAt(0);
		}

		public XmlNode AddDescription(AONdescriptionType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description", newValue.ToString());
			return null;
		}

		public void InsertDescriptionAt(AONdescriptionType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description", index, newValue.ToString());
		}

		public void ReplaceDescriptionAt(AONdescriptionType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/bs7666", "Description", index, newValue.ToString());
		}
		#endregion // Description accessor methods

		#region Description collection
        public DescriptionCollection	MyDescriptions = new DescriptionCollection( );

        public class DescriptionCollection: IEnumerable
        {
            AONstructure parent;
            public AONstructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public DescriptionEnumerator GetEnumerator() 
			{
				return new DescriptionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DescriptionEnumerator: IEnumerator 
        {
			int nIndex;
			AONstructure parent;
			public DescriptionEnumerator(AONstructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DescriptionCount );
			}
			public AONdescriptionType  Current 
			{
				get 
				{
					return(parent.GetDescriptionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Description collection

        private void SetCollectionParents()
        {
            MyStartRanges.Parent = this; 
            MyEndRanges.Parent = this; 
            MyDescriptions.Parent = this; 
	}
}
}
