//
// TelephoneStructure.cs
//
// This file was generated by XMLSpy 2008r2sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoListNotifications_v0_1.AddressAndPersonalDetails2
{
	public class TelephoneStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public TelephoneStructure() : base() { SetCollectionParents(); }

		public TelephoneStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public TelephoneStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public TelephoneStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public TelephoneStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "TelUse" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "TelUse", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "TelMobile" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "TelMobile", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "TelPreferred" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "TelPreferred", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "AddressAndPersonalDetails:TelephoneStructure");
		}


		#region TelUse accessor methods
		public static int GetTelUseMinCount()
		{
			return 0;
		}

		public static int TelUseMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetTelUseMaxCount()
		{
			return 1;
		}

		public static int TelUseMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTelUseCount()
		{
			return DomChildCount(NodeType.Attribute, "", "TelUse");
		}

		public int TelUseCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "TelUse");
			}
		}

		public bool HasTelUse()
		{
			return HasDomChild(NodeType.Attribute, "", "TelUse");
		}

		public core2.WorkHomeType NewTelUse()
		{
			return new core2.WorkHomeType();
		}

		public core2.WorkHomeType GetTelUseAt(int index)
		{
			return new core2.WorkHomeType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "TelUse", index)));
		}

		public XmlNode GetStartingTelUseCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "TelUse" );
		}

		public XmlNode GetAdvancedTelUseCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "TelUse", curNode );
		}

		public core2.WorkHomeType GetTelUseValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.WorkHomeType( curNode.Value );
		}


		public core2.WorkHomeType GetTelUse()
		{
			return GetTelUseAt(0);
		}

		public core2.WorkHomeType TelUse
		{
			get
			{
				return GetTelUseAt(0);
			}
		}

		public void RemoveTelUseAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "TelUse", index);
		}

		public void RemoveTelUse()
		{
			RemoveTelUseAt(0);
		}

		public XmlNode AddTelUse(core2.WorkHomeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "TelUse", newValue.ToString());
			return null;
		}

		public void InsertTelUseAt(core2.WorkHomeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "TelUse", index, newValue.ToString());
		}

		public void ReplaceTelUseAt(core2.WorkHomeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "TelUse", index, newValue.ToString());
		}
		#endregion // TelUse accessor methods

		#region TelUse collection
        public TelUseCollection	MyTelUses = new TelUseCollection( );

        public class TelUseCollection: IEnumerable
        {
            TelephoneStructure parent;
            public TelephoneStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public TelUseEnumerator GetEnumerator() 
			{
				return new TelUseEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TelUseEnumerator: IEnumerator 
        {
			int nIndex;
			TelephoneStructure parent;
			public TelUseEnumerator(TelephoneStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TelUseCount );
			}
			public core2.WorkHomeType  Current 
			{
				get 
				{
					return(parent.GetTelUseAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // TelUse collection

		#region TelMobile accessor methods
		public static int GetTelMobileMinCount()
		{
			return 0;
		}

		public static int TelMobileMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetTelMobileMaxCount()
		{
			return 1;
		}

		public static int TelMobileMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTelMobileCount()
		{
			return DomChildCount(NodeType.Attribute, "", "TelMobile");
		}

		public int TelMobileCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "TelMobile");
			}
		}

		public bool HasTelMobile()
		{
			return HasDomChild(NodeType.Attribute, "", "TelMobile");
		}

		public core2.YesNoType NewTelMobile()
		{
			return new core2.YesNoType();
		}

		public core2.YesNoType GetTelMobileAt(int index)
		{
			return new core2.YesNoType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "TelMobile", index)));
		}

		public XmlNode GetStartingTelMobileCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "TelMobile" );
		}

		public XmlNode GetAdvancedTelMobileCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "TelMobile", curNode );
		}

		public core2.YesNoType GetTelMobileValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.YesNoType( curNode.Value );
		}


		public core2.YesNoType GetTelMobile()
		{
			return GetTelMobileAt(0);
		}

		public core2.YesNoType TelMobile
		{
			get
			{
				return GetTelMobileAt(0);
			}
		}

		public void RemoveTelMobileAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "TelMobile", index);
		}

		public void RemoveTelMobile()
		{
			RemoveTelMobileAt(0);
		}

		public XmlNode AddTelMobile(core2.YesNoType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "TelMobile", newValue.ToString());
			return null;
		}

		public void InsertTelMobileAt(core2.YesNoType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "TelMobile", index, newValue.ToString());
		}

		public void ReplaceTelMobileAt(core2.YesNoType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "TelMobile", index, newValue.ToString());
		}
		#endregion // TelMobile accessor methods

		#region TelMobile collection
        public TelMobileCollection	MyTelMobiles = new TelMobileCollection( );

        public class TelMobileCollection: IEnumerable
        {
            TelephoneStructure parent;
            public TelephoneStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public TelMobileEnumerator GetEnumerator() 
			{
				return new TelMobileEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TelMobileEnumerator: IEnumerator 
        {
			int nIndex;
			TelephoneStructure parent;
			public TelMobileEnumerator(TelephoneStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TelMobileCount );
			}
			public core2.YesNoType  Current 
			{
				get 
				{
					return(parent.GetTelMobileAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // TelMobile collection

		#region TelPreferred accessor methods
		public static int GetTelPreferredMinCount()
		{
			return 0;
		}

		public static int TelPreferredMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetTelPreferredMaxCount()
		{
			return 1;
		}

		public static int TelPreferredMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTelPreferredCount()
		{
			return DomChildCount(NodeType.Attribute, "", "TelPreferred");
		}

		public int TelPreferredCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "TelPreferred");
			}
		}

		public bool HasTelPreferred()
		{
			return HasDomChild(NodeType.Attribute, "", "TelPreferred");
		}

		public core2.YesNoType NewTelPreferred()
		{
			return new core2.YesNoType();
		}

		public core2.YesNoType GetTelPreferredAt(int index)
		{
			return new core2.YesNoType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "TelPreferred", index)));
		}

		public XmlNode GetStartingTelPreferredCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "TelPreferred" );
		}

		public XmlNode GetAdvancedTelPreferredCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "TelPreferred", curNode );
		}

		public core2.YesNoType GetTelPreferredValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.YesNoType( curNode.Value );
		}


		public core2.YesNoType GetTelPreferred()
		{
			return GetTelPreferredAt(0);
		}

		public core2.YesNoType TelPreferred
		{
			get
			{
				return GetTelPreferredAt(0);
			}
		}

		public void RemoveTelPreferredAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "TelPreferred", index);
		}

		public void RemoveTelPreferred()
		{
			RemoveTelPreferredAt(0);
		}

		public XmlNode AddTelPreferred(core2.YesNoType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "TelPreferred", newValue.ToString());
			return null;
		}

		public void InsertTelPreferredAt(core2.YesNoType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "TelPreferred", index, newValue.ToString());
		}

		public void ReplaceTelPreferredAt(core2.YesNoType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "TelPreferred", index, newValue.ToString());
		}
		#endregion // TelPreferred accessor methods

		#region TelPreferred collection
        public TelPreferredCollection	MyTelPreferreds = new TelPreferredCollection( );

        public class TelPreferredCollection: IEnumerable
        {
            TelephoneStructure parent;
            public TelephoneStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public TelPreferredEnumerator GetEnumerator() 
			{
				return new TelPreferredEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TelPreferredEnumerator: IEnumerator 
        {
			int nIndex;
			TelephoneStructure parent;
			public TelPreferredEnumerator(TelephoneStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TelPreferredCount );
			}
			public core2.YesNoType  Current 
			{
				get 
				{
					return(parent.GetTelPreferredAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // TelPreferred collection

		#region TelNationalNumber accessor methods
		public static int GetTelNationalNumberMinCount()
		{
			return 1;
		}

		public static int TelNationalNumberMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetTelNationalNumberMaxCount()
		{
			return 1;
		}

		public static int TelNationalNumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTelNationalNumberCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber");
		}

		public int TelNationalNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber");
			}
		}

		public bool HasTelNationalNumber()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber");
		}

		public core2.TelephoneNumberType NewTelNationalNumber()
		{
			return new core2.TelephoneNumberType();
		}

		public core2.TelephoneNumberType GetTelNationalNumberAt(int index)
		{
			return new core2.TelephoneNumberType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber", index)));
		}

		public XmlNode GetStartingTelNationalNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber" );
		}

		public XmlNode GetAdvancedTelNationalNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber", curNode );
		}

		public core2.TelephoneNumberType GetTelNationalNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.TelephoneNumberType( curNode.InnerText );
		}


		public core2.TelephoneNumberType GetTelNationalNumber()
		{
			return GetTelNationalNumberAt(0);
		}

		public core2.TelephoneNumberType TelNationalNumber
		{
			get
			{
				return GetTelNationalNumberAt(0);
			}
		}

		public void RemoveTelNationalNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber", index);
		}

		public void RemoveTelNationalNumber()
		{
			RemoveTelNationalNumberAt(0);
		}

		public XmlNode AddTelNationalNumber(core2.TelephoneNumberType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber", newValue.ToString());
			return null;
		}

		public void InsertTelNationalNumberAt(core2.TelephoneNumberType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber", index, newValue.ToString());
		}

		public void ReplaceTelNationalNumberAt(core2.TelephoneNumberType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelNationalNumber", index, newValue.ToString());
		}
		#endregion // TelNationalNumber accessor methods

		#region TelNationalNumber collection
        public TelNationalNumberCollection	MyTelNationalNumbers = new TelNationalNumberCollection( );

        public class TelNationalNumberCollection: IEnumerable
        {
            TelephoneStructure parent;
            public TelephoneStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public TelNationalNumberEnumerator GetEnumerator() 
			{
				return new TelNationalNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TelNationalNumberEnumerator: IEnumerator 
        {
			int nIndex;
			TelephoneStructure parent;
			public TelNationalNumberEnumerator(TelephoneStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TelNationalNumberCount );
			}
			public core2.TelephoneNumberType  Current 
			{
				get 
				{
					return(parent.GetTelNationalNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // TelNationalNumber collection

		#region TelExtensionNumber accessor methods
		public static int GetTelExtensionNumberMinCount()
		{
			return 0;
		}

		public static int TelExtensionNumberMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetTelExtensionNumberMaxCount()
		{
			return 1;
		}

		public static int TelExtensionNumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTelExtensionNumberCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber");
		}

		public int TelExtensionNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber");
			}
		}

		public bool HasTelExtensionNumber()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber");
		}

		public core2.TelephoneExtensionType NewTelExtensionNumber()
		{
			return new core2.TelephoneExtensionType();
		}

		public core2.TelephoneExtensionType GetTelExtensionNumberAt(int index)
		{
			return new core2.TelephoneExtensionType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber", index)));
		}

		public XmlNode GetStartingTelExtensionNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber" );
		}

		public XmlNode GetAdvancedTelExtensionNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber", curNode );
		}

		public core2.TelephoneExtensionType GetTelExtensionNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.TelephoneExtensionType( curNode.InnerText );
		}


		public core2.TelephoneExtensionType GetTelExtensionNumber()
		{
			return GetTelExtensionNumberAt(0);
		}

		public core2.TelephoneExtensionType TelExtensionNumber
		{
			get
			{
				return GetTelExtensionNumberAt(0);
			}
		}

		public void RemoveTelExtensionNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber", index);
		}

		public void RemoveTelExtensionNumber()
		{
			RemoveTelExtensionNumberAt(0);
		}

		public XmlNode AddTelExtensionNumber(core2.TelephoneExtensionType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber", newValue.ToString());
			return null;
		}

		public void InsertTelExtensionNumberAt(core2.TelephoneExtensionType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber", index, newValue.ToString());
		}

		public void ReplaceTelExtensionNumberAt(core2.TelephoneExtensionType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelExtensionNumber", index, newValue.ToString());
		}
		#endregion // TelExtensionNumber accessor methods

		#region TelExtensionNumber collection
        public TelExtensionNumberCollection	MyTelExtensionNumbers = new TelExtensionNumberCollection( );

        public class TelExtensionNumberCollection: IEnumerable
        {
            TelephoneStructure parent;
            public TelephoneStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public TelExtensionNumberEnumerator GetEnumerator() 
			{
				return new TelExtensionNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TelExtensionNumberEnumerator: IEnumerator 
        {
			int nIndex;
			TelephoneStructure parent;
			public TelExtensionNumberEnumerator(TelephoneStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TelExtensionNumberCount );
			}
			public core2.TelephoneExtensionType  Current 
			{
				get 
				{
					return(parent.GetTelExtensionNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // TelExtensionNumber collection

		#region TelCountryCode accessor methods
		public static int GetTelCountryCodeMinCount()
		{
			return 0;
		}

		public static int TelCountryCodeMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetTelCountryCodeMaxCount()
		{
			return 1;
		}

		public static int TelCountryCodeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTelCountryCodeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode");
		}

		public int TelCountryCodeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode");
			}
		}

		public bool HasTelCountryCode()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode");
		}

		public core2.TelCountryCodeType NewTelCountryCode()
		{
			return new core2.TelCountryCodeType();
		}

		public core2.TelCountryCodeType GetTelCountryCodeAt(int index)
		{
			return new core2.TelCountryCodeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode", index)));
		}

		public XmlNode GetStartingTelCountryCodeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode" );
		}

		public XmlNode GetAdvancedTelCountryCodeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode", curNode );
		}

		public core2.TelCountryCodeType GetTelCountryCodeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new core2.TelCountryCodeType( curNode.InnerText );
		}


		public core2.TelCountryCodeType GetTelCountryCode()
		{
			return GetTelCountryCodeAt(0);
		}

		public core2.TelCountryCodeType TelCountryCode
		{
			get
			{
				return GetTelCountryCodeAt(0);
			}
		}

		public void RemoveTelCountryCodeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode", index);
		}

		public void RemoveTelCountryCode()
		{
			RemoveTelCountryCodeAt(0);
		}

		public XmlNode AddTelCountryCode(core2.TelCountryCodeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode", newValue.ToString());
			return null;
		}

		public void InsertTelCountryCodeAt(core2.TelCountryCodeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode", index, newValue.ToString());
		}

		public void ReplaceTelCountryCodeAt(core2.TelCountryCodeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "TelCountryCode", index, newValue.ToString());
		}
		#endregion // TelCountryCode accessor methods

		#region TelCountryCode collection
        public TelCountryCodeCollection	MyTelCountryCodes = new TelCountryCodeCollection( );

        public class TelCountryCodeCollection: IEnumerable
        {
            TelephoneStructure parent;
            public TelephoneStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public TelCountryCodeEnumerator GetEnumerator() 
			{
				return new TelCountryCodeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TelCountryCodeEnumerator: IEnumerator 
        {
			int nIndex;
			TelephoneStructure parent;
			public TelCountryCodeEnumerator(TelephoneStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TelCountryCodeCount );
			}
			public core2.TelCountryCodeType  Current 
			{
				get 
				{
					return(parent.GetTelCountryCodeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // TelCountryCode collection

        private void SetCollectionParents()
        {
            MyTelUses.Parent = this; 
            MyTelMobiles.Parent = this; 
            MyTelPreferreds.Parent = this; 
            MyTelNationalNumbers.Parent = this; 
            MyTelExtensionNumbers.Parent = this; 
            MyTelCountryCodes.Parent = this; 
	}
}
}
