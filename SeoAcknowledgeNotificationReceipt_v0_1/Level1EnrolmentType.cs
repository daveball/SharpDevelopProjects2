//
// Level1EnrolmentType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoAcknowledgeNotificationReceipt_v0_1.core3
{
	public class Level1EnrolmentType : Altova.Xml.Node
	{
		#region Forward constructors

		public Level1EnrolmentType() : base() { SetCollectionParents(); }

		public Level1EnrolmentType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Level1EnrolmentType(XmlNode node) : base(node) { SetCollectionParents(); }
		public Level1EnrolmentType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Level1EnrolmentType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "KnownFactType" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "KnownFactType", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "KnownFactValue" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "KnownFactValue", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "core:Level1EnrolmentType");
		}


		#region KnownFactType accessor methods
		public static int GetKnownFactTypeMinCount()
		{
			return 1;
		}

		public static int KnownFactTypeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetKnownFactTypeMaxCount()
		{
			return 1;
		}

		public static int KnownFactTypeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetKnownFactTypeCount()
		{
			return DomChildCount(NodeType.Element, "", "KnownFactType");
		}

		public int KnownFactTypeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "KnownFactType");
			}
		}

		public bool HasKnownFactType()
		{
			return HasDomChild(NodeType.Element, "", "KnownFactType");
		}

		public KnownFactTypeType NewKnownFactType()
		{
			return new KnownFactTypeType();
		}

		public KnownFactTypeType GetKnownFactTypeAt(int index)
		{
			return new KnownFactTypeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "KnownFactType", index)));
		}

		public XmlNode GetStartingKnownFactTypeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "KnownFactType" );
		}

		public XmlNode GetAdvancedKnownFactTypeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "KnownFactType", curNode );
		}

		public KnownFactTypeType GetKnownFactTypeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new KnownFactTypeType( curNode.InnerText );
		}


		public KnownFactTypeType GetKnownFactType()
		{
			return GetKnownFactTypeAt(0);
		}

		public KnownFactTypeType KnownFactType
		{
			get
			{
				return GetKnownFactTypeAt(0);
			}
		}

		public void RemoveKnownFactTypeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "KnownFactType", index);
		}

		public void RemoveKnownFactType()
		{
			RemoveKnownFactTypeAt(0);
		}

		public XmlNode AddKnownFactType(KnownFactTypeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "KnownFactType", newValue.ToString());
			return null;
		}

		public void InsertKnownFactTypeAt(KnownFactTypeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "KnownFactType", index, newValue.ToString());
		}

		public void ReplaceKnownFactTypeAt(KnownFactTypeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "KnownFactType", index, newValue.ToString());
		}
		#endregion // KnownFactType accessor methods

		#region KnownFactType collection
        public KnownFactTypeCollection	MyKnownFactTypes = new KnownFactTypeCollection( );

        public class KnownFactTypeCollection: IEnumerable
        {
            Level1EnrolmentType parent;
            public Level1EnrolmentType Parent
			{
				set
				{
					parent = value;
				}
			}
			public KnownFactTypeEnumerator GetEnumerator() 
			{
				return new KnownFactTypeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class KnownFactTypeEnumerator: IEnumerator 
        {
			int nIndex;
			Level1EnrolmentType parent;
			public KnownFactTypeEnumerator(Level1EnrolmentType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.KnownFactTypeCount );
			}
			public KnownFactTypeType  Current 
			{
				get 
				{
					return(parent.GetKnownFactTypeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // KnownFactType collection

		#region KnownFactValue accessor methods
		public static int GetKnownFactValueMinCount()
		{
			return 1;
		}

		public static int KnownFactValueMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetKnownFactValueMaxCount()
		{
			return 1;
		}

		public static int KnownFactValueMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetKnownFactValueCount()
		{
			return DomChildCount(NodeType.Element, "", "KnownFactValue");
		}

		public int KnownFactValueCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "KnownFactValue");
			}
		}

		public bool HasKnownFactValue()
		{
			return HasDomChild(NodeType.Element, "", "KnownFactValue");
		}

		public KnownFactValueType NewKnownFactValue()
		{
			return new KnownFactValueType();
		}

		public KnownFactValueType GetKnownFactValueAt(int index)
		{
			return new KnownFactValueType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "KnownFactValue", index)));
		}

		public XmlNode GetStartingKnownFactValueCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "KnownFactValue" );
		}

		public XmlNode GetAdvancedKnownFactValueCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "KnownFactValue", curNode );
		}

		public KnownFactValueType GetKnownFactValueValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new KnownFactValueType( curNode.InnerText );
		}


		public KnownFactValueType GetKnownFactValue()
		{
			return GetKnownFactValueAt(0);
		}

		public KnownFactValueType KnownFactValue
		{
			get
			{
				return GetKnownFactValueAt(0);
			}
		}

		public void RemoveKnownFactValueAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "KnownFactValue", index);
		}

		public void RemoveKnownFactValue()
		{
			RemoveKnownFactValueAt(0);
		}

		public XmlNode AddKnownFactValue(KnownFactValueType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "KnownFactValue", newValue.ToString());
			return null;
		}

		public void InsertKnownFactValueAt(KnownFactValueType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "KnownFactValue", index, newValue.ToString());
		}

		public void ReplaceKnownFactValueAt(KnownFactValueType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "KnownFactValue", index, newValue.ToString());
		}
		#endregion // KnownFactValue accessor methods

		#region KnownFactValue collection
        public KnownFactValueCollection	MyKnownFactValues = new KnownFactValueCollection( );

        public class KnownFactValueCollection: IEnumerable
        {
            Level1EnrolmentType parent;
            public Level1EnrolmentType Parent
			{
				set
				{
					parent = value;
				}
			}
			public KnownFactValueEnumerator GetEnumerator() 
			{
				return new KnownFactValueEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class KnownFactValueEnumerator: IEnumerator 
        {
			int nIndex;
			Level1EnrolmentType parent;
			public KnownFactValueEnumerator(Level1EnrolmentType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.KnownFactValueCount );
			}
			public KnownFactValueType  Current 
			{
				get 
				{
					return(parent.GetKnownFactValueAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // KnownFactValue collection

        private void SetCollectionParents()
        {
            MyKnownFactTypes.Parent = this; 
            MyKnownFactValues.Parent = this; 
	}
}
}
