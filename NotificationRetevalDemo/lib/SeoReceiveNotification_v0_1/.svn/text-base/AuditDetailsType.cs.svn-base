//
// AuditDetailsType.cs
//
// This file was generated by XMLSpy 2008r2sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoReceiveNotification_v0_1.core3
{
	public class AuditDetailsType : Altova.Xml.Node
	{
		#region Forward constructors

		public AuditDetailsType() : base() { SetCollectionParents(); }

		public AuditDetailsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public AuditDetailsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public AuditDetailsType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public AuditDetailsType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "OrganisationName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "OrganisationName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "SourceSystem" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "SourceSystem", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ContactDetails" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ContactDetails", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new AuditContactDetailsType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "DateTime" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "DateTime", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "core:AuditDetailsType");
		}


		#region OrganisationName accessor methods
		public static int GetOrganisationNameMinCount()
		{
			return 1;
		}

		public static int OrganisationNameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetOrganisationNameMaxCount()
		{
			return 1;
		}

		public static int OrganisationNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOrganisationNameCount()
		{
			return DomChildCount(NodeType.Element, "", "OrganisationName");
		}

		public int OrganisationNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "OrganisationName");
			}
		}

		public bool HasOrganisationName()
		{
			return HasDomChild(NodeType.Element, "", "OrganisationName");
		}

		public OrganisationNameType NewOrganisationName()
		{
			return new OrganisationNameType();
		}

		public OrganisationNameType GetOrganisationNameAt(int index)
		{
			return new OrganisationNameType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "OrganisationName", index)));
		}

		public XmlNode GetStartingOrganisationNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "OrganisationName" );
		}

		public XmlNode GetAdvancedOrganisationNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "OrganisationName", curNode );
		}

		public OrganisationNameType GetOrganisationNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new OrganisationNameType( curNode.InnerText );
		}


		public OrganisationNameType GetOrganisationName()
		{
			return GetOrganisationNameAt(0);
		}

		public OrganisationNameType OrganisationName
		{
			get
			{
				return GetOrganisationNameAt(0);
			}
		}

		public void RemoveOrganisationNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "OrganisationName", index);
		}

		public void RemoveOrganisationName()
		{
			RemoveOrganisationNameAt(0);
		}

		public XmlNode AddOrganisationName(OrganisationNameType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "OrganisationName", newValue.ToString());
			return null;
		}

		public void InsertOrganisationNameAt(OrganisationNameType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "OrganisationName", index, newValue.ToString());
		}

		public void ReplaceOrganisationNameAt(OrganisationNameType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "OrganisationName", index, newValue.ToString());
		}
		#endregion // OrganisationName accessor methods

		#region OrganisationName collection
        public OrganisationNameCollection	MyOrganisationNames = new OrganisationNameCollection( );

        public class OrganisationNameCollection: IEnumerable
        {
            AuditDetailsType parent;
            public AuditDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public OrganisationNameEnumerator GetEnumerator() 
			{
				return new OrganisationNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class OrganisationNameEnumerator: IEnumerator 
        {
			int nIndex;
			AuditDetailsType parent;
			public OrganisationNameEnumerator(AuditDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.OrganisationNameCount );
			}
			public OrganisationNameType  Current 
			{
				get 
				{
					return(parent.GetOrganisationNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // OrganisationName collection

		#region SourceSystem accessor methods
		public static int GetSourceSystemMinCount()
		{
			return 0;
		}

		public static int SourceSystemMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetSourceSystemMaxCount()
		{
			return 1;
		}

		public static int SourceSystemMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSourceSystemCount()
		{
			return DomChildCount(NodeType.Element, "", "SourceSystem");
		}

		public int SourceSystemCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "SourceSystem");
			}
		}

		public bool HasSourceSystem()
		{
			return HasDomChild(NodeType.Element, "", "SourceSystem");
		}

		public SourceSystemType NewSourceSystem()
		{
			return new SourceSystemType();
		}

		public SourceSystemType GetSourceSystemAt(int index)
		{
			return new SourceSystemType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "SourceSystem", index)));
		}

		public XmlNode GetStartingSourceSystemCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "SourceSystem" );
		}

		public XmlNode GetAdvancedSourceSystemCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "SourceSystem", curNode );
		}

		public SourceSystemType GetSourceSystemValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SourceSystemType( curNode.InnerText );
		}


		public SourceSystemType GetSourceSystem()
		{
			return GetSourceSystemAt(0);
		}

		public SourceSystemType SourceSystem
		{
			get
			{
				return GetSourceSystemAt(0);
			}
		}

		public void RemoveSourceSystemAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "SourceSystem", index);
		}

		public void RemoveSourceSystem()
		{
			RemoveSourceSystemAt(0);
		}

		public XmlNode AddSourceSystem(SourceSystemType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "SourceSystem", newValue.ToString());
			return null;
		}

		public void InsertSourceSystemAt(SourceSystemType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "SourceSystem", index, newValue.ToString());
		}

		public void ReplaceSourceSystemAt(SourceSystemType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "SourceSystem", index, newValue.ToString());
		}
		#endregion // SourceSystem accessor methods

		#region SourceSystem collection
        public SourceSystemCollection	MySourceSystems = new SourceSystemCollection( );

        public class SourceSystemCollection: IEnumerable
        {
            AuditDetailsType parent;
            public AuditDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public SourceSystemEnumerator GetEnumerator() 
			{
				return new SourceSystemEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class SourceSystemEnumerator: IEnumerator 
        {
			int nIndex;
			AuditDetailsType parent;
			public SourceSystemEnumerator(AuditDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.SourceSystemCount );
			}
			public SourceSystemType  Current 
			{
				get 
				{
					return(parent.GetSourceSystemAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // SourceSystem collection

		#region ContactDetails accessor methods
		public static int GetContactDetailsMinCount()
		{
			return 0;
		}

		public static int ContactDetailsMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetContactDetailsMaxCount()
		{
			return 1;
		}

		public static int ContactDetailsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactDetailsCount()
		{
			return DomChildCount(NodeType.Element, "", "ContactDetails");
		}

		public int ContactDetailsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ContactDetails");
			}
		}

		public bool HasContactDetails()
		{
			return HasDomChild(NodeType.Element, "", "ContactDetails");
		}

		public AuditContactDetailsType NewContactDetails()
		{
			return new AuditContactDetailsType(domNode.OwnerDocument.CreateElement("ContactDetails", ""));
		}

		public AuditContactDetailsType GetContactDetailsAt(int index)
		{
			return new AuditContactDetailsType(GetDomChildAt(NodeType.Element, "", "ContactDetails", index));
		}

		public XmlNode GetStartingContactDetailsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ContactDetails" );
		}

		public XmlNode GetAdvancedContactDetailsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ContactDetails", curNode );
		}

		public AuditContactDetailsType GetContactDetailsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AuditContactDetailsType( curNode );
		}


		public AuditContactDetailsType GetContactDetails()
		{
			return GetContactDetailsAt(0);
		}

		public AuditContactDetailsType ContactDetails
		{
			get
			{
				return GetContactDetailsAt(0);
			}
		}

		public void RemoveContactDetailsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ContactDetails", index);
		}

		public void RemoveContactDetails()
		{
			RemoveContactDetailsAt(0);
		}

		public XmlNode AddContactDetails(AuditContactDetailsType newValue)
		{
			return AppendDomElement("", "ContactDetails", newValue);
		}

		public void InsertContactDetailsAt(AuditContactDetailsType newValue, int index)
		{
			InsertDomElementAt("", "ContactDetails", index, newValue);
		}

		public void ReplaceContactDetailsAt(AuditContactDetailsType newValue, int index)
		{
			ReplaceDomElementAt("", "ContactDetails", index, newValue);
		}
		#endregion // ContactDetails accessor methods

		#region ContactDetails collection
        public ContactDetailsCollection	MyContactDetailss = new ContactDetailsCollection( );

        public class ContactDetailsCollection: IEnumerable
        {
            AuditDetailsType parent;
            public AuditDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactDetailsEnumerator GetEnumerator() 
			{
				return new ContactDetailsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactDetailsEnumerator: IEnumerator 
        {
			int nIndex;
			AuditDetailsType parent;
			public ContactDetailsEnumerator(AuditDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactDetailsCount );
			}
			public AuditContactDetailsType  Current 
			{
				get 
				{
					return(parent.GetContactDetailsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactDetails collection

		#region DateTime accessor methods
		public static int GetDateTimeMinCount()
		{
			return 1;
		}

		public static int DateTimeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetDateTimeMaxCount()
		{
			return 1;
		}

		public static int DateTimeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDateTimeCount()
		{
			return DomChildCount(NodeType.Element, "", "DateTime");
		}

		public int DateTimeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DateTime");
			}
		}

		public bool HasDateTime()
		{
			return HasDomChild(NodeType.Element, "", "DateTime");
		}

		public SchemaDateTime NewDateTime()
		{
			return new SchemaDateTime();
		}

		public SchemaDateTime GetDateTimeAt(int index)
		{
			return new SchemaDateTime(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "DateTime", index)));
		}

		public XmlNode GetStartingDateTimeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DateTime" );
		}

		public XmlNode GetAdvancedDateTimeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DateTime", curNode );
		}

		public SchemaDateTime GetDateTimeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDateTime( curNode.InnerText );
		}


		public SchemaDateTime GetDateTime()
		{
			return GetDateTimeAt(0);
		}

		public SchemaDateTime DateTime
		{
			get
			{
				return GetDateTimeAt(0);
			}
		}

		public void RemoveDateTimeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DateTime", index);
		}

		public void RemoveDateTime()
		{
			RemoveDateTimeAt(0);
		}

		public XmlNode AddDateTime(SchemaDateTime newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "DateTime", newValue.ToString());
			return null;
		}

		public void InsertDateTimeAt(SchemaDateTime newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "DateTime", index, newValue.ToString());
		}

		public void ReplaceDateTimeAt(SchemaDateTime newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "DateTime", index, newValue.ToString());
		}
		#endregion // DateTime accessor methods

		#region DateTime collection
        public DateTimeCollection	MyDateTimes = new DateTimeCollection( );

        public class DateTimeCollection: IEnumerable
        {
            AuditDetailsType parent;
            public AuditDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DateTimeEnumerator GetEnumerator() 
			{
				return new DateTimeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DateTimeEnumerator: IEnumerator 
        {
			int nIndex;
			AuditDetailsType parent;
			public DateTimeEnumerator(AuditDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DateTimeCount );
			}
			public SchemaDateTime  Current 
			{
				get 
				{
					return(parent.GetDateTimeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DateTime collection

        private void SetCollectionParents()
        {
            MyOrganisationNames.Parent = this; 
            MySourceSystems.Parent = this; 
            MyContactDetailss.Parent = this; 
            MyDateTimes.Parent = this; 
	}
}
}
