//
// AuditContactDetailsType.cs
//
// This file was generated by XMLSpy 2012sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoAcknowledgeNotificationReceipt_v0_1.core3
{
	public class AuditContactDetailsType : Altova.Xml.Node
	{
		#region Forward constructors

		public AuditContactDetailsType() : base() { SetCollectionParents(); }

		public AuditContactDetailsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public AuditContactDetailsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public AuditContactDetailsType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public AuditContactDetailsType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "NameDetails" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "NameDetails", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new PersonDescriptives2.PersonNameStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "PhoneNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "PhoneNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new AddressAndPersonalDetails2.TelephoneStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "FaxNumber" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "FaxNumber", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new AddressAndPersonalDetails2.FaxStructure(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "EMailAddress" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "EMailAddress", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new AddressAndPersonalDetails2.EmailStructure(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "core:AuditContactDetailsType");
		}


		#region NameDetails accessor methods
		public static int GetNameDetailsMinCount()
		{
			return 1;
		}

		public static int NameDetailsMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNameDetailsMaxCount()
		{
			return 1;
		}

		public static int NameDetailsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameDetailsCount()
		{
			return DomChildCount(NodeType.Element, "", "NameDetails");
		}

		public int NameDetailsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "NameDetails");
			}
		}

		public bool HasNameDetails()
		{
			return HasDomChild(NodeType.Element, "", "NameDetails");
		}

		public PersonDescriptives2.PersonNameStructure NewNameDetails()
		{
			return new PersonDescriptives2.PersonNameStructure(domNode.OwnerDocument.CreateElement("NameDetails", ""));
		}

		public PersonDescriptives2.PersonNameStructure GetNameDetailsAt(int index)
		{
			return new PersonDescriptives2.PersonNameStructure(GetDomChildAt(NodeType.Element, "", "NameDetails", index));
		}

		public XmlNode GetStartingNameDetailsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "NameDetails" );
		}

		public XmlNode GetAdvancedNameDetailsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "NameDetails", curNode );
		}

		public PersonDescriptives2.PersonNameStructure GetNameDetailsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PersonDescriptives2.PersonNameStructure( curNode );
		}


		public PersonDescriptives2.PersonNameStructure GetNameDetails()
		{
			return GetNameDetailsAt(0);
		}

		public PersonDescriptives2.PersonNameStructure NameDetails
		{
			get
			{
				return GetNameDetailsAt(0);
			}
		}

		public void RemoveNameDetailsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "NameDetails", index);
		}

		public void RemoveNameDetails()
		{
			RemoveNameDetailsAt(0);
		}

		public XmlNode AddNameDetails(PersonDescriptives2.PersonNameStructure newValue)
		{
			return AppendDomElement("", "NameDetails", newValue);
		}

		public void InsertNameDetailsAt(PersonDescriptives2.PersonNameStructure newValue, int index)
		{
			InsertDomElementAt("", "NameDetails", index, newValue);
		}

		public void ReplaceNameDetailsAt(PersonDescriptives2.PersonNameStructure newValue, int index)
		{
			ReplaceDomElementAt("", "NameDetails", index, newValue);
		}
		#endregion // NameDetails accessor methods

		#region NameDetails collection
        public NameDetailsCollection	MyNameDetailss = new NameDetailsCollection( );

        public class NameDetailsCollection: IEnumerable
        {
            AuditContactDetailsType parent;
            public AuditContactDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameDetailsEnumerator GetEnumerator() 
			{
				return new NameDetailsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameDetailsEnumerator: IEnumerator 
        {
			int nIndex;
			AuditContactDetailsType parent;
			public NameDetailsEnumerator(AuditContactDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameDetailsCount );
			}
			public PersonDescriptives2.PersonNameStructure  Current 
			{
				get 
				{
					return(parent.GetNameDetailsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // NameDetails collection

		#region PhoneNumber accessor methods
		public static int GetPhoneNumberMinCount()
		{
			return 1;
		}

		public static int PhoneNumberMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetPhoneNumberMaxCount()
		{
			return 2;
		}

		public static int PhoneNumberMaxCount
		{
			get
			{
				return 2;
			}
		}

		public int GetPhoneNumberCount()
		{
			return DomChildCount(NodeType.Element, "", "PhoneNumber");
		}

		public int PhoneNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "PhoneNumber");
			}
		}

		public bool HasPhoneNumber()
		{
			return HasDomChild(NodeType.Element, "", "PhoneNumber");
		}

		public AddressAndPersonalDetails2.TelephoneStructure NewPhoneNumber()
		{
			return new AddressAndPersonalDetails2.TelephoneStructure(domNode.OwnerDocument.CreateElement("PhoneNumber", ""));
		}

		public AddressAndPersonalDetails2.TelephoneStructure GetPhoneNumberAt(int index)
		{
			return new AddressAndPersonalDetails2.TelephoneStructure(GetDomChildAt(NodeType.Element, "", "PhoneNumber", index));
		}

		public XmlNode GetStartingPhoneNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "PhoneNumber" );
		}

		public XmlNode GetAdvancedPhoneNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "PhoneNumber", curNode );
		}

		public AddressAndPersonalDetails2.TelephoneStructure GetPhoneNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AddressAndPersonalDetails2.TelephoneStructure( curNode );
		}


		public AddressAndPersonalDetails2.TelephoneStructure GetPhoneNumber()
		{
			return GetPhoneNumberAt(0);
		}

		public AddressAndPersonalDetails2.TelephoneStructure PhoneNumber
		{
			get
			{
				return GetPhoneNumberAt(0);
			}
		}

		public void RemovePhoneNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "PhoneNumber", index);
		}

		public void RemovePhoneNumber()
		{
			while (HasPhoneNumber())
				RemovePhoneNumberAt(0);
		}

		public XmlNode AddPhoneNumber(AddressAndPersonalDetails2.TelephoneStructure newValue)
		{
			return AppendDomElement("", "PhoneNumber", newValue);
		}

		public void InsertPhoneNumberAt(AddressAndPersonalDetails2.TelephoneStructure newValue, int index)
		{
			InsertDomElementAt("", "PhoneNumber", index, newValue);
		}

		public void ReplacePhoneNumberAt(AddressAndPersonalDetails2.TelephoneStructure newValue, int index)
		{
			ReplaceDomElementAt("", "PhoneNumber", index, newValue);
		}
		#endregion // PhoneNumber accessor methods

		#region PhoneNumber collection
        public PhoneNumberCollection	MyPhoneNumbers = new PhoneNumberCollection( );

        public class PhoneNumberCollection: IEnumerable
        {
            AuditContactDetailsType parent;
            public AuditContactDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PhoneNumberEnumerator GetEnumerator() 
			{
				return new PhoneNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PhoneNumberEnumerator: IEnumerator 
        {
			int nIndex;
			AuditContactDetailsType parent;
			public PhoneNumberEnumerator(AuditContactDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PhoneNumberCount );
			}
			public AddressAndPersonalDetails2.TelephoneStructure  Current 
			{
				get 
				{
					return(parent.GetPhoneNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PhoneNumber collection

		#region FaxNumber accessor methods
		public static int GetFaxNumberMinCount()
		{
			return 0;
		}

		public static int FaxNumberMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetFaxNumberMaxCount()
		{
			return 1;
		}

		public static int FaxNumberMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFaxNumberCount()
		{
			return DomChildCount(NodeType.Element, "", "FaxNumber");
		}

		public int FaxNumberCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "FaxNumber");
			}
		}

		public bool HasFaxNumber()
		{
			return HasDomChild(NodeType.Element, "", "FaxNumber");
		}

		public AddressAndPersonalDetails2.FaxStructure NewFaxNumber()
		{
			return new AddressAndPersonalDetails2.FaxStructure(domNode.OwnerDocument.CreateElement("FaxNumber", ""));
		}

		public AddressAndPersonalDetails2.FaxStructure GetFaxNumberAt(int index)
		{
			return new AddressAndPersonalDetails2.FaxStructure(GetDomChildAt(NodeType.Element, "", "FaxNumber", index));
		}

		public XmlNode GetStartingFaxNumberCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "FaxNumber" );
		}

		public XmlNode GetAdvancedFaxNumberCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "FaxNumber", curNode );
		}

		public AddressAndPersonalDetails2.FaxStructure GetFaxNumberValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AddressAndPersonalDetails2.FaxStructure( curNode );
		}


		public AddressAndPersonalDetails2.FaxStructure GetFaxNumber()
		{
			return GetFaxNumberAt(0);
		}

		public AddressAndPersonalDetails2.FaxStructure FaxNumber
		{
			get
			{
				return GetFaxNumberAt(0);
			}
		}

		public void RemoveFaxNumberAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "FaxNumber", index);
		}

		public void RemoveFaxNumber()
		{
			RemoveFaxNumberAt(0);
		}

		public XmlNode AddFaxNumber(AddressAndPersonalDetails2.FaxStructure newValue)
		{
			return AppendDomElement("", "FaxNumber", newValue);
		}

		public void InsertFaxNumberAt(AddressAndPersonalDetails2.FaxStructure newValue, int index)
		{
			InsertDomElementAt("", "FaxNumber", index, newValue);
		}

		public void ReplaceFaxNumberAt(AddressAndPersonalDetails2.FaxStructure newValue, int index)
		{
			ReplaceDomElementAt("", "FaxNumber", index, newValue);
		}
		#endregion // FaxNumber accessor methods

		#region FaxNumber collection
        public FaxNumberCollection	MyFaxNumbers = new FaxNumberCollection( );

        public class FaxNumberCollection: IEnumerable
        {
            AuditContactDetailsType parent;
            public AuditContactDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public FaxNumberEnumerator GetEnumerator() 
			{
				return new FaxNumberEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FaxNumberEnumerator: IEnumerator 
        {
			int nIndex;
			AuditContactDetailsType parent;
			public FaxNumberEnumerator(AuditContactDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FaxNumberCount );
			}
			public AddressAndPersonalDetails2.FaxStructure  Current 
			{
				get 
				{
					return(parent.GetFaxNumberAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // FaxNumber collection

		#region EMailAddress accessor methods
		public static int GetEMailAddressMinCount()
		{
			return 0;
		}

		public static int EMailAddressMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetEMailAddressMaxCount()
		{
			return 1;
		}

		public static int EMailAddressMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEMailAddressCount()
		{
			return DomChildCount(NodeType.Element, "", "EMailAddress");
		}

		public int EMailAddressCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "EMailAddress");
			}
		}

		public bool HasEMailAddress()
		{
			return HasDomChild(NodeType.Element, "", "EMailAddress");
		}

		public AddressAndPersonalDetails2.EmailStructure NewEMailAddress()
		{
			return new AddressAndPersonalDetails2.EmailStructure(domNode.OwnerDocument.CreateElement("EMailAddress", ""));
		}

		public AddressAndPersonalDetails2.EmailStructure GetEMailAddressAt(int index)
		{
			return new AddressAndPersonalDetails2.EmailStructure(GetDomChildAt(NodeType.Element, "", "EMailAddress", index));
		}

		public XmlNode GetStartingEMailAddressCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "EMailAddress" );
		}

		public XmlNode GetAdvancedEMailAddressCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "EMailAddress", curNode );
		}

		public AddressAndPersonalDetails2.EmailStructure GetEMailAddressValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AddressAndPersonalDetails2.EmailStructure( curNode );
		}


		public AddressAndPersonalDetails2.EmailStructure GetEMailAddress()
		{
			return GetEMailAddressAt(0);
		}

		public AddressAndPersonalDetails2.EmailStructure EMailAddress
		{
			get
			{
				return GetEMailAddressAt(0);
			}
		}

		public void RemoveEMailAddressAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "EMailAddress", index);
		}

		public void RemoveEMailAddress()
		{
			RemoveEMailAddressAt(0);
		}

		public XmlNode AddEMailAddress(AddressAndPersonalDetails2.EmailStructure newValue)
		{
			return AppendDomElement("", "EMailAddress", newValue);
		}

		public void InsertEMailAddressAt(AddressAndPersonalDetails2.EmailStructure newValue, int index)
		{
			InsertDomElementAt("", "EMailAddress", index, newValue);
		}

		public void ReplaceEMailAddressAt(AddressAndPersonalDetails2.EmailStructure newValue, int index)
		{
			ReplaceDomElementAt("", "EMailAddress", index, newValue);
		}
		#endregion // EMailAddress accessor methods

		#region EMailAddress collection
        public EMailAddressCollection	MyEMailAddresss = new EMailAddressCollection( );

        public class EMailAddressCollection: IEnumerable
        {
            AuditContactDetailsType parent;
            public AuditContactDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EMailAddressEnumerator GetEnumerator() 
			{
				return new EMailAddressEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EMailAddressEnumerator: IEnumerator 
        {
			int nIndex;
			AuditContactDetailsType parent;
			public EMailAddressEnumerator(AuditContactDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EMailAddressCount );
			}
			public AddressAndPersonalDetails2.EmailStructure  Current 
			{
				get 
				{
					return(parent.GetEMailAddressAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EMailAddress collection

        private void SetCollectionParents()
        {
            MyNameDetailss.Parent = this; 
            MyPhoneNumbers.Parent = this; 
            MyFaxNumbers.Parent = this; 
            MyEMailAddresss.Parent = this; 
	}
}
}
