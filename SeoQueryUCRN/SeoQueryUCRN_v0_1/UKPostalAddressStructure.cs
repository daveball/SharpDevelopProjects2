//
// UKPostalAddressStructure.cs
//
// This file was generated by XMLSpy 2012r2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoQueryUCRN_v0_1.AddressAndPersonalDetails2
{
	public class UKPostalAddressStructure : Altova.Xml.Node
	{
		#region Forward constructors

		public UKPostalAddressStructure() : base() { SetCollectionParents(); }

		public UKPostalAddressStructure(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public UKPostalAddressStructure(XmlNode node) : base(node) { SetCollectionParents(); }
		public UKPostalAddressStructure(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public UKPostalAddressStructure(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "AddressAndPersonalDetails:UKPostalAddressStructure");
		}


		#region Line accessor methods
		public static int GetLineMinCount()
		{
			return 2;
		}

		public static int LineMinCount
		{
			get
			{
				return 2;
			}
		}

		public static int GetLineMaxCount()
		{
			return 5;
		}

		public static int LineMaxCount
		{
			get
			{
				return 5;
			}
		}

		public int GetLineCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line");
		}

		public int LineCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line");
			}
		}

		public bool HasLine()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line");
		}

		public AddressLineType NewLine()
		{
			return new AddressLineType();
		}

		public AddressLineType GetLineAt(int index)
		{
			return new AddressLineType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line", index)));
		}

		public XmlNode GetStartingLineCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line" );
		}

		public XmlNode GetAdvancedLineCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line", curNode );
		}

		public AddressLineType GetLineValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AddressLineType( curNode.InnerText );
		}


		public AddressLineType GetLine()
		{
			return GetLineAt(0);
		}

		public AddressLineType Line
		{
			get
			{
				return GetLineAt(0);
			}
		}

		public void RemoveLineAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line", index);
		}

		public void RemoveLine()
		{
			while (HasLine())
				RemoveLineAt(0);
		}

		public XmlNode AddLine(AddressLineType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line", newValue.ToString());
			return null;
		}

		public void InsertLineAt(AddressLineType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line", index, newValue.ToString());
		}

		public void ReplaceLineAt(AddressLineType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "Line", index, newValue.ToString());
		}
		#endregion // Line accessor methods

		#region Line collection
        public LineCollection	MyLines = new LineCollection( );

        public class LineCollection: IEnumerable
        {
            UKPostalAddressStructure parent;
            public UKPostalAddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public LineEnumerator GetEnumerator() 
			{
				return new LineEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LineEnumerator: IEnumerator 
        {
			int nIndex;
			UKPostalAddressStructure parent;
			public LineEnumerator(UKPostalAddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LineCount );
			}
			public AddressLineType  Current 
			{
				get 
				{
					return(parent.GetLineAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Line collection

		#region PostCode accessor methods
		public static int GetPostCodeMinCount()
		{
			return 0;
		}

		public static int PostCodeMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPostCodeMaxCount()
		{
			return 1;
		}

		public static int PostCodeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPostCodeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode");
		}

		public int PostCodeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode");
			}
		}

		public bool HasPostCode()
		{
			return HasDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode");
		}

		public bs76662.PostCodeType NewPostCode()
		{
			return new bs76662.PostCodeType();
		}

		public bs76662.PostCodeType GetPostCodeAt(int index)
		{
			return new bs76662.PostCodeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode", index)));
		}

		public XmlNode GetStartingPostCodeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode" );
		}

		public XmlNode GetAdvancedPostCodeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode", curNode );
		}

		public bs76662.PostCodeType GetPostCodeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new bs76662.PostCodeType( curNode.InnerText );
		}


		public bs76662.PostCodeType GetPostCode()
		{
			return GetPostCodeAt(0);
		}

		public bs76662.PostCodeType PostCode
		{
			get
			{
				return GetPostCodeAt(0);
			}
		}

		public void RemovePostCodeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode", index);
		}

		public void RemovePostCode()
		{
			RemovePostCodeAt(0);
		}

		public XmlNode AddPostCode(bs76662.PostCodeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode", newValue.ToString());
			return null;
		}

		public void InsertPostCodeAt(bs76662.PostCodeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode", index, newValue.ToString());
		}

		public void ReplacePostCodeAt(bs76662.PostCodeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.govtalk.gov.uk/people/AddressAndPersonalDetails", "PostCode", index, newValue.ToString());
		}
		#endregion // PostCode accessor methods

		#region PostCode collection
        public PostCodeCollection	MyPostCodes = new PostCodeCollection( );

        public class PostCodeCollection: IEnumerable
        {
            UKPostalAddressStructure parent;
            public UKPostalAddressStructure Parent
			{
				set
				{
					parent = value;
				}
			}
			public PostCodeEnumerator GetEnumerator() 
			{
				return new PostCodeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PostCodeEnumerator: IEnumerator 
        {
			int nIndex;
			UKPostalAddressStructure parent;
			public PostCodeEnumerator(UKPostalAddressStructure par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PostCodeCount );
			}
			public bs76662.PostCodeType  Current 
			{
				get 
				{
					return(parent.GetPostCodeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PostCode collection

        private void SetCollectionParents()
        {
            MyLines.Parent = this; 
            MyPostCodes.Parent = this; 
	}
}
}
