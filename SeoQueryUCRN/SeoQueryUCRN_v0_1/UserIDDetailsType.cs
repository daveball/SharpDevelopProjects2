//
// UserIDDetailsType.cs
//
// This file was generated by XMLSpy 2012r2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SeoQueryUCRN_v0_1.core3
{
	public class UserIDDetailsType : Altova.Xml.Node
	{
		#region Forward constructors

		public UserIDDetailsType() : base() { SetCollectionParents(); }

		public UserIDDetailsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public UserIDDetailsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public UserIDDetailsType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public UserIDDetailsType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "UserID" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "UserID", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "SourceSystem" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "SourceSystem", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "core:UserIDDetailsType");
		}


		#region UserID accessor methods
		public static int GetUserIDMinCount()
		{
			return 1;
		}

		public static int UserIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetUserIDMaxCount()
		{
			return 1;
		}

		public static int UserIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUserIDCount()
		{
			return DomChildCount(NodeType.Element, "", "UserID");
		}

		public int UserIDCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UserID");
			}
		}

		public bool HasUserID()
		{
			return HasDomChild(NodeType.Element, "", "UserID");
		}

		public UserIDType NewUserID()
		{
			return new UserIDType();
		}

		public UserIDType GetUserIDAt(int index)
		{
			return new UserIDType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "UserID", index)));
		}

		public XmlNode GetStartingUserIDCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "UserID" );
		}

		public XmlNode GetAdvancedUserIDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "UserID", curNode );
		}

		public UserIDType GetUserIDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new UserIDType( curNode.InnerText );
		}


		public UserIDType GetUserID()
		{
			return GetUserIDAt(0);
		}

		public UserIDType UserID
		{
			get
			{
				return GetUserIDAt(0);
			}
		}

		public void RemoveUserIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UserID", index);
		}

		public void RemoveUserID()
		{
			RemoveUserIDAt(0);
		}

		public XmlNode AddUserID(UserIDType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "UserID", newValue.ToString());
			return null;
		}

		public void InsertUserIDAt(UserIDType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "UserID", index, newValue.ToString());
		}

		public void ReplaceUserIDAt(UserIDType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "UserID", index, newValue.ToString());
		}
		#endregion // UserID accessor methods

		#region UserID collection
        public UserIDCollection	MyUserIDs = new UserIDCollection( );

        public class UserIDCollection: IEnumerable
        {
            UserIDDetailsType parent;
            public UserIDDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UserIDEnumerator GetEnumerator() 
			{
				return new UserIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UserIDEnumerator: IEnumerator 
        {
			int nIndex;
			UserIDDetailsType parent;
			public UserIDEnumerator(UserIDDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UserIDCount );
			}
			public UserIDType  Current 
			{
				get 
				{
					return(parent.GetUserIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UserID collection

		#region SourceSystem accessor methods
		public static int GetSourceSystemMinCount()
		{
			return 1;
		}

		public static int SourceSystemMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetSourceSystemMaxCount()
		{
			return 1;
		}

		public static int SourceSystemMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSourceSystemCount()
		{
			return DomChildCount(NodeType.Element, "", "SourceSystem");
		}

		public int SourceSystemCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "SourceSystem");
			}
		}

		public bool HasSourceSystem()
		{
			return HasDomChild(NodeType.Element, "", "SourceSystem");
		}

		public UserIDSystemChoiceType NewSourceSystem()
		{
			return new UserIDSystemChoiceType();
		}

		public UserIDSystemChoiceType GetSourceSystemAt(int index)
		{
			return new UserIDSystemChoiceType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "SourceSystem", index)));
		}

		public XmlNode GetStartingSourceSystemCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "SourceSystem" );
		}

		public XmlNode GetAdvancedSourceSystemCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "SourceSystem", curNode );
		}

		public UserIDSystemChoiceType GetSourceSystemValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new UserIDSystemChoiceType( curNode.InnerText );
		}


		public UserIDSystemChoiceType GetSourceSystem()
		{
			return GetSourceSystemAt(0);
		}

		public UserIDSystemChoiceType SourceSystem
		{
			get
			{
				return GetSourceSystemAt(0);
			}
		}

		public void RemoveSourceSystemAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "SourceSystem", index);
		}

		public void RemoveSourceSystem()
		{
			RemoveSourceSystemAt(0);
		}

		public XmlNode AddSourceSystem(UserIDSystemChoiceType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "SourceSystem", newValue.ToString());
			return null;
		}

		public void InsertSourceSystemAt(UserIDSystemChoiceType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "SourceSystem", index, newValue.ToString());
		}

		public void ReplaceSourceSystemAt(UserIDSystemChoiceType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "SourceSystem", index, newValue.ToString());
		}
		#endregion // SourceSystem accessor methods

		#region SourceSystem collection
        public SourceSystemCollection	MySourceSystems = new SourceSystemCollection( );

        public class SourceSystemCollection: IEnumerable
        {
            UserIDDetailsType parent;
            public UserIDDetailsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public SourceSystemEnumerator GetEnumerator() 
			{
				return new SourceSystemEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class SourceSystemEnumerator: IEnumerator 
        {
			int nIndex;
			UserIDDetailsType parent;
			public SourceSystemEnumerator(UserIDDetailsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.SourceSystemCount );
			}
			public UserIDSystemChoiceType  Current 
			{
				get 
				{
					return(parent.GetSourceSystemAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // SourceSystem collection

        private void SetCollectionParents()
        {
            MyUserIDs.Parent = this; 
            MySourceSystems.Parent = this; 
	}
}
}
